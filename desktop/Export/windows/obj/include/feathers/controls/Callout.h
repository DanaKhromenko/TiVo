// Generated by Haxe 4.3.2
#ifndef INCLUDED_feathers_controls_Callout
#define INCLUDED_feathers_controls_Callout

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
HX_DECLARE_CLASS2(feathers,controls,Callout)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,InvalidationFlag)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,layout,HorizontalAlign)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,layout,Measurements)
HX_DECLARE_CLASS2(feathers,layout,RelativePosition)
HX_DECLARE_CLASS2(feathers,layout,VerticalAlign)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,events,TouchEvent)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace feathers{
namespace controls{


class HXCPP_CLASS_ATTRIBUTES Callout_obj : public  ::feathers::core::FeathersControl_obj
{
	public:
		typedef  ::feathers::core::FeathersControl_obj super;
		typedef Callout_obj OBJ_;
		Callout_obj();

	public:
		enum { _hx_ClassId = 0x6e6d822a };

		void __construct( ::openfl::display::DisplayObject content);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.controls.Callout")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.controls.Callout"); }
		static ::hx::ObjectPtr< Callout_obj > __new( ::openfl::display::DisplayObject content);
		static ::hx::ObjectPtr< Callout_obj > __alloc(::hx::Ctx *_hx_ctx, ::openfl::display::DisplayObject content);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Callout_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Callout",90,66,ba,21); }

		static void __boot();
		static  ::Dynamic __meta__;
		static  ::feathers::core::InvalidationFlag INVALIDATION_FLAG_ORIGIN;
		static  ::feathers::controls::Callout show( ::openfl::display::DisplayObject content, ::openfl::display::DisplayObject origin,::Array< ::Dynamic> supportedPositions,::hx::Null< bool >  modal, ::Dynamic customOverlayFactory);
		static ::Dynamic show_dyn();

		static  ::feathers::controls::Callout showCallout( ::feathers::controls::Callout callout, ::openfl::display::DisplayObject origin,::Array< ::Dynamic> supportedPositions,::hx::Null< bool >  modal, ::Dynamic customOverlayFactory);
		static ::Dynamic showCallout_dyn();

		static void positionBelowOrigin( ::feathers::controls::Callout callout, ::openfl::geom::Rectangle originBounds);
		static ::Dynamic positionBelowOrigin_dyn();

		static void positionAboveOrigin( ::feathers::controls::Callout callout, ::openfl::geom::Rectangle originBounds);
		static ::Dynamic positionAboveOrigin_dyn();

		static void positionLeftOfOrigin( ::feathers::controls::Callout callout, ::openfl::geom::Rectangle originBounds);
		static ::Dynamic positionLeftOfOrigin_dyn();

		static void positionRightOfOrigin( ::feathers::controls::Callout callout, ::openfl::geom::Rectangle originBounds);
		static ::Dynamic positionRightOfOrigin_dyn();

		 ::feathers::layout::Measurements _contentMeasurements;
		 ::openfl::display::DisplayObject _content;
		 ::openfl::display::DisplayObject get_content();
		::Dynamic get_content_dyn();

		 ::openfl::display::DisplayObject set_content( ::openfl::display::DisplayObject value);
		::Dynamic set_content_dyn();

		 ::openfl::display::DisplayObject _origin;
		 ::openfl::display::DisplayObject get_origin();
		::Dynamic get_origin_dyn();

		 ::openfl::display::DisplayObject set_origin( ::openfl::display::DisplayObject value);
		::Dynamic set_origin_dyn();

		 ::openfl::display::DisplayObject _currentBackgroundSkin;
		 ::feathers::layout::Measurements _backgroundSkinMeasurements;
		 ::openfl::display::DisplayObject _currentArrowSkin;
		Float _arrowOffset;
		::Array< ::Dynamic> supportedPositions;
		 ::openfl::geom::Rectangle _lastPopUpOriginBounds;
		bool _ignoreContentResize;
		bool closeOnPointerOutside;
		void close();
		::Dynamic close_dyn();

		void setPadding(Float value);
		::Dynamic setPadding_dyn();

		void dispose();

		void initializeCalloutTheme();
		::Dynamic initializeCalloutTheme_dyn();

		virtual void update();

		bool measure();
		::Dynamic measure_dyn();

		bool measureWithArrowPosition( ::feathers::layout::RelativePosition arrowPosition);
		::Dynamic measureWithArrowPosition_dyn();

		 ::openfl::display::DisplayObject getCurrentBackgroundSkin();
		::Dynamic getCurrentBackgroundSkin_dyn();

		void refreshBackgroundSkin();
		::Dynamic refreshBackgroundSkin_dyn();

		void addCurrentBackgroundSkin( ::openfl::display::DisplayObject skin);
		::Dynamic addCurrentBackgroundSkin_dyn();

		void removeCurrentBackgroundSkin( ::openfl::display::DisplayObject skin);
		::Dynamic removeCurrentBackgroundSkin_dyn();

		void refreshArrowSkin();
		::Dynamic refreshArrowSkin_dyn();

		 ::openfl::display::DisplayObject getCurrentArrowSkin();
		::Dynamic getCurrentArrowSkin_dyn();

		void removeCurrentArrowSkin( ::openfl::display::DisplayObject skin);
		::Dynamic removeCurrentArrowSkin_dyn();

		void refreshEnabled();
		::Dynamic refreshEnabled_dyn();

		void layoutChildren();
		::Dynamic layoutChildren_dyn();

		bool checkForOriginMoved();
		::Dynamic checkForOriginMoved_dyn();

		void positionRelativeToOrigin();
		::Dynamic positionRelativeToOrigin_dyn();

		void callout_addedToStageHandler( ::openfl::events::Event event);
		::Dynamic callout_addedToStageHandler_dyn();

		void callout_removedFromStageHandler( ::openfl::events::Event event);
		::Dynamic callout_removedFromStageHandler_dyn();

		void callout_enterFrameHandler( ::openfl::events::Event event);
		::Dynamic callout_enterFrameHandler_dyn();

		void callout_origin_removedFromStageHandler( ::openfl::events::Event event);
		::Dynamic callout_origin_removedFromStageHandler_dyn();

		void callout_content_resizeHandler( ::openfl::events::Event event);
		::Dynamic callout_content_resizeHandler_dyn();

		void callout_stage_mouseDownHandler( ::openfl::events::MouseEvent event);
		::Dynamic callout_stage_mouseDownHandler_dyn();

		void callout_stage_touchBeginHandler( ::openfl::events::TouchEvent event);
		::Dynamic callout_stage_touchBeginHandler_dyn();

		Float _hx___gap;
		Float get_gap();
		::Dynamic get_gap_dyn();

		Float set_gap(Float value);
		::Dynamic set_gap_dyn();

		Float clearStyle_gap();
		::Dynamic clearStyle_gap_dyn();

		Float _hx___marginTop;
		Float get_marginTop();
		::Dynamic get_marginTop_dyn();

		Float set_marginTop(Float value);
		::Dynamic set_marginTop_dyn();

		Float clearStyle_marginTop();
		::Dynamic clearStyle_marginTop_dyn();

		Float _hx___marginRight;
		Float get_marginRight();
		::Dynamic get_marginRight_dyn();

		Float set_marginRight(Float value);
		::Dynamic set_marginRight_dyn();

		Float clearStyle_marginRight();
		::Dynamic clearStyle_marginRight_dyn();

		Float _hx___marginBottom;
		Float get_marginBottom();
		::Dynamic get_marginBottom_dyn();

		Float set_marginBottom(Float value);
		::Dynamic set_marginBottom_dyn();

		Float clearStyle_marginBottom();
		::Dynamic clearStyle_marginBottom_dyn();

		Float _hx___marginLeft;
		Float get_marginLeft();
		::Dynamic get_marginLeft_dyn();

		Float set_marginLeft(Float value);
		::Dynamic set_marginLeft_dyn();

		Float clearStyle_marginLeft();
		::Dynamic clearStyle_marginLeft_dyn();

		Float _hx___paddingTop;
		Float get_paddingTop();
		::Dynamic get_paddingTop_dyn();

		Float set_paddingTop(Float value);
		::Dynamic set_paddingTop_dyn();

		Float clearStyle_paddingTop();
		::Dynamic clearStyle_paddingTop_dyn();

		Float _hx___paddingRight;
		Float get_paddingRight();
		::Dynamic get_paddingRight_dyn();

		Float set_paddingRight(Float value);
		::Dynamic set_paddingRight_dyn();

		Float clearStyle_paddingRight();
		::Dynamic clearStyle_paddingRight_dyn();

		Float _hx___paddingBottom;
		Float get_paddingBottom();
		::Dynamic get_paddingBottom_dyn();

		Float set_paddingBottom(Float value);
		::Dynamic set_paddingBottom_dyn();

		Float clearStyle_paddingBottom();
		::Dynamic clearStyle_paddingBottom_dyn();

		Float _hx___paddingLeft;
		Float get_paddingLeft();
		::Dynamic get_paddingLeft_dyn();

		Float set_paddingLeft(Float value);
		::Dynamic set_paddingLeft_dyn();

		Float clearStyle_paddingLeft();
		::Dynamic clearStyle_paddingLeft_dyn();

		 ::feathers::layout::HorizontalAlign _hx___horizontalAlign;
		 ::feathers::layout::HorizontalAlign get_horizontalAlign();
		::Dynamic get_horizontalAlign_dyn();

		 ::feathers::layout::HorizontalAlign set_horizontalAlign( ::feathers::layout::HorizontalAlign value);
		::Dynamic set_horizontalAlign_dyn();

		 ::feathers::layout::HorizontalAlign clearStyle_horizontalAlign();
		::Dynamic clearStyle_horizontalAlign_dyn();

		 ::feathers::layout::VerticalAlign _hx___verticalAlign;
		 ::feathers::layout::VerticalAlign get_verticalAlign();
		::Dynamic get_verticalAlign_dyn();

		 ::feathers::layout::VerticalAlign set_verticalAlign( ::feathers::layout::VerticalAlign value);
		::Dynamic set_verticalAlign_dyn();

		 ::feathers::layout::VerticalAlign clearStyle_verticalAlign();
		::Dynamic clearStyle_verticalAlign_dyn();

		 ::feathers::layout::RelativePosition _hx___arrowPosition;
		 ::feathers::layout::RelativePosition get_arrowPosition();
		::Dynamic get_arrowPosition_dyn();

		 ::feathers::layout::RelativePosition set_arrowPosition( ::feathers::layout::RelativePosition value);
		::Dynamic set_arrowPosition_dyn();

		 ::feathers::layout::RelativePosition clearStyle_arrowPosition();
		::Dynamic clearStyle_arrowPosition_dyn();

		 ::openfl::display::DisplayObject _hx___backgroundSkin;
		 ::openfl::display::DisplayObject get_backgroundSkin();
		::Dynamic get_backgroundSkin_dyn();

		 ::openfl::display::DisplayObject set_backgroundSkin( ::openfl::display::DisplayObject value);
		::Dynamic set_backgroundSkin_dyn();

		 ::openfl::display::DisplayObject clearStyle_backgroundSkin();
		::Dynamic clearStyle_backgroundSkin_dyn();

		 ::openfl::display::DisplayObject _hx___topArrowSkin;
		 ::openfl::display::DisplayObject get_topArrowSkin();
		::Dynamic get_topArrowSkin_dyn();

		 ::openfl::display::DisplayObject set_topArrowSkin( ::openfl::display::DisplayObject value);
		::Dynamic set_topArrowSkin_dyn();

		 ::openfl::display::DisplayObject clearStyle_topArrowSkin();
		::Dynamic clearStyle_topArrowSkin_dyn();

		 ::openfl::display::DisplayObject _hx___rightArrowSkin;
		 ::openfl::display::DisplayObject get_rightArrowSkin();
		::Dynamic get_rightArrowSkin_dyn();

		 ::openfl::display::DisplayObject set_rightArrowSkin( ::openfl::display::DisplayObject value);
		::Dynamic set_rightArrowSkin_dyn();

		 ::openfl::display::DisplayObject clearStyle_rightArrowSkin();
		::Dynamic clearStyle_rightArrowSkin_dyn();

		 ::openfl::display::DisplayObject _hx___bottomArrowSkin;
		 ::openfl::display::DisplayObject get_bottomArrowSkin();
		::Dynamic get_bottomArrowSkin_dyn();

		 ::openfl::display::DisplayObject set_bottomArrowSkin( ::openfl::display::DisplayObject value);
		::Dynamic set_bottomArrowSkin_dyn();

		 ::openfl::display::DisplayObject clearStyle_bottomArrowSkin();
		::Dynamic clearStyle_bottomArrowSkin_dyn();

		 ::openfl::display::DisplayObject _hx___leftArrowSkin;
		 ::openfl::display::DisplayObject get_leftArrowSkin();
		::Dynamic get_leftArrowSkin_dyn();

		 ::openfl::display::DisplayObject set_leftArrowSkin( ::openfl::display::DisplayObject value);
		::Dynamic set_leftArrowSkin_dyn();

		 ::openfl::display::DisplayObject clearStyle_leftArrowSkin();
		::Dynamic clearStyle_leftArrowSkin_dyn();

		Float _hx___topArrowGap;
		Float get_topArrowGap();
		::Dynamic get_topArrowGap_dyn();

		Float set_topArrowGap(Float value);
		::Dynamic set_topArrowGap_dyn();

		Float clearStyle_topArrowGap();
		::Dynamic clearStyle_topArrowGap_dyn();

		Float _hx___rightArrowGap;
		Float get_rightArrowGap();
		::Dynamic get_rightArrowGap_dyn();

		Float set_rightArrowGap(Float value);
		::Dynamic set_rightArrowGap_dyn();

		Float clearStyle_rightArrowGap();
		::Dynamic clearStyle_rightArrowGap_dyn();

		Float _hx___bottomArrowGap;
		Float get_bottomArrowGap();
		::Dynamic get_bottomArrowGap_dyn();

		Float set_bottomArrowGap(Float value);
		::Dynamic set_bottomArrowGap_dyn();

		Float clearStyle_bottomArrowGap();
		::Dynamic clearStyle_bottomArrowGap_dyn();

		Float _hx___leftArrowGap;
		Float get_leftArrowGap();
		::Dynamic get_leftArrowGap_dyn();

		Float set_leftArrowGap(Float value);
		::Dynamic set_leftArrowGap_dyn();

		Float clearStyle_leftArrowGap();
		::Dynamic clearStyle_leftArrowGap_dyn();

		virtual ::hx::Class get_styleContext();

};

} // end namespace feathers
} // end namespace controls

#endif /* INCLUDED_feathers_controls_Callout */ 
