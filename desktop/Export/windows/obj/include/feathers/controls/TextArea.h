// Generated by Haxe 4.3.2
#ifndef INCLUDED_feathers_controls_TextArea
#define INCLUDED_feathers_controls_TextArea

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_feathers_controls_supportClasses_BaseScrollContainer
#include <feathers/controls/supportClasses/BaseScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_core_IStageFocusDelegate
#include <feathers/core/IStageFocusDelegate.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
HX_DECLARE_CLASS2(feathers,controls,Callout)
HX_DECLARE_CLASS2(feathers,controls,TextArea)
HX_DECLARE_CLASS2(feathers,controls,TextCallout)
HX_DECLARE_CLASS2(feathers,controls,TextInputState)
HX_DECLARE_CLASS3(feathers,controls,supportClasses,BaseScrollContainer)
HX_DECLARE_CLASS3(feathers,controls,supportClasses,IViewPort)
HX_DECLARE_CLASS3(feathers,controls,supportClasses,TextFieldViewPort)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IFocusManagerAware)
HX_DECLARE_CLASS2(feathers,core,IFocusObject)
HX_DECLARE_CLASS2(feathers,core,IHTMLTextControl)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IStageFocusDelegate)
HX_DECLARE_CLASS2(feathers,core,IStateContext)
HX_DECLARE_CLASS2(feathers,core,ITextControl)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,InvalidationFlag)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS2(feathers,text,TextFormat)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,FocusEvent)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(openfl,text,TextFormat)

namespace feathers{
namespace controls{


class HXCPP_CLASS_ATTRIBUTES TextArea_obj : public  ::feathers::controls::supportClasses::BaseScrollContainer_obj
{
	public:
		typedef  ::feathers::controls::supportClasses::BaseScrollContainer_obj super;
		typedef TextArea_obj OBJ_;
		TextArea_obj();

	public:
		enum { _hx_ClassId = 0x142d1584 };

		void __construct(::String __o_text,::String prompt, ::Dynamic changeListener);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.controls.TextArea")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.controls.TextArea"); }
		static ::hx::ObjectPtr< TextArea_obj > __new(::String __o_text,::String prompt, ::Dynamic changeListener);
		static ::hx::ObjectPtr< TextArea_obj > __alloc(::hx::Ctx *_hx_ctx,::String __o_text,::String prompt, ::Dynamic changeListener);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TextArea_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		 ::Dynamic get_currentState_2aa2127b();
		::String __ToString() const { return HX_("TextArea",fa,9a,21,1d); }

		static void __boot();
		static  ::Dynamic __meta__;
		static  ::feathers::core::InvalidationFlag INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY;
		static ::String CHILD_VARIANT_ERROR_CALLOUT;
		 ::feathers::controls::supportClasses::TextFieldViewPort textFieldViewPort;
		 ::openfl::text::TextField promptTextField;
		 ::feathers::controls::TextCallout errorStringCallout;
		 ::feathers::text::TextFormat _previousTextFormat;
		 ::openfl::text::TextFormat _previousSimpleTextFormat;
		::String _previousPrompt;
		 ::feathers::text::TextFormat _previousPromptTextFormat;
		 ::openfl::text::TextFormat _previousSimplePromptTextFormat;
		bool _updatedPromptStyles;
		Float _promptTextMeasuredWidth;
		Float _promptTextMeasuredHeight;
		bool get_tabEnabled();

		bool _editable;
		bool get_editable();
		::Dynamic get_editable_dyn();

		bool set_editable(bool value);
		::Dynamic set_editable_dyn();

		bool _selectable;
		bool get_selectable();
		::Dynamic get_selectable_dyn();

		bool set_selectable(bool value);
		::Dynamic set_selectable_dyn();

		 ::feathers::controls::TextInputState _currentState;
		 ::feathers::controls::TextInputState get_currentState();
		::Dynamic get_currentState_dyn();

		bool set_enabled(bool value);

		::String _text;
		::String get_text();
		::Dynamic get_text_dyn();

		::String set_text(::String value);
		::Dynamic set_text_dyn();

		Float get_baseline();
		::Dynamic get_baseline_dyn();

		::String _prompt;
		::String get_prompt();
		::Dynamic get_prompt_dyn();

		::String set_prompt(::String value);
		::Dynamic set_prompt_dyn();

		::String _hx___restrict;
		::String get_restrict();
		::Dynamic get_restrict_dyn();

		::String set_restrict(::String value);
		::Dynamic set_restrict_dyn();

		bool _displayAsPassword;
		bool get_displayAsPassword();
		::Dynamic get_displayAsPassword_dyn();

		bool set_displayAsPassword(bool value);
		::Dynamic set_displayAsPassword_dyn();

		::String _errorString;
		::String get_errorString();
		::Dynamic get_errorString_dyn();

		::String set_errorString(::String value);
		::Dynamic set_errorString_dyn();

		bool get_errorStringCalloutOpen();
		::Dynamic get_errorStringCalloutOpen_dyn();

		 ::haxe::ds::EnumValueMap _stateToTextFormat;
		int get_selectionAnchorIndex();
		::Dynamic get_selectionAnchorIndex_dyn();

		int get_selectionActiveIndex();
		::Dynamic get_selectionActiveIndex_dyn();

		int _maxChars;
		int get_maxChars();
		::Dynamic get_maxChars_dyn();

		int set_maxChars(int value);
		::Dynamic set_maxChars_dyn();

		::String _previousCustomErrorCalloutVariant;
		bool _ignoreViewPortTextChange;
		bool get_measureViewPort();

		 ::openfl::display::InteractiveObject get_stageFocusTarget();
		::Dynamic get_stageFocusTarget_dyn();

		 ::haxe::ds::EnumValueMap _stateToSkin;
		 ::openfl::display::DisplayObject getSkinForState( ::feathers::controls::TextInputState state);
		::Dynamic getSkinForState_dyn();

		void setSkinForState( ::feathers::controls::TextInputState state, ::openfl::display::DisplayObject skin);
		::Dynamic setSkinForState_dyn();

		 ::feathers::text::TextFormat getTextFormatForState( ::feathers::controls::TextInputState state);
		::Dynamic getTextFormatForState_dyn();

		void setTextFormatForState( ::feathers::controls::TextInputState state, ::feathers::text::TextFormat textFormat);
		::Dynamic setTextFormatForState_dyn();

		void selectRange(int anchorIndex,int activeIndex);
		::Dynamic selectRange_dyn();

		void selectAll();
		::Dynamic selectAll_dyn();

		void setTextPadding(Float value);
		::Dynamic setTextPadding_dyn();

		void showFocus(bool show);

		void dispose();

		void initializeTextAreaTheme();
		::Dynamic initializeTextAreaTheme_dyn();

		void update();

		void layoutChildren();

		void addCurrentBackgroundSkin( ::openfl::display::DisplayObject skin);

		void removeCurrentBackgroundSkin( ::openfl::display::DisplayObject skin);

		void refreshTextStyles();
		::Dynamic refreshTextStyles_dyn();

		void refreshPrompt();
		::Dynamic refreshPrompt_dyn();

		void refreshPromptText(bool sizeInvalid);
		::Dynamic refreshPromptText_dyn();

		void refreshPromptStyles();
		::Dynamic refreshPromptStyles_dyn();

		 ::feathers::text::TextFormat getCurrentPromptTextFormat();
		::Dynamic getCurrentPromptTextFormat_dyn();

		void refreshErrorString();
		::Dynamic refreshErrorString_dyn();

		void layoutPrompt();
		::Dynamic layoutPrompt_dyn();

		 ::openfl::display::DisplayObject getCurrentBackgroundSkin();

		 ::feathers::text::TextFormat getCurrentTextFormat();
		::Dynamic getCurrentTextFormat_dyn();

		void createErrorCallout();
		::Dynamic createErrorCallout_dyn();

		void destroyErrorCallout();
		::Dynamic destroyErrorCallout_dyn();

		void changeState( ::feathers::controls::TextInputState state);
		::Dynamic changeState_dyn();

		void refreshState();
		::Dynamic refreshState_dyn();

		void textArea_focusInHandler( ::openfl::events::FocusEvent event);
		::Dynamic textArea_focusInHandler_dyn();

		void textArea_focusOutHandler( ::openfl::events::FocusEvent event);
		::Dynamic textArea_focusOutHandler_dyn();

		void baseScrollContainer_keyDownHandler( ::openfl::events::KeyboardEvent event);

		void textArea_viewPort_changeHandler( ::openfl::events::Event event);
		::Dynamic textArea_viewPort_changeHandler_dyn();

		void textArea_textFormat_changeHandler( ::openfl::events::Event event);
		::Dynamic textArea_textFormat_changeHandler_dyn();

		void textArea_promptTextFormat_changeHandler( ::openfl::events::Event event);
		::Dynamic textArea_promptTextFormat_changeHandler_dyn();

		::hx::Class get_styleContext();

		bool _hx___smoothScrolling;
		bool get_smoothScrolling();
		::Dynamic get_smoothScrolling_dyn();

		bool set_smoothScrolling(bool value);
		::Dynamic set_smoothScrolling_dyn();

		bool clearStyle_smoothScrolling();
		::Dynamic clearStyle_smoothScrolling_dyn();

		 ::feathers::text::TextFormat _hx___textFormat;
		 ::feathers::text::TextFormat get_textFormat();
		::Dynamic get_textFormat_dyn();

		 ::feathers::text::TextFormat set_textFormat( ::feathers::text::TextFormat value);
		::Dynamic set_textFormat_dyn();

		 ::feathers::text::TextFormat clearStyle_textFormat();
		::Dynamic clearStyle_textFormat_dyn();

		 ::feathers::text::TextFormat _hx___disabledTextFormat;
		 ::feathers::text::TextFormat get_disabledTextFormat();
		::Dynamic get_disabledTextFormat_dyn();

		 ::feathers::text::TextFormat set_disabledTextFormat( ::feathers::text::TextFormat value);
		::Dynamic set_disabledTextFormat_dyn();

		 ::feathers::text::TextFormat clearStyle_disabledTextFormat();
		::Dynamic clearStyle_disabledTextFormat_dyn();

		 ::feathers::text::TextFormat _hx___promptTextFormat;
		 ::feathers::text::TextFormat get_promptTextFormat();
		::Dynamic get_promptTextFormat_dyn();

		 ::feathers::text::TextFormat set_promptTextFormat( ::feathers::text::TextFormat value);
		::Dynamic set_promptTextFormat_dyn();

		 ::feathers::text::TextFormat clearStyle_promptTextFormat();
		::Dynamic clearStyle_promptTextFormat_dyn();

		bool _hx___embedFonts;
		bool get_embedFonts();
		::Dynamic get_embedFonts_dyn();

		bool set_embedFonts(bool value);
		::Dynamic set_embedFonts_dyn();

		bool clearStyle_embedFonts();
		::Dynamic clearStyle_embedFonts_dyn();

		bool _hx___wordWrap;
		bool get_wordWrap();
		::Dynamic get_wordWrap_dyn();

		bool set_wordWrap(bool value);
		::Dynamic set_wordWrap_dyn();

		bool clearStyle_wordWrap();
		::Dynamic clearStyle_wordWrap_dyn();

		Float _hx___textPaddingTop;
		Float get_textPaddingTop();
		::Dynamic get_textPaddingTop_dyn();

		Float set_textPaddingTop(Float value);
		::Dynamic set_textPaddingTop_dyn();

		Float clearStyle_textPaddingTop();
		::Dynamic clearStyle_textPaddingTop_dyn();

		Float _hx___textPaddingRight;
		Float get_textPaddingRight();
		::Dynamic get_textPaddingRight_dyn();

		Float set_textPaddingRight(Float value);
		::Dynamic set_textPaddingRight_dyn();

		Float clearStyle_textPaddingRight();
		::Dynamic clearStyle_textPaddingRight_dyn();

		Float _hx___textPaddingBottom;
		Float get_textPaddingBottom();
		::Dynamic get_textPaddingBottom_dyn();

		Float set_textPaddingBottom(Float value);
		::Dynamic set_textPaddingBottom_dyn();

		Float clearStyle_textPaddingBottom();
		::Dynamic clearStyle_textPaddingBottom_dyn();

		Float _hx___textPaddingLeft;
		Float get_textPaddingLeft();
		::Dynamic get_textPaddingLeft_dyn();

		Float set_textPaddingLeft(Float value);
		::Dynamic set_textPaddingLeft_dyn();

		Float clearStyle_textPaddingLeft();
		::Dynamic clearStyle_textPaddingLeft_dyn();

		bool _hx___showPromptWhenEmptyAndFocused;
		bool get_showPromptWhenEmptyAndFocused();
		::Dynamic get_showPromptWhenEmptyAndFocused_dyn();

		bool set_showPromptWhenEmptyAndFocused(bool value);
		::Dynamic set_showPromptWhenEmptyAndFocused_dyn();

		bool clearStyle_showPromptWhenEmptyAndFocused();
		::Dynamic clearStyle_showPromptWhenEmptyAndFocused_dyn();

		::String _hx___customErrorCalloutVariant;
		::String get_customErrorCalloutVariant();
		::Dynamic get_customErrorCalloutVariant_dyn();

		::String set_customErrorCalloutVariant(::String value);
		::Dynamic set_customErrorCalloutVariant_dyn();

		::String clearStyle_customErrorCalloutVariant();
		::Dynamic clearStyle_customErrorCalloutVariant_dyn();

};

} // end namespace feathers
} // end namespace controls

#endif /* INCLUDED_feathers_controls_TextArea */ 
