// Generated by Haxe 4.3.2
#ifndef INCLUDED_feathers_controls_TextCallout
#define INCLUDED_feathers_controls_TextCallout

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_feathers_controls_Callout
#include <feathers/controls/Callout.h>
#endif
#ifndef INCLUDED_feathers_core_IHTMLTextControl
#include <feathers/core/IHTMLTextControl.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
HX_DECLARE_CLASS2(feathers,controls,Callout)
HX_DECLARE_CLASS2(feathers,controls,Label)
HX_DECLARE_CLASS2(feathers,controls,TextCallout)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IFocusManagerAware)
HX_DECLARE_CLASS2(feathers,core,IFocusObject)
HX_DECLARE_CLASS2(feathers,core,IHTMLTextControl)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IStageFocusDelegate)
HX_DECLARE_CLASS2(feathers,core,ITextControl)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,layout,RelativePosition)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS2(feathers,text,TextFormat)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,StyleSheet)

namespace feathers{
namespace controls{


class HXCPP_CLASS_ATTRIBUTES TextCallout_obj : public  ::feathers::controls::Callout_obj
{
	public:
		typedef  ::feathers::controls::Callout_obj super;
		typedef TextCallout_obj OBJ_;
		TextCallout_obj();

	public:
		enum { _hx_ClassId = 0x18349751 };

		void __construct(::String __o_text);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.controls.TextCallout")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.controls.TextCallout"); }
		static ::hx::ObjectPtr< TextCallout_obj > __new(::String __o_text);
		static ::hx::ObjectPtr< TextCallout_obj > __alloc(::hx::Ctx *_hx_ctx,::String __o_text);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TextCallout_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("TextCallout",63,d1,1b,14); }

		static void __boot();
		static  ::Dynamic __meta__;
		static ::String VARIANT_DANGER;
		static  ::feathers::controls::TextCallout show(::String text, ::openfl::display::DisplayObject origin,::Array< ::Dynamic> supportedPositions,::hx::Null< bool >  modal);
		static ::Dynamic show_dyn();

		 ::feathers::controls::Label label;
		::String _text;
		::String get_text();
		::Dynamic get_text_dyn();

		::String set_text(::String value);
		::Dynamic set_text_dyn();

		::String _htmlText;
		::String get_htmlText();
		::Dynamic get_htmlText_dyn();

		::String set_htmlText(::String value);
		::Dynamic set_htmlText_dyn();

		Float get_baseline();
		::Dynamic get_baseline_dyn();

		void initializeTextCalloutTheme();
		::Dynamic initializeTextCalloutTheme_dyn();

		void initialize();

		void update();

		void refreshTextStyles();
		::Dynamic refreshTextStyles_dyn();

		void refreshText();
		::Dynamic refreshText_dyn();

		::hx::Class get_styleContext();

		 ::feathers::text::TextFormat _hx___textFormat;
		 ::feathers::text::TextFormat get_textFormat();
		::Dynamic get_textFormat_dyn();

		 ::feathers::text::TextFormat set_textFormat( ::feathers::text::TextFormat value);
		::Dynamic set_textFormat_dyn();

		 ::feathers::text::TextFormat clearStyle_textFormat();
		::Dynamic clearStyle_textFormat_dyn();

		 ::openfl::text::StyleSheet _hx___styleSheet;
		 ::openfl::text::StyleSheet get_styleSheet();
		::Dynamic get_styleSheet_dyn();

		 ::openfl::text::StyleSheet set_styleSheet( ::openfl::text::StyleSheet value);
		::Dynamic set_styleSheet_dyn();

		 ::openfl::text::StyleSheet clearStyle_styleSheet();
		::Dynamic clearStyle_styleSheet_dyn();

		bool _hx___embedFonts;
		bool get_embedFonts();
		::Dynamic get_embedFonts_dyn();

		bool set_embedFonts(bool value);
		::Dynamic set_embedFonts_dyn();

		bool clearStyle_embedFonts();
		::Dynamic clearStyle_embedFonts_dyn();

		 ::feathers::text::TextFormat _hx___disabledTextFormat;
		 ::feathers::text::TextFormat get_disabledTextFormat();
		::Dynamic get_disabledTextFormat_dyn();

		 ::feathers::text::TextFormat set_disabledTextFormat( ::feathers::text::TextFormat value);
		::Dynamic set_disabledTextFormat_dyn();

		 ::feathers::text::TextFormat clearStyle_disabledTextFormat();
		::Dynamic clearStyle_disabledTextFormat_dyn();

		bool _hx___wordWrap;
		bool get_wordWrap();
		::Dynamic get_wordWrap_dyn();

		bool set_wordWrap(bool value);
		::Dynamic set_wordWrap_dyn();

		bool clearStyle_wordWrap();
		::Dynamic clearStyle_wordWrap_dyn();

};

} // end namespace feathers
} // end namespace controls

#endif /* INCLUDED_feathers_controls_TextCallout */ 
