// Generated by Haxe 4.3.2
#ifndef INCLUDED_feathers_controls_TextInput
#define INCLUDED_feathers_controls_TextInput

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IStageFocusDelegate
#include <feathers/core/IStageFocusDelegate.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
HX_DECLARE_CLASS2(feathers,controls,Callout)
HX_DECLARE_CLASS2(feathers,controls,TextCallout)
HX_DECLARE_CLASS2(feathers,controls,TextInput)
HX_DECLARE_CLASS2(feathers,controls,TextInputState)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IFocusManagerAware)
HX_DECLARE_CLASS2(feathers,core,IFocusObject)
HX_DECLARE_CLASS2(feathers,core,IHTMLTextControl)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IStageFocusDelegate)
HX_DECLARE_CLASS2(feathers,core,IStateContext)
HX_DECLARE_CLASS2(feathers,core,ITextControl)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,InvalidationFlag)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,layout,Measurements)
HX_DECLARE_CLASS2(feathers,layout,VerticalAlign)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS2(feathers,text,TextFormat)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,FocusEvent)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(openfl,text,TextFormat)

namespace feathers{
namespace controls{


class HXCPP_CLASS_ATTRIBUTES TextInput_obj : public  ::feathers::core::FeathersControl_obj
{
	public:
		typedef  ::feathers::core::FeathersControl_obj super;
		typedef TextInput_obj OBJ_;
		TextInput_obj();

	public:
		enum { _hx_ClassId = 0x2d42ea17 };

		void __construct(::String __o_text,::String prompt, ::Dynamic changeListener);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.controls.TextInput")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.controls.TextInput"); }
		static ::hx::ObjectPtr< TextInput_obj > __new(::String __o_text,::String prompt, ::Dynamic changeListener);
		static ::hx::ObjectPtr< TextInput_obj > __alloc(::hx::Ctx *_hx_ctx,::String __o_text,::String prompt, ::Dynamic changeListener);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TextInput_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		 ::Dynamic get_currentState_2aa2127b();
		::String __ToString() const { return HX_("TextInput",fd,33,de,f8); }

		static void __boot();
		static  ::Dynamic __meta__;
		static  ::feathers::core::InvalidationFlag INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY;
		static ::String VARIANT_SEARCH;
		static ::String CHILD_VARIANT_ERROR_CALLOUT;
		bool _editable;
		bool get_editable();
		::Dynamic get_editable_dyn();

		bool set_editable(bool value);
		::Dynamic set_editable_dyn();

		bool _selectable;
		bool get_selectable();
		::Dynamic get_selectable_dyn();

		bool set_selectable(bool value);
		::Dynamic set_selectable_dyn();

		 ::openfl::display::InteractiveObject get_stageFocusTarget();
		::Dynamic get_stageFocusTarget_dyn();

		 ::feathers::controls::TextInputState _currentState;
		 ::feathers::controls::TextInputState get_currentState();
		::Dynamic get_currentState_dyn();

		bool set_enabled(bool value);

		 ::feathers::layout::Measurements _backgroundSkinMeasurements;
		 ::openfl::display::DisplayObject _currentBackgroundSkin;
		 ::openfl::display::DisplayObject _currentLeftView;
		 ::feathers::layout::Measurements _leftViewMeasurements;
		bool _ignoreLeftViewResize;
		 ::openfl::display::DisplayObject _currentRightView;
		 ::feathers::layout::Measurements _rightViewMeasurements;
		bool _ignoreRightViewResize;
		 ::haxe::ds::EnumValueMap _stateToSkin;
		 ::openfl::text::TextField textField;
		 ::openfl::text::TextField promptTextField;
		 ::feathers::controls::TextCallout errorStringCallout;
		::String _previousText;
		::String _previousMeasureText;
		::String _previousPrompt;
		 ::feathers::text::TextFormat _previousTextFormat;
		 ::openfl::text::TextFormat _previousSimpleTextFormat;
		 ::feathers::text::TextFormat _previousPromptTextFormat;
		 ::openfl::text::TextFormat _previousPromptSimpleTextFormat;
		bool _updatedTextStyles;
		bool _updatedPromptStyles;
		::String _text;
		::String get_text();
		::Dynamic get_text_dyn();

		::String set_text(::String value);
		::Dynamic set_text_dyn();

		::String _measureText;
		::String get_measureText();
		::Dynamic get_measureText_dyn();

		::String set_measureText(::String value);
		::Dynamic set_measureText_dyn();

		Float get_baseline();
		::Dynamic get_baseline_dyn();

		::String _prompt;
		::String get_prompt();
		::Dynamic get_prompt_dyn();

		::String set_prompt(::String value);
		::Dynamic set_prompt_dyn();

		::String _hx___restrict;
		::String get_restrict();
		::Dynamic get_restrict_dyn();

		::String set_restrict(::String value);
		::Dynamic set_restrict_dyn();

		bool _displayAsPassword;
		bool get_displayAsPassword();
		::Dynamic get_displayAsPassword_dyn();

		bool set_displayAsPassword(bool value);
		::Dynamic set_displayAsPassword_dyn();

		::String _errorString;
		::String get_errorString();
		::Dynamic get_errorString_dyn();

		::String set_errorString(::String value);
		::Dynamic set_errorString_dyn();

		bool get_errorStringCalloutOpen();
		::Dynamic get_errorStringCalloutOpen_dyn();

		 ::haxe::ds::EnumValueMap _stateToTextFormat;
		Float _scrollX;
		Float get_scrollX();
		::Dynamic get_scrollX_dyn();

		Float set_scrollX(Float value);
		::Dynamic set_scrollX_dyn();

		int _pendingSelectionAnchorIndex;
		int get_selectionAnchorIndex();
		::Dynamic get_selectionAnchorIndex_dyn();

		int _pendingSelectionActiveIndex;
		int get_selectionActiveIndex();
		::Dynamic get_selectionActiveIndex_dyn();

		int _maxChars;
		int get_maxChars();
		::Dynamic get_maxChars_dyn();

		int set_maxChars(int value);
		::Dynamic set_maxChars_dyn();

		::String _previousCustomErrorCalloutVariant;
		Float _textMeasuredWidth;
		Float _textMeasuredHeight;
		Float _promptTextMeasuredWidth;
		Float _promptTextMeasuredHeight;
		 ::openfl::display::DisplayObject getSkinForState( ::feathers::controls::TextInputState state);
		::Dynamic getSkinForState_dyn();

		void setSkinForState( ::feathers::controls::TextInputState state, ::openfl::display::DisplayObject skin);
		::Dynamic setSkinForState_dyn();

		 ::feathers::text::TextFormat getTextFormatForState( ::feathers::controls::TextInputState state);
		::Dynamic getTextFormatForState_dyn();

		void setTextFormatForState( ::feathers::controls::TextInputState state, ::feathers::text::TextFormat textFormat);
		::Dynamic setTextFormatForState_dyn();

		void selectRange(int anchorIndex,int activeIndex);
		::Dynamic selectRange_dyn();

		void selectAll();
		::Dynamic selectAll_dyn();

		void setPadding(Float value);
		::Dynamic setPadding_dyn();

		void showFocus(bool show);

		void dispose();

		void initializeTextInputTheme();
		::Dynamic initializeTextInputTheme_dyn();

		void initialize();

		void update();

		void refreshBackgroundSkin();
		::Dynamic refreshBackgroundSkin_dyn();

		 ::openfl::display::DisplayObject getCurrentBackgroundSkin();
		::Dynamic getCurrentBackgroundSkin_dyn();

		void addCurrentBackgroundSkin( ::openfl::display::DisplayObject skin);
		::Dynamic addCurrentBackgroundSkin_dyn();

		void removeCurrentBackgroundSkin( ::openfl::display::DisplayObject skin);
		::Dynamic removeCurrentBackgroundSkin_dyn();

		void refreshLeftView();
		::Dynamic refreshLeftView_dyn();

		 ::openfl::display::DisplayObject getCurrentLeftView();
		::Dynamic getCurrentLeftView_dyn();

		void removeCurrentLeftView( ::openfl::display::DisplayObject view);
		::Dynamic removeCurrentLeftView_dyn();

		void refreshRightView();
		::Dynamic refreshRightView_dyn();

		 ::openfl::display::DisplayObject getCurrentRightView();
		::Dynamic getCurrentRightView_dyn();

		void removeCurrentRightView( ::openfl::display::DisplayObject view);
		::Dynamic removeCurrentRightView_dyn();

		bool measure();
		::Dynamic measure_dyn();

		void refreshTextFieldType();
		::Dynamic refreshTextFieldType_dyn();

		void refreshTextStyles();
		::Dynamic refreshTextStyles_dyn();

		void refreshPrompt();
		::Dynamic refreshPrompt_dyn();

		void refreshPromptText(bool sizeInvalid);
		::Dynamic refreshPromptText_dyn();

		void refreshPromptStyles();
		::Dynamic refreshPromptStyles_dyn();

		 ::feathers::text::TextFormat getCurrentPromptTextFormat();
		::Dynamic getCurrentPromptTextFormat_dyn();

		void refreshText(bool forceMeasurement);
		::Dynamic refreshText_dyn();

		void refreshSelection();
		::Dynamic refreshSelection_dyn();

		void refreshScrollPosition();
		::Dynamic refreshScrollPosition_dyn();

		 ::feathers::text::TextFormat getCurrentTextFormat();
		::Dynamic getCurrentTextFormat_dyn();

		void layoutContent();
		::Dynamic layoutContent_dyn();

		void alignTextField( ::openfl::text::TextField textField,Float textFieldHeight,Float maxHeight);
		::Dynamic alignTextField_dyn();

		void layoutBackgroundSkin();
		::Dynamic layoutBackgroundSkin_dyn();

		void refreshErrorString();
		::Dynamic refreshErrorString_dyn();

		void createErrorCallout();
		::Dynamic createErrorCallout_dyn();

		void destroyErrorCallout();
		::Dynamic destroyErrorCallout_dyn();

		void changeState( ::feathers::controls::TextInputState state);
		::Dynamic changeState_dyn();

		void refreshState();
		::Dynamic refreshState_dyn();

		void textField_changeHandler( ::openfl::events::Event event);
		::Dynamic textField_changeHandler_dyn();

		void textField_scrollHandler( ::openfl::events::Event event);
		::Dynamic textField_scrollHandler_dyn();

		void textInput_focusInHandler( ::openfl::events::FocusEvent event);
		::Dynamic textInput_focusInHandler_dyn();

		void textInput_focusOutHandler( ::openfl::events::FocusEvent event);
		::Dynamic textInput_focusOutHandler_dyn();

		void textInput_textFormat_changeHandler( ::openfl::events::Event event);
		::Dynamic textInput_textFormat_changeHandler_dyn();

		void textInput_promptTextFormat_changeHandler( ::openfl::events::Event event);
		::Dynamic textInput_promptTextFormat_changeHandler_dyn();

		void textInput_leftView_resizeHandler( ::openfl::events::Event event);
		::Dynamic textInput_leftView_resizeHandler_dyn();

		void textInput_rightView_resizeHandler( ::openfl::events::Event event);
		::Dynamic textInput_rightView_resizeHandler_dyn();

		 ::openfl::display::DisplayObject _hx___backgroundSkin;
		 ::openfl::display::DisplayObject get_backgroundSkin();
		::Dynamic get_backgroundSkin_dyn();

		 ::openfl::display::DisplayObject set_backgroundSkin( ::openfl::display::DisplayObject value);
		::Dynamic set_backgroundSkin_dyn();

		 ::openfl::display::DisplayObject clearStyle_backgroundSkin();
		::Dynamic clearStyle_backgroundSkin_dyn();

		bool _hx___showPromptWhenEmptyAndFocused;
		bool get_showPromptWhenEmptyAndFocused();
		::Dynamic get_showPromptWhenEmptyAndFocused_dyn();

		bool set_showPromptWhenEmptyAndFocused(bool value);
		::Dynamic set_showPromptWhenEmptyAndFocused_dyn();

		bool clearStyle_showPromptWhenEmptyAndFocused();
		::Dynamic clearStyle_showPromptWhenEmptyAndFocused_dyn();

		 ::openfl::display::DisplayObject _hx___leftView;
		 ::openfl::display::DisplayObject get_leftView();
		::Dynamic get_leftView_dyn();

		 ::openfl::display::DisplayObject set_leftView( ::openfl::display::DisplayObject value);
		::Dynamic set_leftView_dyn();

		 ::openfl::display::DisplayObject clearStyle_leftView();
		::Dynamic clearStyle_leftView_dyn();

		Float _hx___leftViewGap;
		Float get_leftViewGap();
		::Dynamic get_leftViewGap_dyn();

		Float set_leftViewGap(Float value);
		::Dynamic set_leftViewGap_dyn();

		Float clearStyle_leftViewGap();
		::Dynamic clearStyle_leftViewGap_dyn();

		 ::openfl::display::DisplayObject _hx___rightView;
		 ::openfl::display::DisplayObject get_rightView();
		::Dynamic get_rightView_dyn();

		 ::openfl::display::DisplayObject set_rightView( ::openfl::display::DisplayObject value);
		::Dynamic set_rightView_dyn();

		 ::openfl::display::DisplayObject clearStyle_rightView();
		::Dynamic clearStyle_rightView_dyn();

		Float _hx___rightViewGap;
		Float get_rightViewGap();
		::Dynamic get_rightViewGap_dyn();

		Float set_rightViewGap(Float value);
		::Dynamic set_rightViewGap_dyn();

		Float clearStyle_rightViewGap();
		::Dynamic clearStyle_rightViewGap_dyn();

		 ::feathers::text::TextFormat _hx___textFormat;
		 ::feathers::text::TextFormat get_textFormat();
		::Dynamic get_textFormat_dyn();

		 ::feathers::text::TextFormat set_textFormat( ::feathers::text::TextFormat value);
		::Dynamic set_textFormat_dyn();

		 ::feathers::text::TextFormat clearStyle_textFormat();
		::Dynamic clearStyle_textFormat_dyn();

		 ::feathers::text::TextFormat _hx___disabledTextFormat;
		 ::feathers::text::TextFormat get_disabledTextFormat();
		::Dynamic get_disabledTextFormat_dyn();

		 ::feathers::text::TextFormat set_disabledTextFormat( ::feathers::text::TextFormat value);
		::Dynamic set_disabledTextFormat_dyn();

		 ::feathers::text::TextFormat clearStyle_disabledTextFormat();
		::Dynamic clearStyle_disabledTextFormat_dyn();

		 ::feathers::text::TextFormat _hx___promptTextFormat;
		 ::feathers::text::TextFormat get_promptTextFormat();
		::Dynamic get_promptTextFormat_dyn();

		 ::feathers::text::TextFormat set_promptTextFormat( ::feathers::text::TextFormat value);
		::Dynamic set_promptTextFormat_dyn();

		 ::feathers::text::TextFormat clearStyle_promptTextFormat();
		::Dynamic clearStyle_promptTextFormat_dyn();

		bool _hx___embedFonts;
		bool get_embedFonts();
		::Dynamic get_embedFonts_dyn();

		bool set_embedFonts(bool value);
		::Dynamic set_embedFonts_dyn();

		bool clearStyle_embedFonts();
		::Dynamic clearStyle_embedFonts_dyn();

		Float _hx___paddingTop;
		Float get_paddingTop();
		::Dynamic get_paddingTop_dyn();

		Float set_paddingTop(Float value);
		::Dynamic set_paddingTop_dyn();

		Float clearStyle_paddingTop();
		::Dynamic clearStyle_paddingTop_dyn();

		Float _hx___paddingRight;
		Float get_paddingRight();
		::Dynamic get_paddingRight_dyn();

		Float set_paddingRight(Float value);
		::Dynamic set_paddingRight_dyn();

		Float clearStyle_paddingRight();
		::Dynamic clearStyle_paddingRight_dyn();

		Float _hx___paddingBottom;
		Float get_paddingBottom();
		::Dynamic get_paddingBottom_dyn();

		Float set_paddingBottom(Float value);
		::Dynamic set_paddingBottom_dyn();

		Float clearStyle_paddingBottom();
		::Dynamic clearStyle_paddingBottom_dyn();

		Float _hx___paddingLeft;
		Float get_paddingLeft();
		::Dynamic get_paddingLeft_dyn();

		Float set_paddingLeft(Float value);
		::Dynamic set_paddingLeft_dyn();

		Float clearStyle_paddingLeft();
		::Dynamic clearStyle_paddingLeft_dyn();

		 ::feathers::layout::VerticalAlign _hx___verticalAlign;
		 ::feathers::layout::VerticalAlign get_verticalAlign();
		::Dynamic get_verticalAlign_dyn();

		 ::feathers::layout::VerticalAlign set_verticalAlign( ::feathers::layout::VerticalAlign value);
		::Dynamic set_verticalAlign_dyn();

		 ::feathers::layout::VerticalAlign clearStyle_verticalAlign();
		::Dynamic clearStyle_verticalAlign_dyn();

		bool _hx___autoSizeWidth;
		bool get_autoSizeWidth();
		::Dynamic get_autoSizeWidth_dyn();

		bool set_autoSizeWidth(bool value);
		::Dynamic set_autoSizeWidth_dyn();

		bool clearStyle_autoSizeWidth();
		::Dynamic clearStyle_autoSizeWidth_dyn();

		::String _hx___customErrorCalloutVariant;
		::String get_customErrorCalloutVariant();
		::Dynamic get_customErrorCalloutVariant_dyn();

		::String set_customErrorCalloutVariant(::String value);
		::Dynamic set_customErrorCalloutVariant_dyn();

		::String clearStyle_customErrorCalloutVariant();
		::Dynamic clearStyle_customErrorCalloutVariant_dyn();

		::hx::Class get_styleContext();

};

} // end namespace feathers
} // end namespace controls

#endif /* INCLUDED_feathers_controls_TextInput */ 
