// Generated by Haxe 4.3.2
#ifndef INCLUDED_feathers_controls_supportClasses_TextFieldViewPort
#define INCLUDED_feathers_controls_supportClasses_TextFieldViewPort

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IStageFocusDelegate
#include <feathers/core/IStageFocusDelegate.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusManagerAware
#include <feathers/core/IFocusManagerAware.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_IViewPort
#include <feathers/controls/supportClasses/IViewPort.h>
#endif
HX_DECLARE_CLASS3(feathers,controls,supportClasses,IViewPort)
HX_DECLARE_CLASS3(feathers,controls,supportClasses,TextFieldViewPort)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IFocusManagerAware)
HX_DECLARE_CLASS2(feathers,core,IFocusObject)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IStageFocusDelegate)
HX_DECLARE_CLASS2(feathers,core,ITextControl)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,FocusEvent)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(openfl,text,TextFormat)
HX_DECLARE_CLASS2(openfl,text,TextLineMetrics)

namespace feathers{
namespace controls{
namespace supportClasses{


class HXCPP_CLASS_ATTRIBUTES TextFieldViewPort_obj : public  ::feathers::core::FeathersControl_obj
{
	public:
		typedef  ::feathers::core::FeathersControl_obj super;
		typedef TextFieldViewPort_obj OBJ_;
		TextFieldViewPort_obj();

	public:
		enum { _hx_ClassId = 0x65e82fb6 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.controls.supportClasses.TextFieldViewPort")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.controls.supportClasses.TextFieldViewPort"); }
		static ::hx::ObjectPtr< TextFieldViewPort_obj > __new();
		static ::hx::ObjectPtr< TextFieldViewPort_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TextFieldViewPort_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("TextFieldViewPort",53,2e,4c,63); }

		 ::openfl::text::TextField _textField;
		 ::openfl::text::TextField get_textField();
		::Dynamic get_textField_dyn();

		 ::Dynamic _textFieldType;
		 ::Dynamic get_textFieldType();
		::Dynamic get_textFieldType_dyn();

		 ::Dynamic set_textFieldType( ::Dynamic value);
		::Dynamic set_textFieldType_dyn();

		::String _text;
		::String get_text();
		::Dynamic get_text_dyn();

		::String set_text(::String value);
		::Dynamic set_text_dyn();

		Float get_baseline();
		::Dynamic get_baseline_dyn();

		bool _wordWrap;
		bool get_wordWrap();
		::Dynamic get_wordWrap_dyn();

		bool set_wordWrap(bool value);
		::Dynamic set_wordWrap_dyn();

		bool _multiline;
		bool get_multiline();
		::Dynamic get_multiline_dyn();

		bool set_multiline(bool value);
		::Dynamic set_multiline_dyn();

		::String _hx___restrict;
		::String get_restrict();
		::Dynamic get_restrict_dyn();

		::String set_restrict(::String value);
		::Dynamic set_restrict_dyn();

		bool _displayAsPassword;
		bool get_displayAsPassword();
		::Dynamic get_displayAsPassword_dyn();

		bool set_displayAsPassword(bool value);
		::Dynamic set_displayAsPassword_dyn();

		int _maxChars;
		int get_maxChars();
		::Dynamic get_maxChars_dyn();

		int set_maxChars(int value);
		::Dynamic set_maxChars_dyn();

		bool _selectable;
		bool get_selectable();
		::Dynamic get_selectable_dyn();

		bool set_selectable(bool value);
		::Dynamic set_selectable_dyn();

		bool _smoothScrolling;
		bool get_smoothScrolling();
		::Dynamic get_smoothScrolling_dyn();

		bool set_smoothScrolling(bool value);
		::Dynamic set_smoothScrolling_dyn();

		bool _updatedTextStyles;
		::String _previousText;
		 ::openfl::text::TextFormat _previousTextFormat;
		 ::Dynamic _previousWidth;
		 ::openfl::text::TextLineMetrics _savedLineMetrics;
		Float _textMeasuredWidth;
		Float _textMeasuredHeight;
		 ::openfl::text::TextFormat _textFormat;
		 ::openfl::text::TextFormat get_textFormat();
		::Dynamic get_textFormat_dyn();

		 ::openfl::text::TextFormat set_textFormat( ::openfl::text::TextFormat value);
		::Dynamic set_textFormat_dyn();

		bool _embedFonts;
		bool get_embedFonts();
		::Dynamic get_embedFonts_dyn();

		bool set_embedFonts(bool value);
		::Dynamic set_embedFonts_dyn();

		Float _paddingTop;
		Float get_paddingTop();
		::Dynamic get_paddingTop_dyn();

		Float set_paddingTop(Float value);
		::Dynamic set_paddingTop_dyn();

		Float _paddingRight;
		Float get_paddingRight();
		::Dynamic get_paddingRight_dyn();

		Float set_paddingRight(Float value);
		::Dynamic set_paddingRight_dyn();

		Float _paddingBottom;
		Float get_paddingBottom();
		::Dynamic get_paddingBottom_dyn();

		Float set_paddingBottom(Float value);
		::Dynamic set_paddingBottom_dyn();

		Float _paddingLeft;
		Float get_paddingLeft();
		::Dynamic get_paddingLeft_dyn();

		Float set_paddingLeft(Float value);
		::Dynamic set_paddingLeft_dyn();

		 ::openfl::display::InteractiveObject get_stageFocusTarget();
		::Dynamic get_stageFocusTarget_dyn();

		Float _actualMinVisibleWidth;
		 ::Dynamic _explicitMinVisibleWidth;
		 ::Dynamic get_minVisibleWidth();
		::Dynamic get_minVisibleWidth_dyn();

		 ::Dynamic set_minVisibleWidth( ::Dynamic value);
		::Dynamic set_minVisibleWidth_dyn();

		 ::Dynamic _maxVisibleWidth;
		 ::Dynamic get_maxVisibleWidth();
		::Dynamic get_maxVisibleWidth_dyn();

		 ::Dynamic set_maxVisibleWidth( ::Dynamic value);
		::Dynamic set_maxVisibleWidth_dyn();

		Float _actualVisibleWidth;
		 ::Dynamic _explicitVisibleWidth;
		 ::Dynamic get_visibleWidth();
		::Dynamic get_visibleWidth_dyn();

		 ::Dynamic set_visibleWidth( ::Dynamic value);
		::Dynamic set_visibleWidth_dyn();

		Float _actualMinVisibleHeight;
		 ::Dynamic _explicitMinVisibleHeight;
		 ::Dynamic get_minVisibleHeight();
		::Dynamic get_minVisibleHeight_dyn();

		 ::Dynamic set_minVisibleHeight( ::Dynamic value);
		::Dynamic set_minVisibleHeight_dyn();

		 ::Dynamic _maxVisibleHeight;
		 ::Dynamic get_maxVisibleHeight();
		::Dynamic get_maxVisibleHeight_dyn();

		 ::Dynamic set_maxVisibleHeight( ::Dynamic value);
		::Dynamic set_maxVisibleHeight_dyn();

		Float _actualVisibleHeight;
		 ::Dynamic _explicitVisibleHeight;
		 ::Dynamic get_visibleHeight();
		::Dynamic get_visibleHeight_dyn();

		 ::Dynamic set_visibleHeight( ::Dynamic value);
		::Dynamic set_visibleHeight_dyn();

		Float _scrollX;
		Float get_scrollX();
		::Dynamic get_scrollX_dyn();

		Float set_scrollX(Float value);
		::Dynamic set_scrollX_dyn();

		Float _scrollY;
		Float get_scrollY();
		::Dynamic get_scrollY_dyn();

		Float set_scrollY(Float value);
		::Dynamic set_scrollY_dyn();

		int _pendingSelectionAnchorIndex;
		int get_selectionAnchorIndex();
		::Dynamic get_selectionAnchorIndex_dyn();

		int _pendingSelectionActiveIndex;
		int get_selectionActiveIndex();
		::Dynamic get_selectionActiveIndex_dyn();

		bool _textFieldHasFocus;
		bool _ignoreTextFieldScroll;
		void setPadding(Float value);
		::Dynamic setPadding_dyn();

		void selectRange(int anchorIndex,int activeIndex);
		::Dynamic selectRange_dyn();

		void initialize();

		void update();

		bool measureSelf();
		::Dynamic measureSelf_dyn();

		bool measure();
		::Dynamic measure_dyn();

		void refreshTextStyles();
		::Dynamic refreshTextStyles_dyn();

		void refreshText();
		::Dynamic refreshText_dyn();

		void refreshSelection();
		::Dynamic refreshSelection_dyn();

		void layoutTextField();
		::Dynamic layoutTextField_dyn();

		void textField_changeHandler( ::openfl::events::Event event);
		::Dynamic textField_changeHandler_dyn();

		void textField_focusInHandler( ::openfl::events::FocusEvent event);
		::Dynamic textField_focusInHandler_dyn();

		void textField_focusOutHandler( ::openfl::events::FocusEvent event);
		::Dynamic textField_focusOutHandler_dyn();

		void textField_scrollHandler( ::openfl::events::Event event);
		::Dynamic textField_scrollHandler_dyn();

		void textFieldViewPort_focusInHandler( ::openfl::events::FocusEvent event);
		::Dynamic textFieldViewPort_focusInHandler_dyn();

};

} // end namespace feathers
} // end namespace controls
} // end namespace supportClasses

#endif /* INCLUDED_feathers_controls_supportClasses_TextFieldViewPort */ 
