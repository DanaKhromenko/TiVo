// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_CompaniesXmlParser
#include <CompaniesXmlParser.h>
#endif
#ifndef INCLUDED_Company
#include <Company.h>
#endif
#ifndef INCLUDED_CompanyBuilder
#include <CompanyBuilder.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_feathers_data_ArrayCollection
#include <feathers/data/ArrayCollection.h>
#endif
#ifndef INCLUDED_feathers_data_IFlatCollection
#include <feathers/data/IFlatCollection.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_xml_Parser
#include <haxe/xml/Parser.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_IExternalizable
#include <openfl/utils/IExternalizable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_01bb75cbb1bd2fe3_12_new,"CompaniesXmlParser","new",0x0937a24d,"CompaniesXmlParser.new","CompaniesXmlParser.hx",12,0x2df5e5c3)
HX_LOCAL_STACK_FRAME(_hx_pos_01bb75cbb1bd2fe3_15_getCompanies,"CompaniesXmlParser","getCompanies",0x229c77d8,"CompaniesXmlParser.getCompanies","CompaniesXmlParser.hx",15,0x2df5e5c3)
HX_LOCAL_STACK_FRAME(_hx_pos_01bb75cbb1bd2fe3_37_getStringValueByName,"CompaniesXmlParser","getStringValueByName",0x32a422bf,"CompaniesXmlParser.getStringValueByName","CompaniesXmlParser.hx",37,0x2df5e5c3)

void CompaniesXmlParser_obj::__construct(::String fileName){
            	HX_STACKFRAME(&_hx_pos_01bb75cbb1bd2fe3_12_new)
HXDLIN(  12)		this->fileName = fileName;
            	}

Dynamic CompaniesXmlParser_obj::__CreateEmpty() { return new CompaniesXmlParser_obj; }

void *CompaniesXmlParser_obj::_hx_vtable = 0;

Dynamic CompaniesXmlParser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CompaniesXmlParser_obj > _hx_result = new CompaniesXmlParser_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CompaniesXmlParser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x64f75a9b;
}

 ::feathers::data::ArrayCollection CompaniesXmlParser_obj::getCompanies(){
            	HX_GC_STACKFRAME(&_hx_pos_01bb75cbb1bd2fe3_15_getCompanies)
HXLINE(  16)		 ::feathers::data::ArrayCollection companies =  ::feathers::data::ArrayCollection_obj::__alloc( HX_CTX ,null());
HXLINE(  17)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  18)			::String fileContent = ::openfl::utils::Assets_obj::getText(this->fileName);
HXLINE(  19)			 ::Xml xmlData = ::haxe::xml::Parser_obj::parse(fileContent,null());
HXLINE(  21)			{
HXLINE(  21)				 ::Dynamic elements = xmlData->firstElement()->elementsNamed(HX_("company",3d,15,69,83));
HXDLIN(  21)				while(( (bool)(elements->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  21)					 ::Xml elements1 = ( ( ::Xml)(elements->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  22)					::String companyName = this->getStringValueByName(elements1,HX_("companyName",28,96,61,a9));
HXLINE(  23)					 ::CompanyBuilder companyBuilder =  ::CompanyBuilder_obj::__alloc( HX_CTX );
HXLINE(  25)					 ::CompanyBuilder _hx_tmp = companyBuilder->withCompanyName(companyName);
HXDLIN(  25)					 ::CompanyBuilder _hx_tmp1 = _hx_tmp->withDescription(this->getStringValueByName(elements1,HX_("description",fc,08,1d,5f)));
HXDLIN(  25)					 ::CompanyBuilder _hx_tmp2 = _hx_tmp1->withWebsite(this->getStringValueByName(elements1,HX_("website",1b,1a,1e,70)));
HXDLIN(  25)					companies->add(_hx_tmp2->withImgUri(this->getStringValueByName(elements1,HX_("imgUri",29,fb,7b,02)))->build());
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(  31)				{
HXLINE(  31)					null();
            				}
HXDLIN(  31)				 ::Dynamic e = _g;
HXLINE(  32)				{
HXLINE(  32)					 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN(  32)					::String _hx_tmp4 = ((HX_("Cannot parse XML-file ",a4,4e,d9,8c) + this->fileName) + HX_(": ",a6,32,00,00));
HXDLIN(  32)					::String _hx_tmp5 = (_hx_tmp4 + ::Std_obj::string(e));
HXDLIN(  32)					_hx_tmp3(_hx_tmp5,::hx::SourceInfo(HX_("Source/CompaniesXmlParser.hx",6f,86,a1,b9),32,HX_("CompaniesXmlParser",db,77,33,0d),HX_("getCompanies",65,6f,11,0f)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  34)		return companies;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CompaniesXmlParser_obj,getCompanies,return )

::String CompaniesXmlParser_obj::getStringValueByName( ::Xml elements,::String name){
            	HX_STACKFRAME(&_hx_pos_01bb75cbb1bd2fe3_37_getStringValueByName)
HXLINE(  38)		{
HXLINE(  38)			 ::Dynamic element = elements->elementsNamed(name);
HXDLIN(  38)			while(( (bool)(element->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  38)				 ::Xml element1 = ( ( ::Xml)(element->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  39)				bool _hx_tmp;
HXDLIN(  39)				if ((element1->nodeType != ::Xml_obj::Document)) {
HXLINE(  39)					_hx_tmp = (element1->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE(  39)					_hx_tmp = false;
            				}
HXDLIN(  39)				if (_hx_tmp) {
HXLINE(  39)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(element1->nodeType)));
            				}
HXDLIN(  39)				 ::Xml _this = element1->children->__get(0).StaticCast<  ::Xml >();
HXDLIN(  39)				bool _hx_tmp1;
HXDLIN(  39)				if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  39)					_hx_tmp1 = (_this->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE(  39)					_hx_tmp1 = true;
            				}
HXDLIN(  39)				if (_hx_tmp1) {
HXLINE(  39)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType)));
            				}
HXDLIN(  39)				return _this->nodeValue;
            			}
            		}
HXLINE(  41)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC2(CompaniesXmlParser_obj,getStringValueByName,return )


::hx::ObjectPtr< CompaniesXmlParser_obj > CompaniesXmlParser_obj::__new(::String fileName) {
	::hx::ObjectPtr< CompaniesXmlParser_obj > __this = new CompaniesXmlParser_obj();
	__this->__construct(fileName);
	return __this;
}

::hx::ObjectPtr< CompaniesXmlParser_obj > CompaniesXmlParser_obj::__alloc(::hx::Ctx *_hx_ctx,::String fileName) {
	CompaniesXmlParser_obj *__this = (CompaniesXmlParser_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CompaniesXmlParser_obj), true, "CompaniesXmlParser"));
	*(void **)__this = CompaniesXmlParser_obj::_hx_vtable;
	__this->__construct(fileName);
	return __this;
}

CompaniesXmlParser_obj::CompaniesXmlParser_obj()
{
}

void CompaniesXmlParser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CompaniesXmlParser);
	HX_MARK_MEMBER_NAME(fileName,"fileName");
	HX_MARK_END_CLASS();
}

void CompaniesXmlParser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fileName,"fileName");
}

::hx::Val CompaniesXmlParser_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fileName") ) { return ::hx::Val( fileName ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getCompanies") ) { return ::hx::Val( getCompanies_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getStringValueByName") ) { return ::hx::Val( getStringValueByName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CompaniesXmlParser_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fileName") ) { fileName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CompaniesXmlParser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("fileName",e7,5a,43,62));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CompaniesXmlParser_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(CompaniesXmlParser_obj,fileName),HX_("fileName",e7,5a,43,62)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CompaniesXmlParser_obj_sStaticStorageInfo = 0;
#endif

static ::String CompaniesXmlParser_obj_sMemberFields[] = {
	HX_("fileName",e7,5a,43,62),
	HX_("getCompanies",65,6f,11,0f),
	HX_("getStringValueByName",4c,ef,5e,ce),
	::String(null()) };

::hx::Class CompaniesXmlParser_obj::__mClass;

void CompaniesXmlParser_obj::__register()
{
	CompaniesXmlParser_obj _hx_dummy;
	CompaniesXmlParser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CompaniesXmlParser",db,77,33,0d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CompaniesXmlParser_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CompaniesXmlParser_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CompaniesXmlParser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CompaniesXmlParser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

