// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Company
#include <Company.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f00cd1643927de6c_42_new,"Company","new",0x7877308f,"Company.new","Company.hx",42,0xc4d855c1)

void Company_obj::__construct(::String companyName,::String description,::String website,::String imgUri){
            	HX_STACKFRAME(&_hx_pos_f00cd1643927de6c_42_new)
HXLINE(  43)		this->companyName = companyName;
HXLINE(  44)		this->description = description;
HXLINE(  45)		this->website = website;
HXLINE(  46)		this->imgUri = imgUri;
            	}

Dynamic Company_obj::__CreateEmpty() { return new Company_obj; }

void *Company_obj::_hx_vtable = 0;

Dynamic Company_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Company_obj > _hx_result = new Company_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Company_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x10d9e25d;
}


Company_obj::Company_obj()
{
}

void Company_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Company);
	HX_MARK_MEMBER_NAME(companyName,"companyName");
	HX_MARK_MEMBER_NAME(description,"description");
	HX_MARK_MEMBER_NAME(website,"website");
	HX_MARK_MEMBER_NAME(imgUri,"imgUri");
	HX_MARK_END_CLASS();
}

void Company_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(companyName,"companyName");
	HX_VISIT_MEMBER_NAME(description,"description");
	HX_VISIT_MEMBER_NAME(website,"website");
	HX_VISIT_MEMBER_NAME(imgUri,"imgUri");
}

::hx::Val Company_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"imgUri") ) { return ::hx::Val( imgUri ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"website") ) { return ::hx::Val( website ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"companyName") ) { return ::hx::Val( companyName ); }
		if (HX_FIELD_EQ(inName,"description") ) { return ::hx::Val( description ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Company_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"imgUri") ) { imgUri=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"website") ) { website=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"companyName") ) { companyName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"description") ) { description=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Company_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("companyName",28,96,61,a9));
	outFields->push(HX_("description",fc,08,1d,5f));
	outFields->push(HX_("website",1b,1a,1e,70));
	outFields->push(HX_("imgUri",29,fb,7b,02));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Company_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Company_obj,companyName),HX_("companyName",28,96,61,a9)},
	{::hx::fsString,(int)offsetof(Company_obj,description),HX_("description",fc,08,1d,5f)},
	{::hx::fsString,(int)offsetof(Company_obj,website),HX_("website",1b,1a,1e,70)},
	{::hx::fsString,(int)offsetof(Company_obj,imgUri),HX_("imgUri",29,fb,7b,02)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Company_obj_sStaticStorageInfo = 0;
#endif

static ::String Company_obj_sMemberFields[] = {
	HX_("companyName",28,96,61,a9),
	HX_("description",fc,08,1d,5f),
	HX_("website",1b,1a,1e,70),
	HX_("imgUri",29,fb,7b,02),
	::String(null()) };

::hx::Class Company_obj::__mClass;

void Company_obj::__register()
{
	Company_obj _hx_dummy;
	Company_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Company",1d,3d,ba,50);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Company_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Company_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Company_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Company_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

