// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Company
#include <Company.h>
#endif
#ifndef INCLUDED_CompanyLayoutGroup
#include <CompanyLayoutGroup.h>
#endif
#ifndef INCLUDED_feathers_controls_Label
#include <feathers/controls/Label.h>
#endif
#ifndef INCLUDED_feathers_controls_LayoutGroup
#include <feathers/controls/LayoutGroup.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusManagerAware
#include <feathers/core/IFocusManagerAware.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IHTMLTextControl
#include <feathers/core/IHTMLTextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStageFocusDelegate
#include <feathers/core/IStageFocusDelegate.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_text_TextFormat
#include <feathers/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_284ff6ac3c3c68cc_21_new,"CompanyLayoutGroup","new",0x7f1f7f0a,"CompanyLayoutGroup.new","CompanyView.hx",21,0x846155dc)
HX_LOCAL_STACK_FRAME(_hx_pos_284ff6ac3c3c68cc_49_printCompanyInfo,"CompanyLayoutGroup","printCompanyInfo",0x9812d034,"CompanyLayoutGroup.printCompanyInfo","CompanyView.hx",49,0x846155dc)
HX_LOCAL_STACK_FRAME(_hx_pos_284ff6ac3c3c68cc_66_addLabel,"CompanyLayoutGroup","addLabel",0xfbd51d29,"CompanyLayoutGroup.addLabel","CompanyView.hx",66,0x846155dc)
HX_LOCAL_STACK_FRAME(_hx_pos_284ff6ac3c3c68cc_22_boot,"CompanyLayoutGroup","boot",0xb488aa48,"CompanyLayoutGroup.boot","CompanyView.hx",22,0x846155dc)
HX_LOCAL_STACK_FRAME(_hx_pos_284ff6ac3c3c68cc_23_boot,"CompanyLayoutGroup","boot",0xb488aa48,"CompanyLayoutGroup.boot","CompanyView.hx",23,0x846155dc)
HX_LOCAL_STACK_FRAME(_hx_pos_284ff6ac3c3c68cc_24_boot,"CompanyLayoutGroup","boot",0xb488aa48,"CompanyLayoutGroup.boot","CompanyView.hx",24,0x846155dc)
HX_LOCAL_STACK_FRAME(_hx_pos_284ff6ac3c3c68cc_25_boot,"CompanyLayoutGroup","boot",0xb488aa48,"CompanyLayoutGroup.boot","CompanyView.hx",25,0x846155dc)
HX_LOCAL_STACK_FRAME(_hx_pos_284ff6ac3c3c68cc_27_boot,"CompanyLayoutGroup","boot",0xb488aa48,"CompanyLayoutGroup.boot","CompanyView.hx",27,0x846155dc)
HX_LOCAL_STACK_FRAME(_hx_pos_284ff6ac3c3c68cc_28_boot,"CompanyLayoutGroup","boot",0xb488aa48,"CompanyLayoutGroup.boot","CompanyView.hx",28,0x846155dc)

void CompanyLayoutGroup_obj::__construct( ::Company company, ::feathers::controls::LayoutGroup tabsContainer){
            	HX_GC_STACKFRAME(&_hx_pos_284ff6ac3c3c68cc_21_new)
HXLINE(  35)		this->labelWidth = 160;
HXLINE(  34)		this->labelHeight = 40;
HXLINE(  33)		this->labelY = 40;
HXLINE(  38)		super::__construct();
HXLINE(  40)		 ::feathers::controls::LayoutGroup container =  ::feathers::controls::LayoutGroup_obj::__alloc( HX_CTX );
HXLINE(  41)		tabsContainer->addChild(container);
HXLINE(  42)		this->container = container;
HXLINE(  44)		this->company = company;
HXLINE(  46)		this->printCompanyInfo();
            	}

Dynamic CompanyLayoutGroup_obj::__CreateEmpty() { return new CompanyLayoutGroup_obj; }

void *CompanyLayoutGroup_obj::_hx_vtable = 0;

Dynamic CompanyLayoutGroup_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CompanyLayoutGroup_obj > _hx_result = new CompanyLayoutGroup_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CompanyLayoutGroup_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x11a722e7 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x531cdf3c) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x4033f4be || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x531cdf3c;
			}
		} else {
			return inClassId==(int)0x58123034 || inClassId==(int)0x6b353933;
		}
	}
}

void CompanyLayoutGroup_obj::printCompanyInfo(){
            	HX_GC_STACKFRAME(&_hx_pos_284ff6ac3c3c68cc_49_printCompanyInfo)
HXLINE(  50)		this->addLabel(HX_("Company name",2e,1c,34,e0),this->company->companyName,null());
HXLINE(  51)		this->addLabel(HX_("Description",dc,a0,4f,43),this->company->description,null());
HXLINE(  52)		this->addLabel(HX_("Website",fb,41,6f,3d),this->company->website,true);
HXLINE(  54)		 ::openfl::display::BitmapData bitmapData = ::openfl::utils::Assets_obj::getBitmapData((HX_("assets/img/companies/",0c,32,6a,ef) + this->company->imgUri),null());
HXLINE(  55)		Float scaleFactor = (( (Float)(200) ) / ( (Float)(bitmapData->height) ));
HXLINE(  56)		 ::openfl::display::Bitmap bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,bitmapData,null(),null());
HXLINE(  57)		bitmap->set_x(( (Float)(10) ));
HXLINE(  58)		bitmap->set_y(( (Float)(this->labelY) ));
HXLINE(  59)		bitmap->set_scaleX(scaleFactor);
HXLINE(  60)		bitmap->set_scaleY(scaleFactor);
HXLINE(  61)		this->container->addChild(bitmap);
HXLINE(  63)		 ::CompanyLayoutGroup _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  63)		int _hx_tmp1 = _hx_tmp->labelY;
HXDLIN(  63)		_hx_tmp->labelY = (_hx_tmp1 + ::Math_obj::round(bitmap->get_height()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CompanyLayoutGroup_obj,printCompanyInfo,(void))

void CompanyLayoutGroup_obj::addLabel(::String key,::String value,::hx::Null< bool >  __o_isUri){
            		bool isUri = __o_isUri.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_284ff6ac3c3c68cc_66_addLabel)
HXLINE(  67)		 ::feathers::controls::Label labelKey =  ::feathers::controls::Label_obj::__alloc( HX_CTX ,null());
HXLINE(  68)		labelKey->set_text((key + HX_(": ",a6,32,00,00)));
HXLINE(  69)		labelKey->set_textFormat(::CompanyLayoutGroup_obj::keyTextFormat);
HXLINE(  70)		labelKey->set_x(( (Float)(10) ));
HXLINE(  71)		labelKey->set_y(( (Float)(this->labelY) ));
HXLINE(  72)		labelKey->set_height(( (Float)(this->labelHeight) ));
HXLINE(  73)		labelKey->set_width(( (Float)(this->labelWidth) ));
HXLINE(  74)		this->container->addChild(labelKey);
HXLINE(  76)		 ::feathers::controls::Label labelValue =  ::feathers::controls::Label_obj::__alloc( HX_CTX ,null());
HXLINE(  77)		labelValue->set_text(value);
HXLINE(  78)		if (isUri) {
HXLINE(  79)			labelValue->set_textFormat( ::feathers::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Helvetica",f1,95,6c,12),18,5253881,true,false,true,value,null(),null(),null(),null(),null(),null()));
            		}
            		else {
HXLINE(  81)			labelValue->set_textFormat(::CompanyLayoutGroup_obj::valueTextFormat);
            		}
HXLINE(  83)		labelValue->set_x(( (Float)((10 + this->labelWidth)) ));
HXLINE(  84)		labelValue->set_y(( (Float)(this->labelY) ));
HXLINE(  85)		labelValue->set_height(( (Float)(this->labelHeight) ));
HXLINE(  87)		this->container->addChild(labelValue);
HXLINE(  89)		 ::CompanyLayoutGroup _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  89)		_hx_tmp->labelY = (_hx_tmp->labelY + this->labelHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC3(CompanyLayoutGroup_obj,addLabel,(void))

::String CompanyLayoutGroup_obj::IMG_DIR_PATH;

int CompanyLayoutGroup_obj::LOGO_HEIGHT;

int CompanyLayoutGroup_obj::GAP_BETWEEN_FIELDS;

int CompanyLayoutGroup_obj::LEFT_PADDING;

 ::feathers::text::TextFormat CompanyLayoutGroup_obj::keyTextFormat;

 ::feathers::text::TextFormat CompanyLayoutGroup_obj::valueTextFormat;


::hx::ObjectPtr< CompanyLayoutGroup_obj > CompanyLayoutGroup_obj::__new( ::Company company, ::feathers::controls::LayoutGroup tabsContainer) {
	::hx::ObjectPtr< CompanyLayoutGroup_obj > __this = new CompanyLayoutGroup_obj();
	__this->__construct(company,tabsContainer);
	return __this;
}

::hx::ObjectPtr< CompanyLayoutGroup_obj > CompanyLayoutGroup_obj::__alloc(::hx::Ctx *_hx_ctx, ::Company company, ::feathers::controls::LayoutGroup tabsContainer) {
	CompanyLayoutGroup_obj *__this = (CompanyLayoutGroup_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CompanyLayoutGroup_obj), true, "CompanyLayoutGroup"));
	*(void **)__this = CompanyLayoutGroup_obj::_hx_vtable;
	__this->__construct(company,tabsContainer);
	return __this;
}

CompanyLayoutGroup_obj::CompanyLayoutGroup_obj()
{
}

void CompanyLayoutGroup_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CompanyLayoutGroup);
	HX_MARK_MEMBER_NAME(container,"container");
	HX_MARK_MEMBER_NAME(company,"company");
	HX_MARK_MEMBER_NAME(labelY,"labelY");
	HX_MARK_MEMBER_NAME(labelHeight,"labelHeight");
	HX_MARK_MEMBER_NAME(labelWidth,"labelWidth");
	 ::feathers::controls::LayoutGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CompanyLayoutGroup_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(container,"container");
	HX_VISIT_MEMBER_NAME(company,"company");
	HX_VISIT_MEMBER_NAME(labelY,"labelY");
	HX_VISIT_MEMBER_NAME(labelHeight,"labelHeight");
	HX_VISIT_MEMBER_NAME(labelWidth,"labelWidth");
	 ::feathers::controls::LayoutGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CompanyLayoutGroup_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"labelY") ) { return ::hx::Val( labelY ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"company") ) { return ::hx::Val( company ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addLabel") ) { return ::hx::Val( addLabel_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"container") ) { return ::hx::Val( container ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"labelWidth") ) { return ::hx::Val( labelWidth ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"labelHeight") ) { return ::hx::Val( labelHeight ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"printCompanyInfo") ) { return ::hx::Val( printCompanyInfo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CompanyLayoutGroup_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"keyTextFormat") ) { outValue = ( keyTextFormat ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"valueTextFormat") ) { outValue = ( valueTextFormat ); return true; }
	}
	return false;
}

::hx::Val CompanyLayoutGroup_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"labelY") ) { labelY=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"company") ) { company=inValue.Cast<  ::Company >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"container") ) { container=inValue.Cast<  ::feathers::controls::LayoutGroup >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"labelWidth") ) { labelWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"labelHeight") ) { labelHeight=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CompanyLayoutGroup_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"keyTextFormat") ) { keyTextFormat=ioValue.Cast<  ::feathers::text::TextFormat >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"valueTextFormat") ) { valueTextFormat=ioValue.Cast<  ::feathers::text::TextFormat >(); return true; }
	}
	return false;
}

void CompanyLayoutGroup_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("container",41,75,73,bf));
	outFields->push(HX_("company",3d,15,69,83));
	outFields->push(HX_("labelY",e5,27,7d,49));
	outFields->push(HX_("labelHeight",fb,78,4c,4d));
	outFields->push(HX_("labelWidth",72,03,46,e6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CompanyLayoutGroup_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::feathers::controls::LayoutGroup */ ,(int)offsetof(CompanyLayoutGroup_obj,container),HX_("container",41,75,73,bf)},
	{::hx::fsObject /*  ::Company */ ,(int)offsetof(CompanyLayoutGroup_obj,company),HX_("company",3d,15,69,83)},
	{::hx::fsInt,(int)offsetof(CompanyLayoutGroup_obj,labelY),HX_("labelY",e5,27,7d,49)},
	{::hx::fsInt,(int)offsetof(CompanyLayoutGroup_obj,labelHeight),HX_("labelHeight",fb,78,4c,4d)},
	{::hx::fsInt,(int)offsetof(CompanyLayoutGroup_obj,labelWidth),HX_("labelWidth",72,03,46,e6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CompanyLayoutGroup_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &CompanyLayoutGroup_obj::IMG_DIR_PATH,HX_("IMG_DIR_PATH",53,48,26,dd)},
	{::hx::fsInt,(void *) &CompanyLayoutGroup_obj::LOGO_HEIGHT,HX_("LOGO_HEIGHT",7b,f1,cd,e3)},
	{::hx::fsInt,(void *) &CompanyLayoutGroup_obj::GAP_BETWEEN_FIELDS,HX_("GAP_BETWEEN_FIELDS",d9,1f,0f,fc)},
	{::hx::fsInt,(void *) &CompanyLayoutGroup_obj::LEFT_PADDING,HX_("LEFT_PADDING",39,36,64,96)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(void *) &CompanyLayoutGroup_obj::keyTextFormat,HX_("keyTextFormat",43,7a,4b,2c)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(void *) &CompanyLayoutGroup_obj::valueTextFormat,HX_("valueTextFormat",95,aa,4a,ec)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CompanyLayoutGroup_obj_sMemberFields[] = {
	HX_("container",41,75,73,bf),
	HX_("company",3d,15,69,83),
	HX_("labelY",e5,27,7d,49),
	HX_("labelHeight",fb,78,4c,4d),
	HX_("labelWidth",72,03,46,e6),
	HX_("printCompanyInfo",1e,e1,f9,a3),
	HX_("addLabel",13,34,0c,e9),
	::String(null()) };

static void CompanyLayoutGroup_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CompanyLayoutGroup_obj::IMG_DIR_PATH,"IMG_DIR_PATH");
	HX_MARK_MEMBER_NAME(CompanyLayoutGroup_obj::LOGO_HEIGHT,"LOGO_HEIGHT");
	HX_MARK_MEMBER_NAME(CompanyLayoutGroup_obj::GAP_BETWEEN_FIELDS,"GAP_BETWEEN_FIELDS");
	HX_MARK_MEMBER_NAME(CompanyLayoutGroup_obj::LEFT_PADDING,"LEFT_PADDING");
	HX_MARK_MEMBER_NAME(CompanyLayoutGroup_obj::keyTextFormat,"keyTextFormat");
	HX_MARK_MEMBER_NAME(CompanyLayoutGroup_obj::valueTextFormat,"valueTextFormat");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CompanyLayoutGroup_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CompanyLayoutGroup_obj::IMG_DIR_PATH,"IMG_DIR_PATH");
	HX_VISIT_MEMBER_NAME(CompanyLayoutGroup_obj::LOGO_HEIGHT,"LOGO_HEIGHT");
	HX_VISIT_MEMBER_NAME(CompanyLayoutGroup_obj::GAP_BETWEEN_FIELDS,"GAP_BETWEEN_FIELDS");
	HX_VISIT_MEMBER_NAME(CompanyLayoutGroup_obj::LEFT_PADDING,"LEFT_PADDING");
	HX_VISIT_MEMBER_NAME(CompanyLayoutGroup_obj::keyTextFormat,"keyTextFormat");
	HX_VISIT_MEMBER_NAME(CompanyLayoutGroup_obj::valueTextFormat,"valueTextFormat");
};

#endif

::hx::Class CompanyLayoutGroup_obj::__mClass;

static ::String CompanyLayoutGroup_obj_sStaticFields[] = {
	HX_("IMG_DIR_PATH",53,48,26,dd),
	HX_("LOGO_HEIGHT",7b,f1,cd,e3),
	HX_("GAP_BETWEEN_FIELDS",d9,1f,0f,fc),
	HX_("LEFT_PADDING",39,36,64,96),
	HX_("keyTextFormat",43,7a,4b,2c),
	HX_("valueTextFormat",95,aa,4a,ec),
	::String(null())
};

void CompanyLayoutGroup_obj::__register()
{
	CompanyLayoutGroup_obj _hx_dummy;
	CompanyLayoutGroup_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CompanyLayoutGroup",18,f2,64,94);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CompanyLayoutGroup_obj::__GetStatic;
	__mClass->mSetStaticField = &CompanyLayoutGroup_obj::__SetStatic;
	__mClass->mMarkFunc = CompanyLayoutGroup_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CompanyLayoutGroup_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CompanyLayoutGroup_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CompanyLayoutGroup_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CompanyLayoutGroup_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CompanyLayoutGroup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CompanyLayoutGroup_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CompanyLayoutGroup_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_284ff6ac3c3c68cc_22_boot)
HXDLIN(  22)		IMG_DIR_PATH = HX_("assets/img/companies/",0c,32,6a,ef);
            	}
{
            	HX_STACKFRAME(&_hx_pos_284ff6ac3c3c68cc_23_boot)
HXDLIN(  23)		LOGO_HEIGHT = 200;
            	}
{
            	HX_STACKFRAME(&_hx_pos_284ff6ac3c3c68cc_24_boot)
HXDLIN(  24)		GAP_BETWEEN_FIELDS = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_284ff6ac3c3c68cc_25_boot)
HXDLIN(  25)		LEFT_PADDING = 10;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_284ff6ac3c3c68cc_27_boot)
HXDLIN(  27)		keyTextFormat =  ::feathers::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Helvetica",f1,95,6c,12),18,12895686,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_284ff6ac3c3c68cc_28_boot)
HXDLIN(  28)		valueTextFormat =  ::feathers::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Helvetica",f1,95,6c,12),18,16579836,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            	}
}

