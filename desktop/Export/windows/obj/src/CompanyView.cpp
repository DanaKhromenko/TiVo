// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Company
#include <Company.h>
#endif
#ifndef INCLUDED_CompanyLayoutGroup
#include <CompanyLayoutGroup.h>
#endif
#ifndef INCLUDED_CompanyView
#include <CompanyView.h>
#endif
#ifndef INCLUDED_TabDto
#include <TabDto.h>
#endif
#ifndef INCLUDED_feathers_controls_LayoutGroup
#include <feathers/controls/LayoutGroup.h>
#endif
#ifndef INCLUDED_feathers_controls_navigators_TabItem
#include <feathers/controls/navigators/TabItem.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a00728b52a81cf8c_14_getCompanyTabDto,"CompanyView","getCompanyTabDto",0x9d5e0dfd,"CompanyView.getCompanyTabDto","CompanyView.hx",14,0x846155dc)

void CompanyView_obj::__construct() { }

Dynamic CompanyView_obj::__CreateEmpty() { return new CompanyView_obj; }

void *CompanyView_obj::_hx_vtable = 0;

Dynamic CompanyView_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CompanyView_obj > _hx_result = new CompanyView_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CompanyView_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x45df3362;
}

 ::TabDto CompanyView_obj::getCompanyTabDto( ::Company company, ::feathers::controls::LayoutGroup container){
            	HX_GC_STACKFRAME(&_hx_pos_a00728b52a81cf8c_14_getCompanyTabDto)
HXLINE(  15)		 ::CompanyLayoutGroup companyLayoutGroup =  ::CompanyLayoutGroup_obj::__alloc( HX_CTX ,company,container);
HXLINE(  16)		 ::feathers::controls::navigators::TabItem companyTab = ::feathers::controls::navigators::TabItem_obj::withDisplayObject(company->companyName,companyLayoutGroup);
HXLINE(  17)		return  ::TabDto_obj::__alloc( HX_CTX ,companyTab,companyLayoutGroup->container);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CompanyView_obj,getCompanyTabDto,return )


CompanyView_obj::CompanyView_obj()
{
}

bool CompanyView_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"getCompanyTabDto") ) { outValue = getCompanyTabDto_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CompanyView_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CompanyView_obj_sStaticStorageInfo = 0;
#endif

::hx::Class CompanyView_obj::__mClass;

static ::String CompanyView_obj_sStaticFields[] = {
	HX_("getCompanyTabDto",31,46,78,be),
	::String(null())
};

void CompanyView_obj::__register()
{
	CompanyView_obj _hx_dummy;
	CompanyView_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CompanyView",22,ee,e3,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CompanyView_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CompanyView_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< CompanyView_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CompanyView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CompanyView_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

