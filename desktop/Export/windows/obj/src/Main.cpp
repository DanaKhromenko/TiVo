// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_CompaniesXmlParser
#include <CompaniesXmlParser.h>
#endif
#ifndef INCLUDED_Company
#include <Company.h>
#endif
#ifndef INCLUDED_CompanyView
#include <CompanyView.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TVShow
#include <TVShow.h>
#endif
#ifndef INCLUDED_TVShowsTxtParser
#include <TVShowsTxtParser.h>
#endif
#ifndef INCLUDED_TVShowsView
#include <TVShowsView.h>
#endif
#ifndef INCLUDED_TVShowsXmlParser
#include <TVShowsXmlParser.h>
#endif
#ifndef INCLUDED_TabDto
#include <TabDto.h>
#endif
#ifndef INCLUDED_feathers_controls_LayoutGroup
#include <feathers/controls/LayoutGroup.h>
#endif
#ifndef INCLUDED_feathers_controls_ScrollContainer
#include <feathers/controls/ScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_controls_navigators_BaseNavigator
#include <feathers/controls/navigators/BaseNavigator.h>
#endif
#ifndef INCLUDED_feathers_controls_navigators_TabItem
#include <feathers/controls/navigators/TabItem.h>
#endif
#ifndef INCLUDED_feathers_controls_navigators_TabNavigator
#include <feathers/controls/navigators/TabNavigator.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_BaseScrollContainer
#include <feathers/controls/supportClasses/BaseScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDataSelector
#include <feathers/core/IDataSelector.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusContainer
#include <feathers/core/IFocusContainer.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusManagerAware
#include <feathers/core/IFocusManagerAware.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IIndexSelector
#include <feathers/core/IIndexSelector.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_data_ArrayCollection
#include <feathers/data/ArrayCollection.h>
#endif
#ifndef INCLUDED_feathers_data_IFlatCollection
#include <feathers/data/IFlatCollection.h>
#endif
#ifndef INCLUDED_feathers_layout_AutoSizeMode
#include <feathers/layout/AutoSizeMode.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_IExternalizable
#include <openfl/utils/IExternalizable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_21_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",21,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_59_getAllTabs,"Main","getAllTabs",0x3e2c7e3e,"Main.getAllTabs","Main.hx",59,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_96_tabNavigatorChangeHandler,"Main","tabNavigatorChangeHandler",0xf12908c3,"Main.tabNavigatorChangeHandler","Main.hx",96,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_22_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",22,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_23_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",23,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_24_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",24,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_26_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",26,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_27_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",27,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_28_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",28,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_29_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",29,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_30_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",30,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_31_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",31,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_32_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",32,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_33_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",33,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_34_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",34,0x087e5c05)

void Main_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_21_new)
HXLINE(  38)		this->tabsContainers =  ::feathers::data::ArrayCollection_obj::__alloc( HX_CTX ,null());
HXLINE(  41)		super::__construct();
HXLINE(  43)		 ::feathers::controls::ScrollContainer scrollContainer =  ::feathers::controls::ScrollContainer_obj::__alloc( HX_CTX );
HXLINE(  44)		scrollContainer->set_autoSizeMode(::feathers::layout::AutoSizeMode_obj::STAGE_dyn());
HXLINE(  45)		this->addChild(scrollContainer);
HXLINE(  47)		this->rootContainer =  ::feathers::controls::LayoutGroup_obj::__alloc( HX_CTX );
HXLINE(  49)		 ::openfl::display::BitmapData bitmapData = ::openfl::utils::Assets_obj::getBitmapData(HX_("assets/img/wallpapers.jpg",fc,3a,1d,fc),null());
HXLINE(  50)		 ::feathers::controls::LayoutGroup _hx_tmp = this->rootContainer;
HXDLIN(  50)		_hx_tmp->set_backgroundSkin( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,bitmapData,null(),null()));
HXLINE(  51)		scrollContainer->addChild(this->rootContainer);
HXLINE(  53)		this->navigator =  ::feathers::controls::navigators::TabNavigator_obj::__alloc( HX_CTX ,null());
HXLINE(  54)		 ::feathers::controls::navigators::TabNavigator _hx_tmp1 = this->navigator;
HXDLIN(  54)		_hx_tmp1->set_dataProvider(this->getAllTabs());
HXLINE(  55)		this->navigator->addEventListener(HX_("change",70,91,72,b7),this->tabNavigatorChangeHandler_dyn(),null(),null(),null());
HXLINE(  56)		this->rootContainer->addChild(this->navigator);
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x07825a7d) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x07825a7d;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::feathers::data::ArrayCollection Main_obj::getAllTabs(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_59_getAllTabs)
HXLINE(  60)		 ::feathers::data::ArrayCollection tabs =  ::feathers::data::ArrayCollection_obj::__alloc( HX_CTX ,null());
HXLINE(  63)		 ::feathers::data::ArrayCollection tvShows =  ::feathers::data::ArrayCollection_obj::__alloc( HX_CTX ,null());
HXLINE(  65)		 ::TVShowsXmlParser tvShowsXmlParser =  ::TVShowsXmlParser_obj::__alloc( HX_CTX ,HX_("assets/shows/shows.xml",ba,67,39,de));
HXLINE(  66)		tvShows->addAll(tvShowsXmlParser->getTVShows());
HXLINE(  68)		 ::TVShowsTxtParser tvShowsTxtParser =  ::TVShowsTxtParser_obj::__alloc( HX_CTX ,HX_("assets/shows/shows.txt",53,68,36,de));
HXLINE(  69)		tvShows->addAll(tvShowsTxtParser->getTVShows());
HXLINE(  72)		 ::TabDto tabDto = ::TVShowsView_obj::getTVShowsTabDto(tvShows,this->rootContainer,4,370,60,10,450,1900,400,10,40);
HXLINE(  76)		tabs->add(tabDto->tabItem);
HXLINE(  77)		this->tabsContainers->add(tabDto->container);
HXLINE(  80)		 ::CompaniesXmlParser companiesXmlParser =  ::CompaniesXmlParser_obj::__alloc( HX_CTX ,HX_("assets/companies/companies.xml",84,04,e6,f0));
HXLINE(  81)		 ::feathers::data::ArrayCollection companies = companiesXmlParser->getCompanies();
HXLINE(  83)		{
HXLINE(  83)			int _g = 0;
HXDLIN(  83)			int _g1 = companies->get_length();
HXDLIN(  83)			while((_g < _g1)){
HXLINE(  83)				_g = (_g + 1);
HXDLIN(  83)				int i = (_g - 1);
HXLINE(  85)				 ::Company company = companies->get(i).StaticCast<  ::Company >();
HXLINE(  86)				 ::TabDto tabDto1 = ::CompanyView_obj::getCompanyTabDto(company,this->rootContainer);
HXLINE(  89)				tabs->add(tabDto1->tabItem);
HXLINE(  90)				this->tabsContainers->add(tabDto1->container);
            			}
            		}
HXLINE(  93)		return tabs;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,getAllTabs,return )

void Main_obj::tabNavigatorChangeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_96_tabNavigatorChangeHandler)
HXLINE(  97)		int activeTabId = ( (int)(::Std_obj::parseInt(this->navigator->get_activeItemID())) );
HXLINE(  99)		{
HXLINE(  99)			int _g = 0;
HXDLIN(  99)			int _g1 = this->tabsContainers->get_length();
HXDLIN(  99)			while((_g < _g1)){
HXLINE(  99)				_g = (_g + 1);
HXDLIN(  99)				int i = (_g - 1);
HXLINE( 100)				 ::feathers::controls::LayoutGroup tabContainer = this->tabsContainers->get(i).StaticCast<  ::feathers::controls::LayoutGroup >();
HXLINE( 101)				tabContainer->set_visible((i == activeTabId));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,tabNavigatorChangeHandler,(void))

::String Main_obj::XML_COMPANIES_FILE_PATH;

::String Main_obj::TXT_TV_SHOWS_FILE_PATH;

::String Main_obj::XML_TV_SHOWS_FILE_PATH;

int Main_obj::TV_SHOW_CELLS_IN_ROW;

int Main_obj::TV_SHOW_CELL_WIDTH;

int Main_obj::TV_SHOW_CELL_HEIGHT;

int Main_obj::TV_SHOW_CELLS_START_X;

int Main_obj::TV_SHOW_CELLS_START_Y;

int Main_obj::TV_SHOW_PREVIEW_WIDTH;

int Main_obj::TV_SHOW_PREVIEW_HEIGHT;

int Main_obj::TV_SHOW_PREVIEW_START_X;

int Main_obj::TV_SHOW_PREVIEW_START_Y;


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

void Main_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Main);
	HX_MARK_MEMBER_NAME(rootContainer,"rootContainer");
	HX_MARK_MEMBER_NAME(navigator,"navigator");
	HX_MARK_MEMBER_NAME(tabsContainers,"tabsContainers");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Main_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rootContainer,"rootContainer");
	HX_VISIT_MEMBER_NAME(navigator,"navigator");
	HX_VISIT_MEMBER_NAME(tabsContainers,"tabsContainers");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Main_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"navigator") ) { return ::hx::Val( navigator ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getAllTabs") ) { return ::hx::Val( getAllTabs_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rootContainer") ) { return ::hx::Val( rootContainer ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tabsContainers") ) { return ::hx::Val( tabsContainers ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"tabNavigatorChangeHandler") ) { return ::hx::Val( tabNavigatorChangeHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Main_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"navigator") ) { navigator=inValue.Cast<  ::feathers::controls::navigators::TabNavigator >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rootContainer") ) { rootContainer=inValue.Cast<  ::feathers::controls::LayoutGroup >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tabsContainers") ) { tabsContainers=inValue.Cast<  ::feathers::data::ArrayCollection >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Main_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("rootContainer",bf,92,2d,f5));
	outFields->push(HX_("navigator",d7,d4,f1,04));
	outFields->push(HX_("tabsContainers",30,a2,ef,6f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Main_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::feathers::controls::LayoutGroup */ ,(int)offsetof(Main_obj,rootContainer),HX_("rootContainer",bf,92,2d,f5)},
	{::hx::fsObject /*  ::feathers::controls::navigators::TabNavigator */ ,(int)offsetof(Main_obj,navigator),HX_("navigator",d7,d4,f1,04)},
	{::hx::fsObject /*  ::feathers::data::ArrayCollection */ ,(int)offsetof(Main_obj,tabsContainers),HX_("tabsContainers",30,a2,ef,6f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Main_obj::XML_COMPANIES_FILE_PATH,HX_("XML_COMPANIES_FILE_PATH",fc,ad,59,b6)},
	{::hx::fsString,(void *) &Main_obj::TXT_TV_SHOWS_FILE_PATH,HX_("TXT_TV_SHOWS_FILE_PATH",51,09,1f,cc)},
	{::hx::fsString,(void *) &Main_obj::XML_TV_SHOWS_FILE_PATH,HX_("XML_TV_SHOWS_FILE_PATH",4a,a6,d5,87)},
	{::hx::fsInt,(void *) &Main_obj::TV_SHOW_CELLS_IN_ROW,HX_("TV_SHOW_CELLS_IN_ROW",33,19,13,97)},
	{::hx::fsInt,(void *) &Main_obj::TV_SHOW_CELL_WIDTH,HX_("TV_SHOW_CELL_WIDTH",8e,3b,05,77)},
	{::hx::fsInt,(void *) &Main_obj::TV_SHOW_CELL_HEIGHT,HX_("TV_SHOW_CELL_HEIGHT",3f,59,de,63)},
	{::hx::fsInt,(void *) &Main_obj::TV_SHOW_CELLS_START_X,HX_("TV_SHOW_CELLS_START_X",a8,2c,9c,59)},
	{::hx::fsInt,(void *) &Main_obj::TV_SHOW_CELLS_START_Y,HX_("TV_SHOW_CELLS_START_Y",a9,2c,9c,59)},
	{::hx::fsInt,(void *) &Main_obj::TV_SHOW_PREVIEW_WIDTH,HX_("TV_SHOW_PREVIEW_WIDTH",ea,a8,75,dc)},
	{::hx::fsInt,(void *) &Main_obj::TV_SHOW_PREVIEW_HEIGHT,HX_("TV_SHOW_PREVIEW_HEIGHT",63,9c,cd,c0)},
	{::hx::fsInt,(void *) &Main_obj::TV_SHOW_PREVIEW_START_X,HX_("TV_SHOW_PREVIEW_START_X",df,97,fb,27)},
	{::hx::fsInt,(void *) &Main_obj::TV_SHOW_PREVIEW_START_Y,HX_("TV_SHOW_PREVIEW_START_Y",e0,97,fb,27)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_("rootContainer",bf,92,2d,f5),
	HX_("navigator",d7,d4,f1,04),
	HX_("tabsContainers",30,a2,ef,6f),
	HX_("getAllTabs",49,00,a5,a6),
	HX_("tabNavigatorChangeHandler",18,8b,a4,d3),
	::String(null()) };

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::XML_COMPANIES_FILE_PATH,"XML_COMPANIES_FILE_PATH");
	HX_MARK_MEMBER_NAME(Main_obj::TXT_TV_SHOWS_FILE_PATH,"TXT_TV_SHOWS_FILE_PATH");
	HX_MARK_MEMBER_NAME(Main_obj::XML_TV_SHOWS_FILE_PATH,"XML_TV_SHOWS_FILE_PATH");
	HX_MARK_MEMBER_NAME(Main_obj::TV_SHOW_CELLS_IN_ROW,"TV_SHOW_CELLS_IN_ROW");
	HX_MARK_MEMBER_NAME(Main_obj::TV_SHOW_CELL_WIDTH,"TV_SHOW_CELL_WIDTH");
	HX_MARK_MEMBER_NAME(Main_obj::TV_SHOW_CELL_HEIGHT,"TV_SHOW_CELL_HEIGHT");
	HX_MARK_MEMBER_NAME(Main_obj::TV_SHOW_CELLS_START_X,"TV_SHOW_CELLS_START_X");
	HX_MARK_MEMBER_NAME(Main_obj::TV_SHOW_CELLS_START_Y,"TV_SHOW_CELLS_START_Y");
	HX_MARK_MEMBER_NAME(Main_obj::TV_SHOW_PREVIEW_WIDTH,"TV_SHOW_PREVIEW_WIDTH");
	HX_MARK_MEMBER_NAME(Main_obj::TV_SHOW_PREVIEW_HEIGHT,"TV_SHOW_PREVIEW_HEIGHT");
	HX_MARK_MEMBER_NAME(Main_obj::TV_SHOW_PREVIEW_START_X,"TV_SHOW_PREVIEW_START_X");
	HX_MARK_MEMBER_NAME(Main_obj::TV_SHOW_PREVIEW_START_Y,"TV_SHOW_PREVIEW_START_Y");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::XML_COMPANIES_FILE_PATH,"XML_COMPANIES_FILE_PATH");
	HX_VISIT_MEMBER_NAME(Main_obj::TXT_TV_SHOWS_FILE_PATH,"TXT_TV_SHOWS_FILE_PATH");
	HX_VISIT_MEMBER_NAME(Main_obj::XML_TV_SHOWS_FILE_PATH,"XML_TV_SHOWS_FILE_PATH");
	HX_VISIT_MEMBER_NAME(Main_obj::TV_SHOW_CELLS_IN_ROW,"TV_SHOW_CELLS_IN_ROW");
	HX_VISIT_MEMBER_NAME(Main_obj::TV_SHOW_CELL_WIDTH,"TV_SHOW_CELL_WIDTH");
	HX_VISIT_MEMBER_NAME(Main_obj::TV_SHOW_CELL_HEIGHT,"TV_SHOW_CELL_HEIGHT");
	HX_VISIT_MEMBER_NAME(Main_obj::TV_SHOW_CELLS_START_X,"TV_SHOW_CELLS_START_X");
	HX_VISIT_MEMBER_NAME(Main_obj::TV_SHOW_CELLS_START_Y,"TV_SHOW_CELLS_START_Y");
	HX_VISIT_MEMBER_NAME(Main_obj::TV_SHOW_PREVIEW_WIDTH,"TV_SHOW_PREVIEW_WIDTH");
	HX_VISIT_MEMBER_NAME(Main_obj::TV_SHOW_PREVIEW_HEIGHT,"TV_SHOW_PREVIEW_HEIGHT");
	HX_VISIT_MEMBER_NAME(Main_obj::TV_SHOW_PREVIEW_START_X,"TV_SHOW_PREVIEW_START_X");
	HX_VISIT_MEMBER_NAME(Main_obj::TV_SHOW_PREVIEW_START_Y,"TV_SHOW_PREVIEW_START_Y");
};

#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("XML_COMPANIES_FILE_PATH",fc,ad,59,b6),
	HX_("TXT_TV_SHOWS_FILE_PATH",51,09,1f,cc),
	HX_("XML_TV_SHOWS_FILE_PATH",4a,a6,d5,87),
	HX_("TV_SHOW_CELLS_IN_ROW",33,19,13,97),
	HX_("TV_SHOW_CELL_WIDTH",8e,3b,05,77),
	HX_("TV_SHOW_CELL_HEIGHT",3f,59,de,63),
	HX_("TV_SHOW_CELLS_START_X",a8,2c,9c,59),
	HX_("TV_SHOW_CELLS_START_Y",a9,2c,9c,59),
	HX_("TV_SHOW_PREVIEW_WIDTH",ea,a8,75,dc),
	HX_("TV_SHOW_PREVIEW_HEIGHT",63,9c,cd,c0),
	HX_("TV_SHOW_PREVIEW_START_X",df,97,fb,27),
	HX_("TV_SHOW_PREVIEW_START_Y",e0,97,fb,27),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Main_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_22_boot)
HXDLIN(  22)		XML_COMPANIES_FILE_PATH = HX_("assets/companies/companies.xml",84,04,e6,f0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_23_boot)
HXDLIN(  23)		TXT_TV_SHOWS_FILE_PATH = HX_("assets/shows/shows.txt",53,68,36,de);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_24_boot)
HXDLIN(  24)		XML_TV_SHOWS_FILE_PATH = HX_("assets/shows/shows.xml",ba,67,39,de);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_26_boot)
HXDLIN(  26)		TV_SHOW_CELLS_IN_ROW = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_27_boot)
HXDLIN(  27)		TV_SHOW_CELL_WIDTH = 370;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_28_boot)
HXDLIN(  28)		TV_SHOW_CELL_HEIGHT = 60;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_29_boot)
HXDLIN(  29)		TV_SHOW_CELLS_START_X = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_30_boot)
HXDLIN(  30)		TV_SHOW_CELLS_START_Y = 450;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_31_boot)
HXDLIN(  31)		TV_SHOW_PREVIEW_WIDTH = 1900;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_32_boot)
HXDLIN(  32)		TV_SHOW_PREVIEW_HEIGHT = 400;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_33_boot)
HXDLIN(  33)		TV_SHOW_PREVIEW_START_X = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_34_boot)
HXDLIN(  34)		TV_SHOW_PREVIEW_START_Y = 40;
            	}
}

