// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DateTools
#include <DateTools.h>
#endif
#ifndef INCLUDED_Popup
#include <Popup.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TVShow
#include <TVShow.h>
#endif
#ifndef INCLUDED_TVShowsLayoutGroup
#include <TVShowsLayoutGroup.h>
#endif
#ifndef INCLUDED_feathers_controls_BasicButton
#include <feathers/controls/BasicButton.h>
#endif
#ifndef INCLUDED_feathers_controls_Button
#include <feathers/controls/Button.h>
#endif
#ifndef INCLUDED_feathers_controls_ITriggerView
#include <feathers/controls/ITriggerView.h>
#endif
#ifndef INCLUDED_feathers_controls_Label
#include <feathers/controls/Label.h>
#endif
#ifndef INCLUDED_feathers_controls_LayoutGroup
#include <feathers/controls/LayoutGroup.h>
#endif
#ifndef INCLUDED_feathers_controls_TextArea
#include <feathers/controls/TextArea.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_BaseScrollContainer
#include <feathers/controls/supportClasses/BaseScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusManagerAware
#include <feathers/core/IFocusManagerAware.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IHTMLTextControl
#include <feathers/core/IHTMLTextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStageFocusDelegate
#include <feathers/core/IStageFocusDelegate.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_data_ArrayCollection
#include <feathers/data/ArrayCollection.h>
#endif
#ifndef INCLUDED_feathers_data_IFlatCollection
#include <feathers/data/IFlatCollection.h>
#endif
#ifndef INCLUDED_feathers_events_TriggerEvent
#include <feathers/events/TriggerEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_text_TextFormat
#include <feathers/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_IExternalizable
#include <openfl/utils/IExternalizable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6550f762465377d9_27_new,"TVShowsLayoutGroup","new",0x90dc8e13,"TVShowsLayoutGroup.new","TVShowsView.hx",27,0x8513b3e5)
HX_LOCAL_STACK_FRAME(_hx_pos_6550f762465377d9_71_printTVShowsGrid,"TVShowsLayoutGroup","printTVShowsGrid",0x6f43603a,"TVShowsLayoutGroup.printTVShowsGrid","TVShowsView.hx",71,0x8513b3e5)
HX_LOCAL_STACK_FRAME(_hx_pos_6550f762465377d9_100_drawCell,"TVShowsLayoutGroup","drawCell",0xddb28533,"TVShowsLayoutGroup.drawCell","TVShowsView.hx",100,0x8513b3e5)
HX_LOCAL_STACK_FRAME(_hx_pos_6550f762465377d9_90_drawCell,"TVShowsLayoutGroup","drawCell",0xddb28533,"TVShowsLayoutGroup.drawCell","TVShowsView.hx",90,0x8513b3e5)
HX_LOCAL_STACK_FRAME(_hx_pos_6550f762465377d9_135_printTVShowInfoOnPreview,"TVShowsLayoutGroup","printTVShowInfoOnPreview",0x9547829c,"TVShowsLayoutGroup.printTVShowInfoOnPreview","TVShowsView.hx",135,0x8513b3e5)
HX_LOCAL_STACK_FRAME(_hx_pos_6550f762465377d9_187_addLabel,"TVShowsLayoutGroup","addLabel",0x7097ed80,"TVShowsLayoutGroup.addLabel","TVShowsView.hx",187,0x8513b3e5)
HX_LOCAL_STACK_FRAME(_hx_pos_6550f762465377d9_196_addTextField,"TVShowsLayoutGroup","addTextField",0x25deba59,"TVShowsLayoutGroup.addTextField","TVShowsView.hx",196,0x8513b3e5)
HX_LOCAL_STACK_FRAME(_hx_pos_6550f762465377d9_28_boot,"TVShowsLayoutGroup","boot",0x2838c31f,"TVShowsLayoutGroup.boot","TVShowsView.hx",28,0x8513b3e5)

void TVShowsLayoutGroup_obj::__construct( ::feathers::data::ArrayCollection tvShows, ::feathers::controls::LayoutGroup tabsContainer,int cellsInRow,int cellWidth,int cellHeight,int cellStartXPosition,int cellStartYPosition,int previewWidth,int previewHeight,int previewX,int previewY){
            	HX_GC_STACKFRAME(&_hx_pos_6550f762465377d9_27_new)
HXLINE(  44)		this->previewInfoStartYPosition = 60;
HXLINE(  43)		this->previewInfoStartXPosition = 350;
HXLINE(  51)		super::__construct();
HXLINE(  53)		 ::feathers::controls::LayoutGroup container =  ::feathers::controls::LayoutGroup_obj::__alloc( HX_CTX );
HXLINE(  54)		tabsContainer->addChild(container);
HXLINE(  56)		this->tvShows = tvShows;
HXLINE(  57)		this->container = container;
HXLINE(  58)		this->cellsInRow = cellsInRow;
HXLINE(  59)		this->cellWidth = cellWidth;
HXLINE(  60)		this->cellHeight = cellHeight;
HXLINE(  61)		this->cellStartXPosition = cellStartXPosition;
HXLINE(  62)		this->cellStartYPosition = cellStartYPosition;
HXLINE(  63)		this->previewWidth = previewWidth;
HXLINE(  64)		this->previewHeight = previewHeight;
HXLINE(  65)		this->previewX = previewX;
HXLINE(  66)		this->previewY = previewY;
HXLINE(  68)		this->printTVShowsGrid();
            	}

Dynamic TVShowsLayoutGroup_obj::__CreateEmpty() { return new TVShowsLayoutGroup_obj; }

void *TVShowsLayoutGroup_obj::_hx_vtable = 0;

Dynamic TVShowsLayoutGroup_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TVShowsLayoutGroup_obj > _hx_result = new TVShowsLayoutGroup_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool TVShowsLayoutGroup_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x11a722e7) {
		if (inClassId<=(int)0x093ab78b) {
			if (inClassId<=(int)0x06fd6b61) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x06fd6b61;
				}
			} else {
				return inClassId==(int)0x093ab78b;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x11a722e7;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			if (inClassId<=(int)0x4033f4be) {
				return inClassId==(int)0x1f4df417 || inClassId==(int)0x4033f4be;
			} else {
				return inClassId==(int)0x4af7dd8e;
			}
		} else {
			return inClassId==(int)0x58123034 || inClassId==(int)0x6b353933;
		}
	}
}

void TVShowsLayoutGroup_obj::printTVShowsGrid(){
            	HX_STACKFRAME(&_hx_pos_6550f762465377d9_71_printTVShowsGrid)
HXLINE(  72)		int rowNumber = 1;
HXLINE(  73)		int columnNumber = 0;
HXLINE(  75)		{
HXLINE(  75)			int _g = 0;
HXDLIN(  75)			int _g1 = this->tvShows->get_length();
HXDLIN(  75)			while((_g < _g1)){
HXLINE(  75)				_g = (_g + 1);
HXDLIN(  75)				int i = (_g - 1);
HXLINE(  76)				if ((columnNumber >= this->cellsInRow)) {
HXLINE(  77)					columnNumber = 0;
HXLINE(  78)					rowNumber = (rowNumber + 1);
            				}
HXLINE(  81)				int x = (this->cellStartXPosition + (columnNumber * this->cellWidth));
HXLINE(  82)				int y = (this->cellStartYPosition + (rowNumber * this->cellHeight));
HXLINE(  83)				columnNumber = (columnNumber + 1);
HXLINE(  85)				 ::TVShow tvShow = this->tvShows->get(i).StaticCast<  ::TVShow >();
HXLINE(  86)				this->drawCell(tvShow,x,y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TVShowsLayoutGroup_obj,printTVShowsGrid,(void))

void TVShowsLayoutGroup_obj::drawCell( ::TVShow tvShow,int x,int y){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0,::String,imgPath, ::TVShowsLayoutGroup,_gthis, ::TVShow,tvShow) HXARGC(1)
            		void _hx_run( ::feathers::events::TriggerEvent event){
            			HX_GC_STACKFRAME(&_hx_pos_6550f762465377d9_100_drawCell)
HXLINE( 101)			if ((_gthis->activePreviewIndex >= 0)) {
HXLINE( 102)				_gthis->container->removeChildAt(_gthis->activePreviewInfoIndex);
HXLINE( 103)				_gthis->container->removeChildAt(_gthis->activePreviewIndex);
HXLINE( 104)				_gthis->activePreviewIndex = -1;
            			}
HXLINE( 107)			 ::openfl::display::BitmapData bitmapData = ::openfl::utils::Assets_obj::getBitmapData(imgPath,null());
HXLINE( 108)			 ::openfl::display::Bitmap bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,bitmapData,null(),null());
HXLINE( 109)			bitmap->set_x(( (Float)(_gthis->previewX) ));
HXLINE( 110)			bitmap->set_y(( (Float)(_gthis->previewY) ));
HXLINE( 111)			Float scaleFactor = (( (Float)(_gthis->previewHeight) ) / ( (Float)(bitmapData->height) ));
HXLINE( 112)			bitmap->set_scaleX(scaleFactor);
HXLINE( 113)			bitmap->set_scaleY(scaleFactor);
HXLINE( 115)			_gthis->container->addChild(bitmap);
HXLINE( 116)			int _hx_tmp = _gthis->container->get_numChildren();
HXDLIN( 116)			_gthis->activePreviewIndex = (_hx_tmp - 1);
HXLINE( 118)			_gthis->printTVShowInfoOnPreview(tvShow);
HXLINE( 120)			::Popup_obj::Show(tvShow->showName,tvShow->description,_gthis->parent);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_6550f762465377d9_90_drawCell)
HXDLIN(  90)		 ::TVShowsLayoutGroup _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  91)		::String imgPath = (HX_("assets/img/shows/",b1,4b,fe,1c) + tvShow->imgName);
HXLINE(  93)		 ::feathers::controls::Button button =  ::feathers::controls::Button_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  94)		button->set_text(tvShow->showName);
HXLINE(  95)		button->set_x(( (Float)(x) ));
HXLINE(  96)		button->set_y(( (Float)(y) ));
HXLINE(  97)		button->set_width(( (Float)(this->cellWidth) ));
HXLINE(  98)		button->set_height(( (Float)(this->cellHeight) ));
HXLINE( 100)		button->addEventListener(HX_("trigger",38,55,df,25), ::Dynamic(new _hx_Closure_0(imgPath,_gthis,tvShow)),null(),null(),null());
HXLINE( 123)		 ::openfl::display::BitmapData bitmapData = ::openfl::utils::Assets_obj::getBitmapData(imgPath,null());
HXLINE( 124)		 ::openfl::display::Bitmap icon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(imgPath,null()),null(),null());
HXLINE( 125)		icon->set_x(((( (Float)(this->cellHeight) ) * ((Float)0.25)) / ( (Float)(2) )));
HXLINE( 126)		icon->set_y(((( (Float)(this->cellHeight) ) * ((Float)0.25)) / ( (Float)(2) )));
HXLINE( 127)		Float scaleFactor = ((( (Float)(this->cellHeight) ) * ((Float)0.75)) / ( (Float)(bitmapData->height) ));
HXLINE( 128)		icon->set_scaleX(scaleFactor);
HXLINE( 129)		icon->set_scaleY(scaleFactor);
HXLINE( 130)		button->addChild(icon);
HXLINE( 132)		this->container->addChild(button);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TVShowsLayoutGroup_obj,drawCell,(void))

void TVShowsLayoutGroup_obj::printTVShowInfoOnPreview( ::TVShow tvShow){
            	HX_GC_STACKFRAME(&_hx_pos_6550f762465377d9_135_printTVShowInfoOnPreview)
HXLINE( 136)		 ::feathers::controls::LayoutGroup layoutGroup =  ::feathers::controls::LayoutGroup_obj::__alloc( HX_CTX );
HXLINE( 137)		this->container->addChild(layoutGroup);
HXLINE( 138)		this->activePreviewInfoIndex = (this->container->get_numChildren() - 1);
HXLINE( 140)		int x = this->previewInfoStartXPosition;
HXLINE( 141)		int y = this->previewInfoStartYPosition;
HXLINE( 143)		if ((tvShow->showId != 0)) {
HXLINE( 144)			 ::feathers::text::TextFormat textFormat =  ::feathers::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Helvetica",f1,95,6c,12),14,13619665,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 145)			this->addLabel(layoutGroup,(HX_("Show #",60,5e,04,5b) + tvShow->showId),textFormat,x,y);
HXLINE( 146)			if ((tvShow->channelId != 0)) {
HXLINE( 147)				this->addLabel(layoutGroup,(HX_("Ch #",08,52,98,2c) + tvShow->channelId),textFormat,(x + 500),y);
            			}
HXLINE( 149)			y = (y + 40);
            		}
HXLINE( 152)		::String showName = tvShow->showName;
HXLINE( 153)		if ((showName == HX_("",00,00,00,00))) {
HXLINE( 154)			showName = HX_("Unknown",6a,4b,cc,ae);
            		}
HXLINE( 156)		this->addLabel(layoutGroup,showName, ::feathers::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Helvetica",f1,95,6c,12),24,15132647,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()),x,y);
HXLINE( 157)		y = (y + 50);
HXLINE( 159)		if ((tvShow->description != HX_("",00,00,00,00))) {
HXLINE( 160)			::String tvShow1 = tvShow->description;
HXDLIN( 160)			 ::feathers::text::TextFormat _hx_tmp =  ::feathers::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Helvetica",f1,95,6c,12),18,13945767,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXDLIN( 160)			this->addTextField(layoutGroup,tvShow1,_hx_tmp,x,y,::Math_obj::round((( (Float)(this->previewWidth) ) / ((Float)1.8))),::Math_obj::round((( (Float)(this->previewHeight) ) / ((Float)1.8))));
            		}
HXLINE( 164)		if ((tvShow->startDate != 0)) {
HXLINE( 167)			::String dateString = ::Std_obj::string(tvShow->startDate);
HXLINE( 168)			 ::Dynamic startDate = ::Std_obj::parseInt(dateString.substr(0,4));
HXDLIN( 168)			int startDate1 = (( (int)(::Std_obj::parseInt(dateString.substr(4,2))) ) - 1);
HXLINE( 169)			 ::Dynamic startDate2 = ::Std_obj::parseInt(dateString.substr(6,2));
HXDLIN( 169)			 ::Dynamic startDate3 = ::Std_obj::parseInt(dateString.substr(8,2));
HXDLIN( 169)			 ::Dynamic startDate4 = ::Std_obj::parseInt(dateString.substr(10,2));
HXLINE( 168)			 ::Date startDate5 =  ::Date_obj::__alloc( HX_CTX ,( (int)(startDate) ),startDate1,( (int)(startDate2) ),( (int)(startDate3) ),( (int)(startDate4) ),( (int)(::Std_obj::parseInt(dateString.substr(12,2))) ));
HXLINE( 172)			::String format = HX_("%m/%d/%Y %H:%M",9c,81,f9,61);
HXLINE( 165)			::String time = ::DateTools_obj::format(startDate5,format);
HXLINE( 175)			if ((tvShow->endDate != 0)) {
HXLINE( 176)				dateString = ::Std_obj::string(tvShow->endDate);
HXLINE( 177)				 ::Dynamic endDate = ::Std_obj::parseInt(dateString.substr(0,4));
HXDLIN( 177)				int endDate1 = (( (int)(::Std_obj::parseInt(dateString.substr(4,2))) ) - 1);
HXLINE( 178)				 ::Dynamic endDate2 = ::Std_obj::parseInt(dateString.substr(6,2));
HXDLIN( 178)				 ::Dynamic endDate3 = ::Std_obj::parseInt(dateString.substr(8,2));
HXDLIN( 178)				 ::Dynamic endDate4 = ::Std_obj::parseInt(dateString.substr(10,2));
HXLINE( 177)				 ::Date endDate5 =  ::Date_obj::__alloc( HX_CTX ,( (int)(endDate) ),endDate1,( (int)(endDate2) ),( (int)(endDate3) ),( (int)(endDate4) ),( (int)(::Std_obj::parseInt(dateString.substr(12,2))) ));
HXLINE( 181)				time = (time + (HX_(" - ",73,6f,18,00) + ::DateTools_obj::format(endDate5,format)));
            			}
HXLINE( 183)			 ::feathers::text::TextFormat _hx_tmp1 =  ::feathers::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Helvetica",f1,95,6c,12),16,15394750,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXDLIN( 183)			this->addLabel(layoutGroup,time,_hx_tmp1,x,(this->previewHeight + 20));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TVShowsLayoutGroup_obj,printTVShowInfoOnPreview,(void))

void TVShowsLayoutGroup_obj::addLabel( ::feathers::controls::LayoutGroup layoutGroup,::String text, ::feathers::text::TextFormat textFormat,int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_6550f762465377d9_187_addLabel)
HXLINE( 188)		 ::feathers::controls::Label labelKey =  ::feathers::controls::Label_obj::__alloc( HX_CTX ,null());
HXLINE( 189)		labelKey->set_text(text);
HXLINE( 190)		labelKey->set_textFormat(textFormat);
HXLINE( 191)		labelKey->set_x(( (Float)(x) ));
HXLINE( 192)		labelKey->set_y(( (Float)(y) ));
HXLINE( 193)		layoutGroup->addChild(labelKey);
            	}


HX_DEFINE_DYNAMIC_FUNC5(TVShowsLayoutGroup_obj,addLabel,(void))

void TVShowsLayoutGroup_obj::addTextField( ::feathers::controls::LayoutGroup layoutGroup,::String text, ::feathers::text::TextFormat textFormat,int x,int y,int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_6550f762465377d9_196_addTextField)
HXLINE( 197)		 ::feathers::controls::TextArea textArea =  ::feathers::controls::TextArea_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 198)		textArea->set_text(text);
HXLINE( 199)		textArea->set_smoothScrolling(true);
HXLINE( 200)		textArea->set_editable(false);
HXLINE( 201)		textArea->set_textFormat(textFormat);
HXLINE( 202)		textArea->set_wordWrap(true);
HXLINE( 203)		int leftShift = 10;
HXLINE( 204)		textArea->set_x(( (Float)((x - leftShift)) ));
HXLINE( 205)		textArea->set_y(( (Float)(y) ));
HXLINE( 206)		textArea->set_width(( (Float)(width) ));
HXLINE( 207)		textArea->set_height(( (Float)(height) ));
HXLINE( 208)		textArea->set_backgroundSkin(null());
HXLINE( 209)		layoutGroup->addChild(textArea);
            	}


HX_DEFINE_DYNAMIC_FUNC7(TVShowsLayoutGroup_obj,addTextField,(void))

::String TVShowsLayoutGroup_obj::IMG_DIR_PATH;


::hx::ObjectPtr< TVShowsLayoutGroup_obj > TVShowsLayoutGroup_obj::__new( ::feathers::data::ArrayCollection tvShows, ::feathers::controls::LayoutGroup tabsContainer,int cellsInRow,int cellWidth,int cellHeight,int cellStartXPosition,int cellStartYPosition,int previewWidth,int previewHeight,int previewX,int previewY) {
	::hx::ObjectPtr< TVShowsLayoutGroup_obj > __this = new TVShowsLayoutGroup_obj();
	__this->__construct(tvShows,tabsContainer,cellsInRow,cellWidth,cellHeight,cellStartXPosition,cellStartYPosition,previewWidth,previewHeight,previewX,previewY);
	return __this;
}

::hx::ObjectPtr< TVShowsLayoutGroup_obj > TVShowsLayoutGroup_obj::__alloc(::hx::Ctx *_hx_ctx, ::feathers::data::ArrayCollection tvShows, ::feathers::controls::LayoutGroup tabsContainer,int cellsInRow,int cellWidth,int cellHeight,int cellStartXPosition,int cellStartYPosition,int previewWidth,int previewHeight,int previewX,int previewY) {
	TVShowsLayoutGroup_obj *__this = (TVShowsLayoutGroup_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TVShowsLayoutGroup_obj), true, "TVShowsLayoutGroup"));
	*(void **)__this = TVShowsLayoutGroup_obj::_hx_vtable;
	__this->__construct(tvShows,tabsContainer,cellsInRow,cellWidth,cellHeight,cellStartXPosition,cellStartYPosition,previewWidth,previewHeight,previewX,previewY);
	return __this;
}

TVShowsLayoutGroup_obj::TVShowsLayoutGroup_obj()
{
}

void TVShowsLayoutGroup_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TVShowsLayoutGroup);
	HX_MARK_MEMBER_NAME(container,"container");
	HX_MARK_MEMBER_NAME(tvShows,"tvShows");
	HX_MARK_MEMBER_NAME(cellsInRow,"cellsInRow");
	HX_MARK_MEMBER_NAME(cellWidth,"cellWidth");
	HX_MARK_MEMBER_NAME(cellHeight,"cellHeight");
	HX_MARK_MEMBER_NAME(cellStartXPosition,"cellStartXPosition");
	HX_MARK_MEMBER_NAME(cellStartYPosition,"cellStartYPosition");
	HX_MARK_MEMBER_NAME(previewWidth,"previewWidth");
	HX_MARK_MEMBER_NAME(previewHeight,"previewHeight");
	HX_MARK_MEMBER_NAME(previewX,"previewX");
	HX_MARK_MEMBER_NAME(previewY,"previewY");
	HX_MARK_MEMBER_NAME(previewInfoStartXPosition,"previewInfoStartXPosition");
	HX_MARK_MEMBER_NAME(previewInfoStartYPosition,"previewInfoStartYPosition");
	HX_MARK_MEMBER_NAME(activePreviewIndex,"activePreviewIndex");
	HX_MARK_MEMBER_NAME(activePreviewInfoIndex,"activePreviewInfoIndex");
	 ::feathers::controls::LayoutGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TVShowsLayoutGroup_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(container,"container");
	HX_VISIT_MEMBER_NAME(tvShows,"tvShows");
	HX_VISIT_MEMBER_NAME(cellsInRow,"cellsInRow");
	HX_VISIT_MEMBER_NAME(cellWidth,"cellWidth");
	HX_VISIT_MEMBER_NAME(cellHeight,"cellHeight");
	HX_VISIT_MEMBER_NAME(cellStartXPosition,"cellStartXPosition");
	HX_VISIT_MEMBER_NAME(cellStartYPosition,"cellStartYPosition");
	HX_VISIT_MEMBER_NAME(previewWidth,"previewWidth");
	HX_VISIT_MEMBER_NAME(previewHeight,"previewHeight");
	HX_VISIT_MEMBER_NAME(previewX,"previewX");
	HX_VISIT_MEMBER_NAME(previewY,"previewY");
	HX_VISIT_MEMBER_NAME(previewInfoStartXPosition,"previewInfoStartXPosition");
	HX_VISIT_MEMBER_NAME(previewInfoStartYPosition,"previewInfoStartYPosition");
	HX_VISIT_MEMBER_NAME(activePreviewIndex,"activePreviewIndex");
	HX_VISIT_MEMBER_NAME(activePreviewInfoIndex,"activePreviewInfoIndex");
	 ::feathers::controls::LayoutGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TVShowsLayoutGroup_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tvShows") ) { return ::hx::Val( tvShows ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"previewX") ) { return ::hx::Val( previewX ); }
		if (HX_FIELD_EQ(inName,"previewY") ) { return ::hx::Val( previewY ); }
		if (HX_FIELD_EQ(inName,"drawCell") ) { return ::hx::Val( drawCell_dyn() ); }
		if (HX_FIELD_EQ(inName,"addLabel") ) { return ::hx::Val( addLabel_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"container") ) { return ::hx::Val( container ); }
		if (HX_FIELD_EQ(inName,"cellWidth") ) { return ::hx::Val( cellWidth ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cellsInRow") ) { return ::hx::Val( cellsInRow ); }
		if (HX_FIELD_EQ(inName,"cellHeight") ) { return ::hx::Val( cellHeight ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"previewWidth") ) { return ::hx::Val( previewWidth ); }
		if (HX_FIELD_EQ(inName,"addTextField") ) { return ::hx::Val( addTextField_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"previewHeight") ) { return ::hx::Val( previewHeight ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"printTVShowsGrid") ) { return ::hx::Val( printTVShowsGrid_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"cellStartXPosition") ) { return ::hx::Val( cellStartXPosition ); }
		if (HX_FIELD_EQ(inName,"cellStartYPosition") ) { return ::hx::Val( cellStartYPosition ); }
		if (HX_FIELD_EQ(inName,"activePreviewIndex") ) { return ::hx::Val( activePreviewIndex ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"activePreviewInfoIndex") ) { return ::hx::Val( activePreviewInfoIndex ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"printTVShowInfoOnPreview") ) { return ::hx::Val( printTVShowInfoOnPreview_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"previewInfoStartXPosition") ) { return ::hx::Val( previewInfoStartXPosition ); }
		if (HX_FIELD_EQ(inName,"previewInfoStartYPosition") ) { return ::hx::Val( previewInfoStartYPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TVShowsLayoutGroup_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tvShows") ) { tvShows=inValue.Cast<  ::feathers::data::ArrayCollection >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"previewX") ) { previewX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previewY") ) { previewY=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"container") ) { container=inValue.Cast<  ::feathers::controls::LayoutGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cellWidth") ) { cellWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cellsInRow") ) { cellsInRow=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cellHeight") ) { cellHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"previewWidth") ) { previewWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"previewHeight") ) { previewHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"cellStartXPosition") ) { cellStartXPosition=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cellStartYPosition") ) { cellStartYPosition=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"activePreviewIndex") ) { activePreviewIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"activePreviewInfoIndex") ) { activePreviewInfoIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"previewInfoStartXPosition") ) { previewInfoStartXPosition=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previewInfoStartYPosition") ) { previewInfoStartYPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TVShowsLayoutGroup_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("container",41,75,73,bf));
	outFields->push(HX_("tvShows",f4,5b,2b,15));
	outFields->push(HX_("cellsInRow",e4,f0,9f,8e));
	outFields->push(HX_("cellWidth",04,d9,6b,3b));
	outFields->push(HX_("cellHeight",29,83,41,79));
	outFields->push(HX_("cellStartXPosition",c1,f1,b5,f8));
	outFields->push(HX_("cellStartYPosition",c2,5a,a7,cb));
	outFields->push(HX_("previewWidth",de,28,24,0f));
	outFields->push(HX_("previewHeight",0f,12,cf,e6));
	outFields->push(HX_("previewX",50,27,a9,23));
	outFields->push(HX_("previewY",51,27,a9,23));
	outFields->push(HX_("previewInfoStartXPosition",b5,7b,6f,9d));
	outFields->push(HX_("previewInfoStartYPosition",b6,e4,60,70));
	outFields->push(HX_("activePreviewIndex",d0,2c,ed,04));
	outFields->push(HX_("activePreviewInfoIndex",82,cc,34,70));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TVShowsLayoutGroup_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::feathers::controls::LayoutGroup */ ,(int)offsetof(TVShowsLayoutGroup_obj,container),HX_("container",41,75,73,bf)},
	{::hx::fsObject /*  ::feathers::data::ArrayCollection */ ,(int)offsetof(TVShowsLayoutGroup_obj,tvShows),HX_("tvShows",f4,5b,2b,15)},
	{::hx::fsInt,(int)offsetof(TVShowsLayoutGroup_obj,cellsInRow),HX_("cellsInRow",e4,f0,9f,8e)},
	{::hx::fsInt,(int)offsetof(TVShowsLayoutGroup_obj,cellWidth),HX_("cellWidth",04,d9,6b,3b)},
	{::hx::fsInt,(int)offsetof(TVShowsLayoutGroup_obj,cellHeight),HX_("cellHeight",29,83,41,79)},
	{::hx::fsInt,(int)offsetof(TVShowsLayoutGroup_obj,cellStartXPosition),HX_("cellStartXPosition",c1,f1,b5,f8)},
	{::hx::fsInt,(int)offsetof(TVShowsLayoutGroup_obj,cellStartYPosition),HX_("cellStartYPosition",c2,5a,a7,cb)},
	{::hx::fsInt,(int)offsetof(TVShowsLayoutGroup_obj,previewWidth),HX_("previewWidth",de,28,24,0f)},
	{::hx::fsInt,(int)offsetof(TVShowsLayoutGroup_obj,previewHeight),HX_("previewHeight",0f,12,cf,e6)},
	{::hx::fsInt,(int)offsetof(TVShowsLayoutGroup_obj,previewX),HX_("previewX",50,27,a9,23)},
	{::hx::fsInt,(int)offsetof(TVShowsLayoutGroup_obj,previewY),HX_("previewY",51,27,a9,23)},
	{::hx::fsInt,(int)offsetof(TVShowsLayoutGroup_obj,previewInfoStartXPosition),HX_("previewInfoStartXPosition",b5,7b,6f,9d)},
	{::hx::fsInt,(int)offsetof(TVShowsLayoutGroup_obj,previewInfoStartYPosition),HX_("previewInfoStartYPosition",b6,e4,60,70)},
	{::hx::fsInt,(int)offsetof(TVShowsLayoutGroup_obj,activePreviewIndex),HX_("activePreviewIndex",d0,2c,ed,04)},
	{::hx::fsInt,(int)offsetof(TVShowsLayoutGroup_obj,activePreviewInfoIndex),HX_("activePreviewInfoIndex",82,cc,34,70)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TVShowsLayoutGroup_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &TVShowsLayoutGroup_obj::IMG_DIR_PATH,HX_("IMG_DIR_PATH",53,48,26,dd)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TVShowsLayoutGroup_obj_sMemberFields[] = {
	HX_("container",41,75,73,bf),
	HX_("tvShows",f4,5b,2b,15),
	HX_("cellsInRow",e4,f0,9f,8e),
	HX_("cellWidth",04,d9,6b,3b),
	HX_("cellHeight",29,83,41,79),
	HX_("cellStartXPosition",c1,f1,b5,f8),
	HX_("cellStartYPosition",c2,5a,a7,cb),
	HX_("previewWidth",de,28,24,0f),
	HX_("previewHeight",0f,12,cf,e6),
	HX_("previewX",50,27,a9,23),
	HX_("previewY",51,27,a9,23),
	HX_("previewInfoStartXPosition",b5,7b,6f,9d),
	HX_("previewInfoStartYPosition",b6,e4,60,70),
	HX_("activePreviewIndex",d0,2c,ed,04),
	HX_("activePreviewInfoIndex",82,cc,34,70),
	HX_("printTVShowsGrid",cd,f1,0c,9f),
	HX_("drawCell",c6,cb,26,56),
	HX_("printTVShowInfoOnPreview",2f,5f,29,13),
	HX_("addLabel",13,34,0c,e9),
	HX_("addTextField",6c,46,d5,98),
	::String(null()) };

static void TVShowsLayoutGroup_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TVShowsLayoutGroup_obj::IMG_DIR_PATH,"IMG_DIR_PATH");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TVShowsLayoutGroup_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TVShowsLayoutGroup_obj::IMG_DIR_PATH,"IMG_DIR_PATH");
};

#endif

::hx::Class TVShowsLayoutGroup_obj::__mClass;

static ::String TVShowsLayoutGroup_obj_sStaticFields[] = {
	HX_("IMG_DIR_PATH",53,48,26,dd),
	::String(null())
};

void TVShowsLayoutGroup_obj::__register()
{
	TVShowsLayoutGroup_obj _hx_dummy;
	TVShowsLayoutGroup_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TVShowsLayoutGroup",a1,88,39,af);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TVShowsLayoutGroup_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TVShowsLayoutGroup_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TVShowsLayoutGroup_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TVShowsLayoutGroup_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TVShowsLayoutGroup_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TVShowsLayoutGroup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TVShowsLayoutGroup_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TVShowsLayoutGroup_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6550f762465377d9_28_boot)
HXDLIN(  28)		IMG_DIR_PATH = HX_("assets/img/shows/",b1,4b,fe,1c);
            	}
}

