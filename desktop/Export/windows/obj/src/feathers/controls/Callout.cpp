// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_controls_Callout
#include <feathers/controls/Callout.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IPopUpManager
#include <feathers/core/IPopUpManager.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_InvalidationFlag
#include <feathers/core/InvalidationFlag.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_PopUpManager
#include <feathers/core/PopUpManager.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_events_FeathersEvent
#include <feathers/events/FeathersEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_HorizontalAlign
#include <feathers/layout/HorizontalAlign.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_layout_RelativePosition
#include <feathers/layout/RelativePosition.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalAlign
#include <feathers/layout/VerticalAlign.h>
#endif
#ifndef INCLUDED_feathers_skins_IProgrammaticSkin
#include <feathers/skins/IProgrammaticSkin.h>
#endif
#ifndef INCLUDED_feathers_style_IDarkModeTheme
#include <feathers/style/IDarkModeTheme.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_ITheme
#include <feathers/style/ITheme.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_themes_ClassVariantTheme
#include <feathers/themes/ClassVariantTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_BaseSteelTheme
#include <feathers/themes/steel/BaseSteelTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_components_SteelCalloutStyles
#include <feathers/themes/steel/components/SteelCalloutStyles.h>
#endif
#ifndef INCLUDED_feathers_utils_MeasurementsUtil
#include <feathers/utils/MeasurementsUtil.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7a4dd787dae34c11_67_new,"feathers.controls.Callout","new",0xf05571c8,"feathers.controls.Callout.new","feathers/controls/Callout.hx",67,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_311_get_content,"feathers.controls.Callout","get_content",0x7d8f36b8,"feathers.controls.Callout.get_content","feathers/controls/Callout.hx",311,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_314_set_content,"feathers.controls.Callout","set_content",0x87fc3dc4,"feathers.controls.Callout.set_content","feathers/controls/Callout.hx",314,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_357_get_origin,"feathers.controls.Callout","get_origin",0xb3eb6547,"feathers.controls.Callout.get_origin","feathers/controls/Callout.hx",357,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_360_set_origin,"feathers.controls.Callout","set_origin",0xb76903bb,"feathers.controls.Callout.set_origin","feathers/controls/Callout.hx",360,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_753_close,"feathers.controls.Callout","close",0x751de320,"feathers.controls.Callout.close","feathers/controls/Callout.hx",753,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_768_setPadding,"feathers.controls.Callout","setPadding",0x9bbf59e7,"feathers.controls.Callout.setPadding","feathers/controls/Callout.hx",768,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_775_dispose,"feathers.controls.Callout","dispose",0xa4def607,"feathers.controls.Callout.dispose","feathers/controls/Callout.hx",775,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_787_initializeCalloutTheme,"feathers.controls.Callout","initializeCalloutTheme",0xcf5d8641,"feathers.controls.Callout.initializeCalloutTheme","feathers/controls/Callout.hx",787,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_791_update,"feathers.controls.Callout","update",0x7dbcb5a1,"feathers.controls.Callout.update","feathers/controls/Callout.hx",791,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_825_measure,"feathers.controls.Callout","measure",0x267c70c6,"feathers.controls.Callout.measure","feathers/controls/Callout.hx",825,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_828_measureWithArrowPosition,"feathers.controls.Callout","measureWithArrowPosition",0xff346606,"feathers.controls.Callout.measureWithArrowPosition","feathers/controls/Callout.hx",828,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1052_getCurrentBackgroundSkin,"feathers.controls.Callout","getCurrentBackgroundSkin",0xf4cf60c6,"feathers.controls.Callout.getCurrentBackgroundSkin","feathers/controls/Callout.hx",1052,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1055_refreshBackgroundSkin,"feathers.controls.Callout","refreshBackgroundSkin",0x78df582e,"feathers.controls.Callout.refreshBackgroundSkin","feathers/controls/Callout.hx",1055,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1065_addCurrentBackgroundSkin,"feathers.controls.Callout","addCurrentBackgroundSkin",0x264ab15b,"feathers.controls.Callout.addCurrentBackgroundSkin","feathers/controls/Callout.hx",1065,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1084_removeCurrentBackgroundSkin,"feathers.controls.Callout","removeCurrentBackgroundSkin",0x047d9628,"feathers.controls.Callout.removeCurrentBackgroundSkin","feathers/controls/Callout.hx",1084,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1099_refreshArrowSkin,"feathers.controls.Callout","refreshArrowSkin",0x3333e523,"feathers.controls.Callout.refreshArrowSkin","feathers/controls/Callout.hx",1099,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1113_getCurrentArrowSkin,"feathers.controls.Callout","getCurrentArrowSkin",0x0170a38b,"feathers.controls.Callout.getCurrentArrowSkin","feathers/controls/Callout.hx",1113,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1121_removeCurrentArrowSkin,"feathers.controls.Callout","removeCurrentArrowSkin",0x9f726969,"feathers.controls.Callout.removeCurrentArrowSkin","feathers/controls/Callout.hx",1121,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1134_refreshEnabled,"feathers.controls.Callout","refreshEnabled",0x8a9a9b7e,"feathers.controls.Callout.refreshEnabled","feathers/controls/Callout.hx",1134,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1139_layoutChildren,"feathers.controls.Callout","layoutChildren",0xdbd6c5a1,"feathers.controls.Callout.layoutChildren","feathers/controls/Callout.hx",1139,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1261_checkForOriginMoved,"feathers.controls.Callout","checkForOriginMoved",0x081f7834,"feathers.controls.Callout.checkForOriginMoved","feathers/controls/Callout.hx",1261,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1295_positionRelativeToOrigin,"feathers.controls.Callout","positionRelativeToOrigin",0xfd5ffb0e,"feathers.controls.Callout.positionRelativeToOrigin","feathers/controls/Callout.hx",1295,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1380_callout_addedToStageHandler,"feathers.controls.Callout","callout_addedToStageHandler",0xa6147ec0,"feathers.controls.Callout.callout_addedToStageHandler","feathers/controls/Callout.hx",1380,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1388_callout_removedFromStageHandler,"feathers.controls.Callout","callout_removedFromStageHandler",0x42226c8f,"feathers.controls.Callout.callout_removedFromStageHandler","feathers/controls/Callout.hx",1388,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1396_callout_enterFrameHandler,"feathers.controls.Callout","callout_enterFrameHandler",0x26bcab2e,"feathers.controls.Callout.callout_enterFrameHandler","feathers/controls/Callout.hx",1396,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1404_callout_origin_removedFromStageHandler,"feathers.controls.Callout","callout_origin_removedFromStageHandler",0xcf14f9e4,"feathers.controls.Callout.callout_origin_removedFromStageHandler","feathers/controls/Callout.hx",1404,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1407_callout_content_resizeHandler,"feathers.controls.Callout","callout_content_resizeHandler",0xf00d52c9,"feathers.controls.Callout.callout_content_resizeHandler","feathers/controls/Callout.hx",1407,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1415_callout_stage_mouseDownHandler,"feathers.controls.Callout","callout_stage_mouseDownHandler",0x7ee785cb,"feathers.controls.Callout.callout_stage_mouseDownHandler","feathers/controls/Callout.hx",1415,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_1425_callout_stage_touchBeginHandler,"feathers.controls.Callout","callout_stage_touchBeginHandler",0x0f34f998,"feathers.controls.Callout.callout_stage_touchBeginHandler","feathers/controls/Callout.hx",1425,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_gap,"feathers.controls.Callout","get_gap",0x1055bb15,"feathers.controls.Callout.get_gap","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_gap,"feathers.controls.Callout","set_gap",0x03574c21,"feathers.controls.Callout.set_gap","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_gap,"feathers.controls.Callout","clearStyle_gap",0x3f6a3013,"feathers.controls.Callout.clearStyle_gap","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_marginTop,"feathers.controls.Callout","get_marginTop",0x46b4c646,"feathers.controls.Callout.get_marginTop","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_marginTop,"feathers.controls.Callout","set_marginTop",0x8bbaa852,"feathers.controls.Callout.set_marginTop","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_marginTop,"feathers.controls.Callout","clearStyle_marginTop",0xf8e40dc4,"feathers.controls.Callout.clearStyle_marginTop","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_marginRight,"feathers.controls.Callout","get_marginRight",0xc75c79cd,"feathers.controls.Callout.get_marginRight","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_marginRight,"feathers.controls.Callout","set_marginRight",0xc327f6d9,"feathers.controls.Callout.set_marginRight","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_marginRight,"feathers.controls.Callout","clearStyle_marginRight",0xd98b1ccb,"feathers.controls.Callout.clearStyle_marginRight","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_marginBottom,"feathers.controls.Callout","get_marginBottom",0xc0e0abda,"feathers.controls.Callout.get_marginBottom","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_marginBottom,"feathers.controls.Callout","set_marginBottom",0x1722994e,"feathers.controls.Callout.set_marginBottom","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_marginBottom,"feathers.controls.Callout","clearStyle_marginBottom",0x9780a71c,"feathers.controls.Callout.clearStyle_marginBottom","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_marginLeft,"feathers.controls.Callout","get_marginLeft",0x92276336,"feathers.controls.Callout.get_marginLeft","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_marginLeft,"feathers.controls.Callout","set_marginLeft",0xb2474baa,"feathers.controls.Callout.set_marginLeft","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_marginLeft,"feathers.controls.Callout","clearStyle_marginLeft",0xc956a9f8,"feathers.controls.Callout.clearStyle_marginLeft","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_paddingTop,"feathers.controls.Callout","get_paddingTop",0x47500d25,"feathers.controls.Callout.get_paddingTop","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_paddingTop,"feathers.controls.Callout","set_paddingTop",0x676ff599,"feathers.controls.Callout.set_paddingTop","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_paddingTop,"feathers.controls.Callout","clearStyle_paddingTop",0x7e7f53e7,"feathers.controls.Callout.clearStyle_paddingTop","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_paddingRight,"feathers.controls.Callout","get_paddingRight",0x9a7e766c,"feathers.controls.Callout.get_paddingRight","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_paddingRight,"feathers.controls.Callout","set_paddingRight",0xf0c063e0,"feathers.controls.Callout.set_paddingRight","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_paddingRight,"feathers.controls.Callout","clearStyle_paddingRight",0x711e71ae,"feathers.controls.Callout.clearStyle_paddingRight","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_paddingBottom,"feathers.controls.Callout","get_paddingBottom",0xab7bba5b,"feathers.controls.Callout.get_paddingBottom","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_paddingBottom,"feathers.controls.Callout","set_paddingBottom",0xcee99267,"feathers.controls.Callout.set_paddingBottom","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_paddingBottom,"feathers.controls.Callout","clearStyle_paddingBottom",0xa0d798d9,"feathers.controls.Callout.clearStyle_paddingBottom","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_paddingLeft,"feathers.controls.Callout","get_paddingLeft",0x196a1f77,"feathers.controls.Callout.get_paddingLeft","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_paddingLeft,"feathers.controls.Callout","set_paddingLeft",0x15359c83,"feathers.controls.Callout.set_paddingLeft","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_paddingLeft,"feathers.controls.Callout","clearStyle_paddingLeft",0x2b98c275,"feathers.controls.Callout.clearStyle_paddingLeft","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_horizontalAlign,"feathers.controls.Callout","get_horizontalAlign",0xcb934fc0,"feathers.controls.Callout.get_horizontalAlign","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_horizontalAlign,"feathers.controls.Callout","set_horizontalAlign",0x083042cc,"feathers.controls.Callout.set_horizontalAlign","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_horizontalAlign,"feathers.controls.Callout","clearStyle_horizontalAlign",0xb68249be,"feathers.controls.Callout.clearStyle_horizontalAlign","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_verticalAlign,"feathers.controls.Callout","get_verticalAlign",0x405e712e,"feathers.controls.Callout.get_verticalAlign","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_verticalAlign,"feathers.controls.Callout","set_verticalAlign",0x63cc493a,"feathers.controls.Callout.set_verticalAlign","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_verticalAlign,"feathers.controls.Callout","clearStyle_verticalAlign",0x35ba4fac,"feathers.controls.Callout.clearStyle_verticalAlign","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_arrowPosition,"feathers.controls.Callout","get_arrowPosition",0x874a9a51,"feathers.controls.Callout.get_arrowPosition","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_arrowPosition,"feathers.controls.Callout","set_arrowPosition",0xaab8725d,"feathers.controls.Callout.set_arrowPosition","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_arrowPosition,"feathers.controls.Callout","clearStyle_arrowPosition",0x7ca678cf,"feathers.controls.Callout.clearStyle_arrowPosition","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_backgroundSkin,"feathers.controls.Callout","get_backgroundSkin",0x2a9579ec,"feathers.controls.Callout.get_backgroundSkin","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_backgroundSkin,"feathers.controls.Callout","set_backgroundSkin",0x0744ac60,"feathers.controls.Callout.set_backgroundSkin","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_backgroundSkin,"feathers.controls.Callout","clearStyle_backgroundSkin",0xe59c49ae,"feathers.controls.Callout.clearStyle_backgroundSkin","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_topArrowSkin,"feathers.controls.Callout","get_topArrowSkin",0xf564ddb2,"feathers.controls.Callout.get_topArrowSkin","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_topArrowSkin,"feathers.controls.Callout","set_topArrowSkin",0x4ba6cb26,"feathers.controls.Callout.set_topArrowSkin","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_topArrowSkin,"feathers.controls.Callout","clearStyle_topArrowSkin",0xcc04d8f4,"feathers.controls.Callout.clearStyle_topArrowSkin","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_rightArrowSkin,"feathers.controls.Callout","get_rightArrowSkin",0xf13361cb,"feathers.controls.Callout.get_rightArrowSkin","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_rightArrowSkin,"feathers.controls.Callout","set_rightArrowSkin",0xcde2943f,"feathers.controls.Callout.set_rightArrowSkin","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_rightArrowSkin,"feathers.controls.Callout","clearStyle_rightArrowSkin",0xac3a318d,"feathers.controls.Callout.clearStyle_rightArrowSkin","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_bottomArrowSkin,"feathers.controls.Callout","get_bottomArrowSkin",0x188dd8fa,"feathers.controls.Callout.get_bottomArrowSkin","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_bottomArrowSkin,"feathers.controls.Callout","set_bottomArrowSkin",0x552acc06,"feathers.controls.Callout.set_bottomArrowSkin","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_bottomArrowSkin,"feathers.controls.Callout","clearStyle_bottomArrowSkin",0x037cd2f8,"feathers.controls.Callout.clearStyle_bottomArrowSkin","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_leftArrowSkin,"feathers.controls.Callout","get_leftArrowSkin",0xddc6469e,"feathers.controls.Callout.get_leftArrowSkin","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_leftArrowSkin,"feathers.controls.Callout","set_leftArrowSkin",0x01341eaa,"feathers.controls.Callout.set_leftArrowSkin","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_leftArrowSkin,"feathers.controls.Callout","clearStyle_leftArrowSkin",0xd322251c,"feathers.controls.Callout.clearStyle_leftArrowSkin","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_topArrowGap,"feathers.controls.Callout","get_topArrowGap",0x799a5381,"feathers.controls.Callout.get_topArrowGap","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_topArrowGap,"feathers.controls.Callout","set_topArrowGap",0x7565d08d,"feathers.controls.Callout.set_topArrowGap","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_topArrowGap,"feathers.controls.Callout","clearStyle_topArrowGap",0x8bc8f67f,"feathers.controls.Callout.clearStyle_topArrowGap","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_rightArrowGap,"feathers.controls.Callout","get_rightArrowGap",0xc7a59588,"feathers.controls.Callout.get_rightArrowGap","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_rightArrowGap,"feathers.controls.Callout","set_rightArrowGap",0xeb136d94,"feathers.controls.Callout.set_rightArrowGap","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_rightArrowGap,"feathers.controls.Callout","clearStyle_rightArrowGap",0xbd017406,"feathers.controls.Callout.clearStyle_rightArrowGap","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_bottomArrowGap,"feathers.controls.Callout","get_bottomArrowGap",0x06f65939,"feathers.controls.Callout.get_bottomArrowGap","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_bottomArrowGap,"feathers.controls.Callout","set_bottomArrowGap",0xe3a58bad,"feathers.controls.Callout.set_bottomArrowGap","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_bottomArrowGap,"feathers.controls.Callout","clearStyle_bottomArrowGap",0xc1fd28fb,"feathers.controls.Callout.clearStyle_bottomArrowGap","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_85_get_leftArrowGap,"feathers.controls.Callout","get_leftArrowGap",0x1ece6c15,"feathers.controls.Callout.get_leftArrowGap","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_99_set_leftArrowGap,"feathers.controls.Callout","set_leftArrowGap",0x75105989,"feathers.controls.Callout.set_leftArrowGap","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_60893ffdea4f470b_131_clearStyle_leftArrowGap,"feathers.controls.Callout","clearStyle_leftArrowGap",0xf56e6757,"feathers.controls.Callout.clearStyle_leftArrowGap","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_a44c9ef2ec015b45_42_get_styleContext,"feathers.controls.Callout","get_styleContext",0xc6581adf,"feathers.controls.Callout.get_styleContext","feathers/macros/StyleContextMacro.hx",42,0xea61cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_92_show,"feathers.controls.Callout","show",0x5dbe6e95,"feathers.controls.Callout.show","feathers/controls/Callout.hx",92,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_99_showCallout,"feathers.controls.Callout","showCallout",0x0f22249b,"feathers.controls.Callout.showCallout","feathers/controls/Callout.hx",99,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_104_showCallout,"feathers.controls.Callout","showCallout",0x0f22249b,"feathers.controls.Callout.showCallout","feathers/controls/Callout.hx",104,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_116_positionBelowOrigin,"feathers.controls.Callout","positionBelowOrigin",0x90ca2ab6,"feathers.controls.Callout.positionBelowOrigin","feathers/controls/Callout.hx",116,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_153_positionAboveOrigin,"feathers.controls.Callout","positionAboveOrigin",0xebbf5822,"feathers.controls.Callout.positionAboveOrigin","feathers/controls/Callout.hx",153,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_190_positionLeftOfOrigin,"feathers.controls.Callout","positionLeftOfOrigin",0x4c880d65,"feathers.controls.Callout.positionLeftOfOrigin","feathers/controls/Callout.hx",190,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_227_positionRightOfOrigin,"feathers.controls.Callout","positionRightOfOrigin",0x189d3358,"feathers.controls.Callout.positionRightOfOrigin","feathers/controls/Callout.hx",227,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_67_boot,"feathers.controls.Callout","boot",0x52871dca,"feathers.controls.Callout.boot","feathers/controls/Callout.hx",67,0x5e94ee88)
HX_LOCAL_STACK_FRAME(_hx_pos_7a4dd787dae34c11_68_boot,"feathers.controls.Callout","boot",0x52871dca,"feathers.controls.Callout.boot","feathers/controls/Callout.hx",68,0x5e94ee88)
namespace feathers{
namespace controls{

void Callout_obj::__construct( ::openfl::display::DisplayObject content){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_67_new)
HXLINE( 712)		this->_hx___leftArrowGap = ((Float)0.0);
HXLINE( 697)		this->_hx___bottomArrowGap = ((Float)0.0);
HXLINE( 682)		this->_hx___rightArrowGap = ((Float)0.0);
HXLINE( 667)		this->_hx___topArrowGap = ((Float)0.0);
HXLINE( 652)		this->_hx___leftArrowSkin = null();
HXLINE( 636)		this->_hx___bottomArrowSkin = null();
HXLINE( 620)		this->_hx___rightArrowSkin = null();
HXLINE( 604)		this->_hx___topArrowSkin = null();
HXLINE( 586)		this->_hx___backgroundSkin = null();
HXLINE( 569)		this->_hx___arrowPosition = ::feathers::layout::RelativePosition_obj::TOP_dyn();
HXLINE( 558)		this->_hx___verticalAlign = ::feathers::layout::VerticalAlign_obj::MIDDLE_dyn();
HXLINE( 536)		this->_hx___horizontalAlign = ::feathers::layout::HorizontalAlign_obj::CENTER_dyn();
HXLINE( 514)		this->_hx___paddingLeft = ((Float)0.0);
HXLINE( 498)		this->_hx___paddingBottom = ((Float)0.0);
HXLINE( 482)		this->_hx___paddingRight = ((Float)0.0);
HXLINE( 466)		this->_hx___paddingTop = ((Float)0.0);
HXLINE( 451)		this->_hx___marginLeft = ((Float)0.0);
HXLINE( 437)		this->_hx___marginBottom = ((Float)0.0);
HXLINE( 423)		this->_hx___marginRight = ((Float)0.0);
HXLINE( 409)		this->_hx___marginTop = ((Float)0.0);
HXLINE( 395)		this->_hx___gap = ((Float)0.0);
HXLINE( 740)		this->closeOnPointerOutside = true;
HXLINE( 735)		this->_ignoreContentResize = false;
HXLINE( 714)		this->_arrowOffset = ((Float)0.0);
HXLINE( 276)		this->initializeCalloutTheme();
HXLINE( 278)		super::__construct();
HXLINE( 280)		this->set_content(content);
HXLINE( 282)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->callout_addedToStageHandler_dyn(),null(),null(),null());
HXLINE( 283)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->callout_removedFromStageHandler_dyn(),null(),null(),null());
            	}

Dynamic Callout_obj::__CreateEmpty() { return new Callout_obj; }

void *Callout_obj::_hx_vtable = 0;

Dynamic Callout_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Callout_obj > _hx_result = new Callout_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Callout_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4033f4be) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4033f4be;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			if (inClassId<=(int)0x58123034) {
				return inClassId==(int)0x4af7dd8e || inClassId==(int)0x58123034;
			} else {
				return inClassId==(int)0x6b353933;
			}
		} else {
			return inClassId==(int)0x6e6d822a;
		}
	}
}

 ::openfl::display::DisplayObject Callout_obj::get_content(){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_311_get_content)
HXDLIN( 311)		return this->_content;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_content,return )

 ::openfl::display::DisplayObject Callout_obj::set_content( ::openfl::display::DisplayObject value){
            	HX_GC_STACKFRAME(&_hx_pos_7a4dd787dae34c11_314_set_content)
HXLINE( 315)		if (::hx::IsInstanceEq( this->_content,value )) {
HXLINE( 316)			return this->_content;
            		}
HXLINE( 318)		if (::hx::IsNotNull( this->_content )) {
HXLINE( 319)			this->_content->removeEventListener(HX_("resize",f4,59,7b,08),this->callout_content_resizeHandler_dyn(),null());
HXLINE( 320)			this->_contentMeasurements->restore(this->_content);
HXLINE( 321)			if (::hx::IsInstanceEq( this->_content->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 322)				this->removeChild(this->_content);
            			}
            		}
HXLINE( 325)		this->_content = value;
HXLINE( 326)		if (::hx::IsNotNull( this->_content )) {
HXLINE( 327)			this->_content->addEventListener(HX_("resize",f4,59,7b,08),this->callout_content_resizeHandler_dyn(),false,0,true);
HXLINE( 328)			this->addChild(this->_content);
HXLINE( 329)			if (::Std_obj::isOfType(this->_content,::hx::ClassOf< ::feathers::core::IUIControl >())) {
HXLINE( 330)				::feathers::core::IUIControl_obj::initializeNow( ::hx::interface_check(this->_content,0x2696a04f));
            			}
HXLINE( 332)			if (::hx::IsNull( this->_contentMeasurements )) {
HXLINE( 333)				this->_contentMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,this->_content);
            			}
            			else {
HXLINE( 335)				this->_contentMeasurements->save(this->_content);
            			}
            		}
HXLINE( 338)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 339)		this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
HXLINE( 340)		return this->_content;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_content,return )

 ::openfl::display::DisplayObject Callout_obj::get_origin(){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_357_get_origin)
HXDLIN( 357)		return this->_origin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_origin,return )

 ::openfl::display::DisplayObject Callout_obj::set_origin( ::openfl::display::DisplayObject value){
            	HX_GC_STACKFRAME(&_hx_pos_7a4dd787dae34c11_360_set_origin)
HXLINE( 361)		if (::hx::IsInstanceEq( this->_origin,value )) {
HXLINE( 362)			return this->_origin;
            		}
HXLINE( 364)		bool _hx_tmp;
HXDLIN( 364)		if (::hx::IsNotNull( value )) {
HXLINE( 364)			_hx_tmp = ::hx::IsNull( value->stage );
            		}
            		else {
HXLINE( 364)			_hx_tmp = false;
            		}
HXDLIN( 364)		if (_hx_tmp) {
HXLINE( 365)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("origin must be added to the stage.",c4,f5,73,c8)));
            		}
HXLINE( 367)		if (::hx::IsNotNull( this->_origin )) {
HXLINE( 368)			this->_origin->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->callout_origin_removedFromStageHandler_dyn(),null());
HXLINE( 369)			this->removeEventListener(HX_("enterFrame",f5,03,50,02),this->callout_enterFrameHandler_dyn(),null());
            		}
HXLINE( 371)		this->_origin = value;
HXLINE( 372)		if (::hx::IsNotNull( this->_origin )) {
HXLINE( 373)			this->_origin->addEventListener(HX_("removedFromStage",34,21,76,ba),this->callout_origin_removedFromStageHandler_dyn(),null(),null(),null());
HXLINE( 374)			if (::hx::IsNotNull( this->stage )) {
HXLINE( 375)				this->addEventListener(HX_("enterFrame",f5,03,50,02),this->callout_enterFrameHandler_dyn(),null(),null(),null());
            			}
            		}
HXLINE( 378)		this->_lastPopUpOriginBounds = null();
HXLINE( 379)		this->setInvalid(::feathers::controls::Callout_obj::INVALIDATION_FLAG_ORIGIN);
HXLINE( 380)		return this->_origin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_origin,return )

void Callout_obj::close(){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_753_close)
HXDLIN( 753)		if (::hx::IsNotNull( this->parent )) {
HXLINE( 754)			this->parent->removeChild(::hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,close,(void))

void Callout_obj::setPadding(Float value){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_768_setPadding)
HXLINE( 769)		this->set_paddingTop(value);
HXLINE( 770)		this->set_paddingRight(value);
HXLINE( 771)		this->set_paddingBottom(value);
HXLINE( 772)		this->set_paddingLeft(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,setPadding,(void))

void Callout_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_775_dispose)
HXLINE( 776)		if (::hx::IsNotNull( this->_content )) {
HXLINE( 777)			this->set_content(null());
            		}
HXLINE( 779)		if (::hx::IsNotNull( this->_origin )) {
HXLINE( 780)			this->set_origin(null());
            		}
HXLINE( 782)		this->super::dispose();
            	}


void Callout_obj::initializeCalloutTheme(){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_787_initializeCalloutTheme)
HXDLIN( 787)		::feathers::themes::steel::components::SteelCalloutStyles_obj::initialize(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,initializeCalloutTheme,(void))

void Callout_obj::update(){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_791_update)
HXLINE( 792)		bool dataInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 793)		bool originInvalid = this->isInvalid(::feathers::controls::Callout_obj::INVALIDATION_FLAG_ORIGIN);
HXLINE( 794)		bool sizeInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
HXLINE( 795)		bool stateInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::STATE_dyn());
HXLINE( 796)		bool stylesInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 798)		if (sizeInvalid) {
HXLINE( 799)			this->_lastPopUpOriginBounds = null();
HXLINE( 800)			originInvalid = true;
            		}
HXLINE( 803)		bool _hx_tmp;
HXDLIN( 803)		if (!(stylesInvalid)) {
HXLINE( 803)			_hx_tmp = stateInvalid;
            		}
            		else {
HXLINE( 803)			_hx_tmp = true;
            		}
HXDLIN( 803)		if (_hx_tmp) {
HXLINE( 804)			this->refreshBackgroundSkin();
            		}
HXLINE( 807)		bool _hx_tmp1;
HXDLIN( 807)		if (!(stylesInvalid)) {
HXLINE( 807)			_hx_tmp1 = stateInvalid;
            		}
            		else {
HXLINE( 807)			_hx_tmp1 = true;
            		}
HXDLIN( 807)		if (_hx_tmp1) {
HXLINE( 808)			this->refreshArrowSkin();
            		}
HXLINE( 811)		if (originInvalid) {
HXLINE( 812)			this->positionRelativeToOrigin();
            		}
HXLINE( 815)		bool _hx_tmp2;
HXDLIN( 815)		if (!(stateInvalid)) {
HXLINE( 815)			_hx_tmp2 = dataInvalid;
            		}
            		else {
HXLINE( 815)			_hx_tmp2 = true;
            		}
HXDLIN( 815)		if (_hx_tmp2) {
HXLINE( 816)			this->refreshEnabled();
            		}
HXLINE( 819)		if (this->measure()) {
HXLINE( 819)			sizeInvalid = true;
            		}
HXLINE( 821)		this->layoutChildren();
            	}


bool Callout_obj::measure(){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_825_measure)
HXDLIN( 825)		return this->measureWithArrowPosition(this->get_arrowPosition());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,measure,return )

bool Callout_obj::measureWithArrowPosition( ::feathers::layout::RelativePosition arrowPosition){
            	HX_GC_STACKFRAME(&_hx_pos_7a4dd787dae34c11_828_measureWithArrowPosition)
HXLINE( 829)		bool needsWidth = ::hx::IsNull( this->get_explicitWidth() );
HXLINE( 830)		bool needsHeight = ::hx::IsNull( this->get_explicitHeight() );
HXLINE( 831)		bool needsMinWidth = ::hx::IsNull( this->get_explicitMinWidth() );
HXLINE( 832)		bool needsMinHeight = ::hx::IsNull( this->get_explicitMinHeight() );
HXLINE( 833)		bool needsMaxWidth = ::hx::IsNull( this->get_explicitMaxWidth() );
HXLINE( 834)		bool needsMaxHeight = ::hx::IsNull( this->get_explicitMaxHeight() );
HXLINE( 835)		bool _hx_tmp;
HXDLIN( 835)		bool _hx_tmp1;
HXDLIN( 835)		bool _hx_tmp2;
HXDLIN( 835)		bool _hx_tmp3;
HXDLIN( 835)		bool _hx_tmp4;
HXDLIN( 835)		if (!(needsWidth)) {
HXLINE( 835)			_hx_tmp4 = !(needsHeight);
            		}
            		else {
HXLINE( 835)			_hx_tmp4 = false;
            		}
HXDLIN( 835)		if (_hx_tmp4) {
HXLINE( 835)			_hx_tmp3 = !(needsMinWidth);
            		}
            		else {
HXLINE( 835)			_hx_tmp3 = false;
            		}
HXDLIN( 835)		if (_hx_tmp3) {
HXLINE( 835)			_hx_tmp2 = !(needsMinHeight);
            		}
            		else {
HXLINE( 835)			_hx_tmp2 = false;
            		}
HXDLIN( 835)		if (_hx_tmp2) {
HXLINE( 835)			_hx_tmp1 = !(needsMaxWidth);
            		}
            		else {
HXLINE( 835)			_hx_tmp1 = false;
            		}
HXDLIN( 835)		if (_hx_tmp1) {
HXLINE( 835)			_hx_tmp = !(needsMaxHeight);
            		}
            		else {
HXLINE( 835)			_hx_tmp = false;
            		}
HXDLIN( 835)		if (_hx_tmp) {
HXLINE( 836)			return false;
            		}
HXLINE( 839)		Float stageWidth = ((Float)0.0);
HXLINE( 840)		Float stageHeight = ((Float)0.0);
HXLINE( 841)		if (::hx::IsNotNull( this->stage )) {
HXLINE( 842)			 ::openfl::geom::Point stageTopLeft =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 843)			stageTopLeft = this->globalToLocal(stageTopLeft);
HXLINE( 845)			 ::openfl::geom::Point stageBottomRight =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->stage->stageWidth,this->stage->stageHeight);
HXLINE( 846)			stageBottomRight = this->globalToLocal(stageBottomRight);
HXLINE( 848)			stageWidth = (stageBottomRight->x - stageTopLeft->x);
HXLINE( 849)			stageHeight = (stageBottomRight->y - stageTopLeft->y);
            		}
HXLINE( 852)		 ::Dynamic maxWidthWithStage = this->get_explicitMaxWidth();
HXLINE( 853)		if (::hx::IsNotNull( this->stage )) {
HXLINE( 854)			Float stageMaxWidth = (stageWidth - this->get_marginLeft());
HXDLIN( 854)			Float stageMaxWidth1 = (stageMaxWidth - this->get_marginRight());
HXLINE( 855)			bool _hx_tmp5;
HXDLIN( 855)			if (::hx::IsNotNull( maxWidthWithStage )) {
HXLINE( 855)				_hx_tmp5 = ::hx::IsLess( maxWidthWithStage,stageMaxWidth1 );
            			}
            			else {
HXLINE( 855)				_hx_tmp5 = true;
            			}
HXDLIN( 855)			if (_hx_tmp5) {
HXLINE( 856)				maxWidthWithStage = stageMaxWidth1;
            			}
            		}
            		else {
HXLINE( 859)			maxWidthWithStage = ::hx::DivByZero(((Float)1.0));
            		}
HXLINE( 861)		 ::Dynamic maxHeightWithStage = this->get_explicitMaxHeight();
HXLINE( 862)		if (::hx::IsNotNull( this->stage )) {
HXLINE( 863)			Float stageMaxHeight = (stageHeight - this->get_marginTop());
HXDLIN( 863)			Float stageMaxHeight1 = (stageMaxHeight - this->get_marginBottom());
HXLINE( 864)			bool _hx_tmp6;
HXDLIN( 864)			if (::hx::IsNotNull( maxHeightWithStage )) {
HXLINE( 864)				_hx_tmp6 = ::hx::IsLess( maxHeightWithStage,stageMaxHeight1 );
            			}
            			else {
HXLINE( 864)				_hx_tmp6 = true;
            			}
HXDLIN( 864)			if (_hx_tmp6) {
HXLINE( 865)				maxHeightWithStage = stageMaxHeight1;
            			}
            		}
            		else {
HXLINE( 868)			maxHeightWithStage = ::hx::DivByZero(((Float)1.0));
            		}
HXLINE( 871)		if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 872)			 ::feathers::layout::Measurements _hx_tmp7 = this->_backgroundSkinMeasurements;
HXDLIN( 872)			 ::openfl::display::DisplayObject _hx_tmp8 = this->_currentBackgroundSkin;
HXDLIN( 872)			 ::Dynamic _hx_tmp9 = this->get_explicitWidth();
HXLINE( 873)			 ::Dynamic _hx_tmp10 = this->get_explicitHeight();
HXDLIN( 873)			 ::Dynamic _hx_tmp11 = this->get_explicitMinWidth();
HXLINE( 872)			::feathers::utils::MeasurementsUtil_obj::resetFluidlyWithParentValues(_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,this->get_explicitMinHeight(),maxWidthWithStage,maxHeightWithStage);
            		}
HXLINE( 876)		::Dynamic measureSkin = null();
HXLINE( 877)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,::hx::ClassOf< ::feathers::core::IMeasureObject >())) {
HXLINE( 878)			measureSkin =  ::hx::interface_check(this->_currentBackgroundSkin,0xcfc32883);
            		}
HXLINE( 881)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 882)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentBackgroundSkin,0x64d4b3cd));
            		}
HXLINE( 885)		if (::Std_obj::isOfType(this->get_topArrowSkin(),::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 886)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->get_topArrowSkin(),0x64d4b3cd));
            		}
HXLINE( 888)		if (::Std_obj::isOfType(this->get_rightArrowSkin(),::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 889)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->get_rightArrowSkin(),0x64d4b3cd));
            		}
HXLINE( 891)		if (::Std_obj::isOfType(this->get_bottomArrowSkin(),::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 892)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->get_bottomArrowSkin(),0x64d4b3cd));
            		}
HXLINE( 894)		if (::Std_obj::isOfType(this->get_leftArrowSkin(),::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 895)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->get_leftArrowSkin(),0x64d4b3cd));
            		}
HXLINE( 898)		Float leftOrRightArrowWidth = ((Float)0.0);
HXLINE( 899)		Float leftOrRightArrowHeight = ((Float)0.0);
HXLINE( 900)		Float topOrBottomArrowWidth = ((Float)0.0);
HXLINE( 901)		Float topOrBottomArrowHeight = ((Float)0.0);
HXLINE( 902)		if (::hx::IsNotNull( this->_currentArrowSkin )) {
HXLINE( 903)			switch((int)(arrowPosition->_hx_getIndex())){
            				case (int)1: {
HXLINE( 908)					Float leftOrRightArrowWidth1 = this->get_rightArrowSkin()->get_width();
HXDLIN( 908)					leftOrRightArrowWidth = (leftOrRightArrowWidth1 + this->get_rightArrowGap());
HXLINE( 909)					leftOrRightArrowHeight = this->get_rightArrowSkin()->get_height();
            				}
            				break;
            				case (int)2: {
HXLINE( 911)					topOrBottomArrowWidth = this->get_bottomArrowSkin()->get_width();
HXLINE( 912)					Float topOrBottomArrowHeight1 = this->get_bottomArrowSkin()->get_height();
HXDLIN( 912)					topOrBottomArrowHeight = (topOrBottomArrowHeight1 + this->get_bottomArrowGap());
            				}
            				break;
            				case (int)3: {
HXLINE( 905)					Float leftOrRightArrowWidth2 = this->get_leftArrowSkin()->get_width();
HXDLIN( 905)					leftOrRightArrowWidth = (leftOrRightArrowWidth2 + this->get_leftArrowGap());
HXLINE( 906)					leftOrRightArrowHeight = this->get_leftArrowSkin()->get_height();
            				}
            				break;
            				default:{
HXLINE( 914)					topOrBottomArrowWidth = this->get_topArrowSkin()->get_width();
HXLINE( 915)					Float topOrBottomArrowHeight2 = this->get_topArrowSkin()->get_height();
HXDLIN( 915)					topOrBottomArrowHeight = (topOrBottomArrowHeight2 + this->get_topArrowGap());
            				}
            			}
            		}
HXLINE( 919)		::Dynamic measureContent = null();
HXLINE( 920)		if (::Std_obj::isOfType(this->_content,::hx::ClassOf< ::feathers::core::IMeasureObject >())) {
HXLINE( 921)			measureContent =  ::hx::interface_check(this->_content,0xcfc32883);
            		}
HXLINE( 923)		if (::hx::IsNotNull( this->_content )) {
HXLINE( 924)			bool oldIgnoreContentResize = this->_ignoreContentResize;
HXLINE( 925)			this->_ignoreContentResize = true;
HXLINE( 926)			 ::feathers::layout::Measurements _hx_tmp12 = this->_contentMeasurements;
HXDLIN( 926)			 ::openfl::display::DisplayObject _hx_tmp13 = this->_content;
HXLINE( 927)			 ::Dynamic _hx_tmp14;
HXDLIN( 927)			if (::hx::IsNotNull( this->get_explicitWidth() )) {
HXLINE( 927)				Float _hx_tmp15 = (( (Float)(this->get_explicitWidth()) ) - leftOrRightArrowWidth);
HXDLIN( 927)				Float _hx_tmp16 = (_hx_tmp15 - this->get_paddingLeft());
HXDLIN( 927)				_hx_tmp14 = (_hx_tmp16 - this->get_paddingRight());
            			}
            			else {
HXLINE( 927)				_hx_tmp14 = null();
            			}
HXLINE( 931)			 ::Dynamic _hx_tmp17;
HXDLIN( 931)			if (::hx::IsNotNull( this->get_explicitHeight() )) {
HXLINE( 931)				Float _hx_tmp18 = (( (Float)(this->get_explicitHeight()) ) - topOrBottomArrowHeight);
HXDLIN( 931)				Float _hx_tmp19 = (_hx_tmp18 - this->get_paddingTop());
HXDLIN( 931)				_hx_tmp17 = (_hx_tmp19 - this->get_paddingBottom());
            			}
            			else {
HXLINE( 931)				_hx_tmp17 = null();
            			}
HXLINE( 935)			 ::Dynamic _hx_tmp20;
HXDLIN( 935)			if (::hx::IsNotNull( this->get_explicitMinWidth() )) {
HXLINE( 935)				Float _hx_tmp21 = (( (Float)(this->get_explicitMinWidth()) ) - leftOrRightArrowWidth);
HXDLIN( 935)				Float _hx_tmp22 = (_hx_tmp21 - this->get_paddingLeft());
HXDLIN( 935)				_hx_tmp20 = (_hx_tmp22 - this->get_paddingRight());
            			}
            			else {
HXLINE( 935)				_hx_tmp20 = null();
            			}
HXLINE( 939)			 ::Dynamic _hx_tmp23;
HXDLIN( 939)			if (::hx::IsNotNull( this->get_explicitMinHeight() )) {
HXLINE( 939)				Float _hx_tmp24 = (( (Float)(this->get_explicitMinHeight()) ) - topOrBottomArrowHeight);
HXDLIN( 939)				Float _hx_tmp25 = (_hx_tmp24 - this->get_paddingLeft());
HXDLIN( 939)				_hx_tmp23 = (_hx_tmp25 - this->get_paddingRight());
            			}
            			else {
HXLINE( 939)				_hx_tmp23 = null();
            			}
HXLINE( 943)			 ::Dynamic _hx_tmp26;
HXDLIN( 943)			if (::hx::IsNotNull( maxWidthWithStage )) {
HXLINE( 943)				Float _hx_tmp27 = ((( (Float)(maxWidthWithStage) ) - leftOrRightArrowWidth) - this->get_paddingLeft());
HXDLIN( 943)				_hx_tmp26 = (_hx_tmp27 - this->get_paddingRight());
            			}
            			else {
HXLINE( 943)				_hx_tmp26 = null();
            			}
HXLINE( 947)			 ::Dynamic _hx_tmp28;
HXDLIN( 947)			if (::hx::IsNotNull( maxHeightWithStage )) {
HXLINE( 947)				Float _hx_tmp29 = ((( (Float)(maxHeightWithStage) ) - topOrBottomArrowHeight) - this->get_paddingLeft());
HXDLIN( 947)				_hx_tmp28 = (_hx_tmp29 - this->get_paddingRight());
            			}
            			else {
HXLINE( 947)				_hx_tmp28 = null();
            			}
HXLINE( 926)			::feathers::utils::MeasurementsUtil_obj::resetFluidlyWithParentValues(_hx_tmp12,_hx_tmp13,_hx_tmp14,_hx_tmp17,_hx_tmp20,_hx_tmp23,_hx_tmp26,_hx_tmp28);
HXLINE( 951)			if (::Std_obj::isOfType(this->_content,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 952)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_content,0x64d4b3cd));
            			}
HXLINE( 954)			this->_ignoreContentResize = oldIgnoreContentResize;
            		}
HXLINE( 957)		 ::Dynamic newWidth = this->get_explicitWidth();
HXLINE( 958)		if (needsWidth) {
HXLINE( 959)			Float contentWidth = ((Float)0.0);
HXLINE( 960)			if (::hx::IsNotNull( this->_content )) {
HXLINE( 961)				contentWidth = this->_content->get_width();
            			}
HXLINE( 963)			if ((contentWidth < topOrBottomArrowWidth)) {
HXLINE( 964)				contentWidth = topOrBottomArrowWidth;
            			}
HXLINE( 966)			Float newWidth1 = (contentWidth + this->get_paddingLeft());
HXDLIN( 966)			newWidth = (newWidth1 + this->get_paddingRight());
HXLINE( 967)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 968)				Float backgroundWidth = this->_currentBackgroundSkin->get_width();
HXLINE( 969)				if (::hx::IsLess( newWidth,backgroundWidth )) {
HXLINE( 970)					newWidth = backgroundWidth;
            				}
            			}
HXLINE( 973)			newWidth = (newWidth + leftOrRightArrowWidth);
            		}
HXLINE( 975)		 ::Dynamic newHeight = this->get_explicitHeight();
HXLINE( 976)		if (needsHeight) {
HXLINE( 977)			Float contentHeight = ((Float)0.0);
HXLINE( 978)			if (::hx::IsNotNull( this->_content )) {
HXLINE( 979)				contentHeight = this->_content->get_height();
            			}
HXLINE( 981)			if ((contentHeight < leftOrRightArrowHeight)) {
HXLINE( 982)				contentHeight = leftOrRightArrowHeight;
            			}
HXLINE( 984)			Float newHeight1 = (contentHeight + this->get_paddingTop());
HXDLIN( 984)			newHeight = (newHeight1 + this->get_paddingBottom());
HXLINE( 985)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 986)				Float backgroundHeight = this->_currentBackgroundSkin->get_height();
HXLINE( 987)				if (::hx::IsLess( newHeight,backgroundHeight )) {
HXLINE( 988)					newHeight = backgroundHeight;
            				}
            			}
HXLINE( 991)			newHeight = (newHeight + topOrBottomArrowHeight);
            		}
HXLINE( 993)		 ::Dynamic newMinWidth = this->get_explicitMinWidth();
HXLINE( 994)		if (needsMinWidth) {
HXLINE( 995)			Float contentMinWidth = ((Float)0.0);
HXLINE( 996)			if (::hx::IsNotNull( measureContent )) {
HXLINE( 997)				contentMinWidth = ::feathers::core::IMeasureObject_obj::get_minWidth(measureContent);
            			}
            			else {
HXLINE( 998)				if (::hx::IsNotNull( this->_contentMeasurements )) {
HXLINE( 999)					contentMinWidth = ( (Float)(this->_contentMeasurements->minWidth) );
            				}
            			}
HXLINE(1001)			if ((contentMinWidth < topOrBottomArrowWidth)) {
HXLINE(1002)				contentMinWidth = topOrBottomArrowWidth;
            			}
HXLINE(1004)			Float newMinWidth1 = (contentMinWidth + this->get_paddingLeft());
HXDLIN(1004)			newMinWidth = (newMinWidth1 + this->get_paddingRight());
HXLINE(1005)			Float backgroundMinWidth = ((Float)0.0);
HXLINE(1006)			if (::hx::IsNotNull( measureSkin )) {
HXLINE(1007)				backgroundMinWidth = ::feathers::core::IMeasureObject_obj::get_minWidth(measureSkin);
            			}
            			else {
HXLINE(1008)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE(1009)					backgroundMinWidth = ( (Float)(this->_backgroundSkinMeasurements->minWidth) );
            				}
            			}
HXLINE(1011)			if (::hx::IsLess( newMinWidth,backgroundMinWidth )) {
HXLINE(1012)				newMinWidth = backgroundMinWidth;
            			}
HXLINE(1014)			newMinWidth = (newMinWidth + leftOrRightArrowWidth);
HXLINE(1015)			if (::hx::IsGreater( newMinWidth,maxWidthWithStage )) {
HXLINE(1016)				newMinWidth = maxWidthWithStage;
            			}
            		}
HXLINE(1019)		 ::Dynamic newMinHeight = this->get_explicitMinHeight();
HXLINE(1020)		if (needsMinHeight) {
HXLINE(1021)			Float contentMinHeight = ((Float)0.0);
HXLINE(1022)			if (::hx::IsNotNull( measureContent )) {
HXLINE(1023)				contentMinHeight = ::feathers::core::IMeasureObject_obj::get_minWidth(measureContent);
            			}
            			else {
HXLINE(1024)				if (::hx::IsNotNull( this->_contentMeasurements )) {
HXLINE(1025)					contentMinHeight = ( (Float)(this->_contentMeasurements->minHeight) );
            				}
            			}
HXLINE(1027)			if ((contentMinHeight < leftOrRightArrowHeight)) {
HXLINE(1028)				contentMinHeight = leftOrRightArrowHeight;
            			}
HXLINE(1030)			Float newMinHeight1 = (contentMinHeight + this->get_paddingTop());
HXDLIN(1030)			newMinHeight = (newMinHeight1 + this->get_paddingBottom());
HXLINE(1031)			Float backgroundMinHeight = ((Float)0.0);
HXLINE(1032)			if (::hx::IsNotNull( measureSkin )) {
HXLINE(1033)				backgroundMinHeight = ::feathers::core::IMeasureObject_obj::get_minHeight(measureSkin);
            			}
            			else {
HXLINE(1034)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE(1035)					backgroundMinHeight = ( (Float)(this->_backgroundSkinMeasurements->minHeight) );
            				}
            			}
HXLINE(1037)			if (::hx::IsLess( newMinHeight,backgroundMinHeight )) {
HXLINE(1038)				newMinHeight = backgroundMinHeight;
            			}
HXLINE(1040)			newMinHeight = (newMinHeight + topOrBottomArrowHeight);
HXLINE(1041)			if (::hx::IsGreater( newMinHeight,maxHeightWithStage )) {
HXLINE(1042)				newMinHeight = maxHeightWithStage;
            			}
            		}
HXLINE(1045)		 ::Dynamic newMaxWidth = maxWidthWithStage;
HXLINE(1046)		 ::Dynamic newMaxHeight = maxHeightWithStage;
HXLINE(1048)		return this->saveMeasurements(( (Float)(newWidth) ),( (Float)(newHeight) ),newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,measureWithArrowPosition,return )

 ::openfl::display::DisplayObject Callout_obj::getCurrentBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1052_getCurrentBackgroundSkin)
HXDLIN(1052)		return this->get_backgroundSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,getCurrentBackgroundSkin,return )

void Callout_obj::refreshBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1055_refreshBackgroundSkin)
HXLINE(1056)		 ::openfl::display::DisplayObject oldSkin = this->_currentBackgroundSkin;
HXLINE(1057)		this->_currentBackgroundSkin = this->getCurrentBackgroundSkin();
HXLINE(1058)		if (::hx::IsInstanceEq( this->_currentBackgroundSkin,oldSkin )) {
HXLINE(1059)			return;
            		}
HXLINE(1061)		this->removeCurrentBackgroundSkin(oldSkin);
HXLINE(1062)		this->addCurrentBackgroundSkin(this->_currentBackgroundSkin);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,refreshBackgroundSkin,(void))

void Callout_obj::addCurrentBackgroundSkin( ::openfl::display::DisplayObject skin){
            	HX_GC_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1065_addCurrentBackgroundSkin)
HXLINE(1066)		if (::hx::IsNull( skin )) {
HXLINE(1067)			this->_backgroundSkinMeasurements = null();
HXLINE(1068)			return;
            		}
HXLINE(1070)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::core::IUIControl >())) {
HXLINE(1071)			::feathers::core::IUIControl_obj::initializeNow( ::hx::interface_check(skin,0x2696a04f));
            		}
HXLINE(1073)		if (::hx::IsNull( this->_backgroundSkinMeasurements )) {
HXLINE(1074)			this->_backgroundSkinMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,skin);
            		}
            		else {
HXLINE(1076)			this->_backgroundSkinMeasurements->save(skin);
            		}
HXLINE(1078)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE(1079)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(skin,0x32a0d8d6),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1081)		this->addChildAt(skin,0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,addCurrentBackgroundSkin,(void))

void Callout_obj::removeCurrentBackgroundSkin( ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1084_removeCurrentBackgroundSkin)
HXLINE(1085)		if (::hx::IsNull( skin )) {
HXLINE(1086)			return;
            		}
HXLINE(1088)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE(1089)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(skin,0x32a0d8d6),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1093)		this->_backgroundSkinMeasurements->restore(skin);
HXLINE(1094)		if (::hx::IsInstanceEq( skin->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1095)			this->removeChild(skin);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,removeCurrentBackgroundSkin,(void))

void Callout_obj::refreshArrowSkin(){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1099_refreshArrowSkin)
HXLINE(1100)		 ::openfl::display::DisplayObject oldArrowSkin = this->_currentArrowSkin;
HXLINE(1101)		this->_currentArrowSkin = this->getCurrentArrowSkin();
HXLINE(1102)		if (::hx::IsInstanceEq( oldArrowSkin,this->_currentArrowSkin )) {
HXLINE(1103)			return;
            		}
HXLINE(1105)		this->removeCurrentArrowSkin(oldArrowSkin);
HXLINE(1106)		if (::Std_obj::isOfType(this->_currentArrowSkin,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE(1107)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(this->_currentArrowSkin,0x32a0d8d6),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1109)		this->addChild(this->_currentArrowSkin);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,refreshArrowSkin,(void))

 ::openfl::display::DisplayObject Callout_obj::getCurrentArrowSkin(){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1113_getCurrentArrowSkin)
HXDLIN(1113)		switch((int)(this->get_arrowPosition()->_hx_getIndex())){
            			case (int)1: {
HXLINE(1115)				return this->get_rightArrowSkin();
            			}
            			break;
            			case (int)2: {
HXLINE(1116)				return this->get_bottomArrowSkin();
            			}
            			break;
            			case (int)3: {
HXLINE(1114)				return this->get_leftArrowSkin();
            			}
            			break;
            			default:{
HXLINE(1117)				return this->get_topArrowSkin();
            			}
            		}
HXLINE(1113)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,getCurrentArrowSkin,return )

void Callout_obj::removeCurrentArrowSkin( ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1121_removeCurrentArrowSkin)
HXLINE(1122)		if (::hx::IsNull( skin )) {
HXLINE(1123)			return;
            		}
HXLINE(1125)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE(1126)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(skin,0x32a0d8d6),null());
            		}
HXLINE(1128)		if (::hx::IsInstanceEq( skin->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1129)			this->removeChild(skin);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,removeCurrentArrowSkin,(void))

void Callout_obj::refreshEnabled(){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1134_refreshEnabled)
HXDLIN(1134)		if (::Std_obj::isOfType(this->_content,::hx::ClassOf< ::feathers::core::IUIControl >())) {
HXLINE(1135)			::feathers::core::IUIControl_obj::set_enabled( ::hx::interface_check(this->_content,0x2696a04f),this->_enabled);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,refreshEnabled,(void))

void Callout_obj::layoutChildren(){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1139_layoutChildren)
HXLINE(1140)		if (::Std_obj::isOfType(this->_currentArrowSkin,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE(1141)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentArrowSkin,0x64d4b3cd));
            		}
HXLINE(1143)		Float xPosition = ((Float)0.0);
HXLINE(1144)		Float yPosition = ((Float)0.0);
HXLINE(1145)		Float widthOffset = ((Float)0.0);
HXLINE(1146)		Float heightOffset = ((Float)0.0);
HXLINE(1147)		if (::hx::IsNotNull( this->_currentArrowSkin )) {
HXLINE(1148)			switch((int)(this->get_arrowPosition()->_hx_getIndex())){
            				case (int)1: {
HXLINE(1152)					Float widthOffset1 = this->_currentArrowSkin->get_width();
HXDLIN(1152)					widthOffset = (widthOffset1 + this->get_rightArrowGap());
            				}
            				break;
            				case (int)2: {
HXLINE(1154)					Float heightOffset1 = this->_currentArrowSkin->get_height();
HXDLIN(1154)					heightOffset = (heightOffset1 + this->get_bottomArrowGap());
            				}
            				break;
            				case (int)3: {
HXLINE(1150)					Float xPosition1 = this->_currentArrowSkin->get_width();
HXDLIN(1150)					xPosition = (xPosition1 + this->get_leftArrowGap());
            				}
            				break;
            				default:{
HXLINE(1156)					Float yPosition1 = this->_currentArrowSkin->get_height();
HXDLIN(1156)					yPosition = (yPosition1 + this->get_topArrowGap());
            				}
            			}
            		}
HXLINE(1159)		Float backgroundWidth = ((this->actualWidth - xPosition) - widthOffset);
HXLINE(1160)		Float backgroundHeight = ((this->actualHeight - yPosition) - heightOffset);
HXLINE(1161)		if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE(1162)			this->_currentBackgroundSkin->set_x(xPosition);
HXLINE(1163)			this->_currentBackgroundSkin->set_y(yPosition);
HXLINE(1164)			this->_currentBackgroundSkin->set_width(backgroundWidth);
HXLINE(1165)			this->_currentBackgroundSkin->set_height(backgroundHeight);
            		}
HXLINE(1168)		if (::hx::IsNotNull( this->_currentArrowSkin )) {
HXLINE(1169)			Float contentWidth = (backgroundWidth - this->get_paddingLeft());
HXDLIN(1169)			Float contentWidth1 = (contentWidth - this->get_paddingRight());
HXLINE(1170)			Float contentHeight = (backgroundHeight - this->get_paddingTop());
HXDLIN(1170)			Float contentHeight1 = (contentHeight - this->get_paddingBottom());
HXLINE(1171)			switch((int)(this->get_arrowPosition()->_hx_getIndex())){
            				case (int)1: {
HXLINE(1191)					 ::openfl::display::DisplayObject _hx_tmp = this->get_rightArrowSkin();
HXDLIN(1191)					_hx_tmp->set_x(((xPosition + backgroundWidth) + this->get_rightArrowGap()));
HXLINE(1192)					Float rightArrowSkinY = (this->_arrowOffset + yPosition);
HXDLIN(1192)					Float rightArrowSkinY1 = (rightArrowSkinY + this->get_paddingTop());
HXLINE(1193)					if (::hx::IsPointerEq( this->get_verticalAlign(),::feathers::layout::VerticalAlign_obj::MIDDLE_dyn() )) {
HXLINE(1194)						rightArrowSkinY1 = (rightArrowSkinY1 + ::Math_obj::fround(((contentHeight1 - this->get_rightArrowSkin()->get_height()) / ((Float)2.0))));
            					}
            					else {
HXLINE(1195)						if (::hx::IsPointerEq( this->get_verticalAlign(),::feathers::layout::VerticalAlign_obj::BOTTOM_dyn() )) {
HXLINE(1196)							rightArrowSkinY1 = (rightArrowSkinY1 + (contentHeight1 - this->get_rightArrowSkin()->get_height()));
            						}
            					}
HXLINE(1198)					Float minRightArrowSkinY = (yPosition + this->get_paddingTop());
HXLINE(1199)					if ((minRightArrowSkinY > rightArrowSkinY1)) {
HXLINE(1200)						rightArrowSkinY1 = minRightArrowSkinY;
            					}
            					else {
HXLINE(1202)						Float maxRightArrowSkinY = ((yPosition + this->get_paddingTop()) + contentHeight1);
HXDLIN(1202)						Float maxRightArrowSkinY1 = (maxRightArrowSkinY - this->get_rightArrowSkin()->get_height());
HXLINE(1203)						if ((maxRightArrowSkinY1 < rightArrowSkinY1)) {
HXLINE(1204)							rightArrowSkinY1 = maxRightArrowSkinY1;
            						}
            					}
HXLINE(1207)					this->get_rightArrowSkin()->set_y(rightArrowSkinY1);
            				}
            				break;
            				case (int)2: {
HXLINE(1209)					Float bottomArrowSkinX = (this->_arrowOffset + xPosition);
HXDLIN(1209)					Float bottomArrowSkinX1 = (bottomArrowSkinX + this->get_paddingLeft());
HXLINE(1210)					if (::hx::IsPointerEq( this->get_horizontalAlign(),::feathers::layout::HorizontalAlign_obj::CENTER_dyn() )) {
HXLINE(1211)						bottomArrowSkinX1 = (bottomArrowSkinX1 + ::Math_obj::fround(((contentWidth1 - this->get_bottomArrowSkin()->get_width()) / ((Float)2.0))));
            					}
            					else {
HXLINE(1212)						if (::hx::IsPointerEq( this->get_horizontalAlign(),::feathers::layout::HorizontalAlign_obj::RIGHT_dyn() )) {
HXLINE(1213)							bottomArrowSkinX1 = (bottomArrowSkinX1 + (contentWidth1 - this->get_bottomArrowSkin()->get_width()));
            						}
            					}
HXLINE(1215)					Float minBottomArrowSkinX = (xPosition + this->get_paddingLeft());
HXLINE(1216)					if ((minBottomArrowSkinX > bottomArrowSkinX1)) {
HXLINE(1217)						bottomArrowSkinX1 = minBottomArrowSkinX;
            					}
            					else {
HXLINE(1219)						Float maxBottomArrowSkinX = ((xPosition + this->get_paddingLeft()) + contentWidth1);
HXDLIN(1219)						Float maxBottomArrowSkinX1 = (maxBottomArrowSkinX - this->get_bottomArrowSkin()->get_width());
HXLINE(1220)						if ((maxBottomArrowSkinX1 < bottomArrowSkinX1)) {
HXLINE(1221)							bottomArrowSkinX1 = maxBottomArrowSkinX1;
            						}
            					}
HXLINE(1224)					this->get_bottomArrowSkin()->set_x(bottomArrowSkinX1);
HXLINE(1225)					 ::openfl::display::DisplayObject _hx_tmp1 = this->get_bottomArrowSkin();
HXDLIN(1225)					_hx_tmp1->set_y(((yPosition + backgroundHeight) + this->get_bottomArrowGap()));
            				}
            				break;
            				case (int)3: {
HXLINE(1173)					 ::openfl::display::DisplayObject _hx_tmp2 = this->get_leftArrowSkin();
HXDLIN(1173)					Float _hx_tmp3 = (xPosition - this->get_leftArrowSkin()->get_width());
HXDLIN(1173)					_hx_tmp2->set_x((_hx_tmp3 - this->get_leftArrowGap()));
HXLINE(1174)					Float leftArrowSkinY = (this->_arrowOffset + yPosition);
HXDLIN(1174)					Float leftArrowSkinY1 = (leftArrowSkinY + this->get_paddingTop());
HXLINE(1175)					if (::hx::IsPointerEq( this->get_verticalAlign(),::feathers::layout::VerticalAlign_obj::MIDDLE_dyn() )) {
HXLINE(1176)						leftArrowSkinY1 = (leftArrowSkinY1 + ::Math_obj::fround(((contentHeight1 - this->get_leftArrowSkin()->get_height()) / ((Float)2.0))));
            					}
            					else {
HXLINE(1177)						if (::hx::IsPointerEq( this->get_verticalAlign(),::feathers::layout::VerticalAlign_obj::BOTTOM_dyn() )) {
HXLINE(1178)							leftArrowSkinY1 = (leftArrowSkinY1 + (contentHeight1 - this->get_leftArrowSkin()->get_height()));
            						}
            					}
HXLINE(1180)					Float minLeftArrowSkinY = (yPosition + this->get_paddingTop());
HXLINE(1181)					if ((minLeftArrowSkinY > leftArrowSkinY1)) {
HXLINE(1182)						leftArrowSkinY1 = minLeftArrowSkinY;
            					}
            					else {
HXLINE(1184)						Float maxLeftArrowSkinY = ((yPosition + this->get_paddingTop()) + contentHeight1);
HXDLIN(1184)						Float maxLeftArrowSkinY1 = (maxLeftArrowSkinY - this->get_leftArrowSkin()->get_height());
HXLINE(1185)						if ((maxLeftArrowSkinY1 < leftArrowSkinY1)) {
HXLINE(1186)							leftArrowSkinY1 = maxLeftArrowSkinY1;
            						}
            					}
HXLINE(1189)					this->get_leftArrowSkin()->set_y(leftArrowSkinY1);
            				}
            				break;
            				default:{
HXLINE(1227)					Float topArrowSkinX = (this->_arrowOffset + xPosition);
HXDLIN(1227)					Float topArrowSkinX1 = (topArrowSkinX + this->get_paddingLeft());
HXLINE(1228)					if (::hx::IsPointerEq( this->get_horizontalAlign(),::feathers::layout::HorizontalAlign_obj::CENTER_dyn() )) {
HXLINE(1229)						topArrowSkinX1 = (topArrowSkinX1 + ::Math_obj::fround(((contentWidth1 - this->get_topArrowSkin()->get_width()) / ((Float)2.0))));
            					}
            					else {
HXLINE(1230)						if (::hx::IsPointerEq( this->get_horizontalAlign(),::feathers::layout::HorizontalAlign_obj::RIGHT_dyn() )) {
HXLINE(1231)							topArrowSkinX1 = (topArrowSkinX1 + (contentWidth1 - this->get_topArrowSkin()->get_width()));
            						}
            					}
HXLINE(1233)					Float minTopArrowSkinX = (xPosition + this->get_paddingLeft());
HXLINE(1234)					if ((minTopArrowSkinX > topArrowSkinX1)) {
HXLINE(1235)						topArrowSkinX1 = minTopArrowSkinX;
            					}
            					else {
HXLINE(1237)						Float maxTopArrowSkinX = ((xPosition + this->get_paddingLeft()) + contentWidth1);
HXDLIN(1237)						Float maxTopArrowSkinX1 = (maxTopArrowSkinX - this->get_topArrowSkin()->get_width());
HXLINE(1238)						if ((maxTopArrowSkinX1 < topArrowSkinX1)) {
HXLINE(1239)							topArrowSkinX1 = maxTopArrowSkinX1;
            						}
            					}
HXLINE(1242)					this->get_topArrowSkin()->set_x(topArrowSkinX1);
HXLINE(1243)					 ::openfl::display::DisplayObject _hx_tmp4 = this->get_topArrowSkin();
HXDLIN(1243)					Float _hx_tmp5 = (yPosition - this->get_topArrowSkin()->get_height());
HXDLIN(1243)					_hx_tmp4->set_y((_hx_tmp5 - this->get_topArrowGap()));
            				}
            			}
            		}
HXLINE(1247)		if (::hx::IsNotNull( this->_content )) {
HXLINE(1248)			 ::openfl::display::DisplayObject _hx_tmp6 = this->_content;
HXDLIN(1248)			_hx_tmp6->set_x((xPosition + this->get_paddingLeft()));
HXLINE(1249)			 ::openfl::display::DisplayObject _hx_tmp7 = this->_content;
HXDLIN(1249)			_hx_tmp7->set_y((yPosition + this->get_paddingTop()));
HXLINE(1250)			bool oldIgnoreContentResize = this->_ignoreContentResize;
HXLINE(1251)			this->_ignoreContentResize = true;
HXLINE(1252)			 ::openfl::display::DisplayObject _hx_tmp8 = this->_content;
HXDLIN(1252)			Float _hx_tmp9 = (backgroundWidth - this->get_paddingLeft());
HXDLIN(1252)			_hx_tmp8->set_width((_hx_tmp9 - this->get_paddingRight()));
HXLINE(1253)			 ::openfl::display::DisplayObject _hx_tmp10 = this->_content;
HXDLIN(1253)			Float _hx_tmp11 = (backgroundHeight - this->get_paddingTop());
HXDLIN(1253)			_hx_tmp10->set_height((_hx_tmp11 - this->get_paddingBottom()));
HXLINE(1254)			if (::Std_obj::isOfType(this->_content,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE(1255)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_content,0x64d4b3cd));
            			}
HXLINE(1257)			this->_ignoreContentResize = oldIgnoreContentResize;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,layoutChildren,(void))

bool Callout_obj::checkForOriginMoved(){
            	HX_GC_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1261_checkForOriginMoved)
HXLINE(1262)		if (::hx::IsNull( this->_origin )) {
HXLINE(1263)			if (::hx::IsNull( this->_lastPopUpOriginBounds )) {
HXLINE(1264)				this->_lastPopUpOriginBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
            			else {
HXLINE(1266)				this->_lastPopUpOriginBounds->setEmpty();
            			}
HXLINE(1268)			return false;
            		}
HXLINE(1270)		 ::openfl::display::DisplayObjectContainer popUpRoot = ::feathers::core::IPopUpManager_obj::get_root(::feathers::core::PopUpManager_obj::forStage(this->stage));
HXLINE(1276)		Float originTopLeft = this->get_origin()->get_x();
HXDLIN(1276)		 ::openfl::geom::Point originTopLeft1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,originTopLeft,this->get_origin()->get_y());
HXLINE(1277)		originTopLeft1 = this->get_origin()->parent->localToGlobal(originTopLeft1);
HXLINE(1278)		originTopLeft1 = popUpRoot->globalToLocal(originTopLeft1);
HXLINE(1280)		Float originBottomRight = this->get_origin()->get_x();
HXDLIN(1280)		Float originBottomRight1 = (originBottomRight + this->get_origin()->get_width());
HXDLIN(1280)		Float originBottomRight2 = this->get_origin()->get_y();
HXDLIN(1280)		 ::openfl::geom::Point originBottomRight3 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,originBottomRight1,(originBottomRight2 + this->get_origin()->get_height()));
HXLINE(1281)		originBottomRight3 = this->get_origin()->parent->localToGlobal(originBottomRight3);
HXLINE(1282)		originBottomRight3 = popUpRoot->globalToLocal(originBottomRight3);
HXLINE(1284)		 ::openfl::geom::Rectangle bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,originTopLeft1->x,originTopLeft1->y,(originBottomRight3->x - originTopLeft1->x),(originBottomRight3->y - originTopLeft1->y));
HXLINE(1287)		bool hasPopUpBounds = ::hx::IsNotNull( this->_lastPopUpOriginBounds );
HXLINE(1288)		bool _hx_tmp;
HXDLIN(1288)		if (hasPopUpBounds) {
HXLINE(1288)			_hx_tmp = this->_lastPopUpOriginBounds->equals(bounds);
            		}
            		else {
HXLINE(1288)			_hx_tmp = false;
            		}
HXDLIN(1288)		if (_hx_tmp) {
HXLINE(1289)			return false;
            		}
HXLINE(1291)		this->_lastPopUpOriginBounds = bounds;
HXLINE(1292)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,checkForOriginMoved,return )

void Callout_obj::positionRelativeToOrigin(){
            	HX_GC_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1295_positionRelativeToOrigin)
HXLINE(1297)		this->checkForOriginMoved();
HXLINE(1299)		 ::openfl::display::DisplayObjectContainer popUpRoot = ::feathers::core::IPopUpManager_obj::get_root(::feathers::core::PopUpManager_obj::forStage(this->stage));
HXLINE(1300)		 ::openfl::geom::Point stageBottomRight =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->stage->stageWidth,this->stage->stageHeight);
HXLINE(1301)		stageBottomRight = popUpRoot->globalToLocal(stageBottomRight);
HXLINE(1303)		Float upSpace = ::Math_obj::NEGATIVE_INFINITY;
HXLINE(1304)		Float downSpace = ::Math_obj::NEGATIVE_INFINITY;
HXLINE(1305)		Float rightSpace = ::Math_obj::NEGATIVE_INFINITY;
HXLINE(1306)		Float leftSpace = ::Math_obj::NEGATIVE_INFINITY;
HXLINE(1307)		::Array< ::Dynamic> positions = this->supportedPositions;
HXLINE(1308)		if (::hx::IsNull( positions )) {
HXLINE(1309)			positions = ::Array_obj< ::Dynamic>::__new(4)->init(0,::feathers::layout::RelativePosition_obj::BOTTOM_dyn())->init(1,::feathers::layout::RelativePosition_obj::TOP_dyn())->init(2,::feathers::layout::RelativePosition_obj::RIGHT_dyn())->init(3,::feathers::layout::RelativePosition_obj::LEFT_dyn());
            		}
HXLINE(1311)		{
HXLINE(1311)			int _g = 0;
HXDLIN(1311)			while((_g < positions->length)){
HXLINE(1311)				 ::feathers::layout::RelativePosition position = positions->__get(_g).StaticCast<  ::feathers::layout::RelativePosition >();
HXDLIN(1311)				_g = (_g + 1);
HXLINE(1312)				switch((int)(position->_hx_getIndex())){
            					case (int)0: {
HXLINE(1316)						this->measureWithArrowPosition(::feathers::layout::RelativePosition_obj::BOTTOM_dyn());
HXLINE(1317)						upSpace = (this->_lastPopUpOriginBounds->y - this->actualHeight);
HXLINE(1318)						if ((upSpace >= this->get_marginTop())) {
HXLINE(1319)							::feathers::controls::Callout_obj::positionAboveOrigin(::hx::ObjectPtr<OBJ_>(this),this->_lastPopUpOriginBounds);
HXLINE(1320)							return;
            						}
HXLINE(1322)						if ((upSpace < ((Float)0.0))) {
HXLINE(1323)							upSpace = ((Float)0.0);
            						}
            					}
            					break;
            					case (int)1: {
HXLINE(1329)						this->measureWithArrowPosition(::feathers::layout::RelativePosition_obj::LEFT_dyn());
HXLINE(1330)						rightSpace = ((stageBottomRight->x - this->actualWidth) - (this->_lastPopUpOriginBounds->x + this->_lastPopUpOriginBounds->width));
HXLINE(1331)						if ((rightSpace >= this->get_marginRight())) {
HXLINE(1332)							::feathers::controls::Callout_obj::positionRightOfOrigin(::hx::ObjectPtr<OBJ_>(this),this->_lastPopUpOriginBounds);
HXLINE(1333)							return;
            						}
HXLINE(1335)						if ((rightSpace < ((Float)0.0))) {
HXLINE(1336)							rightSpace = ((Float)0.0);
            						}
            					}
            					break;
            					case (int)3: {
HXLINE(1342)						this->measureWithArrowPosition(::feathers::layout::RelativePosition_obj::RIGHT_dyn());
HXLINE(1343)						leftSpace = (this->_lastPopUpOriginBounds->x - this->actualWidth);
HXLINE(1344)						if ((leftSpace >= this->get_marginLeft())) {
HXLINE(1345)							::feathers::controls::Callout_obj::positionLeftOfOrigin(::hx::ObjectPtr<OBJ_>(this),this->_lastPopUpOriginBounds);
HXLINE(1346)							return;
            						}
HXLINE(1348)						if ((leftSpace < ((Float)0.0))) {
HXLINE(1349)							leftSpace = ((Float)0.0);
            						}
            					}
            					break;
            					default:{
HXLINE(1355)						this->measureWithArrowPosition(::feathers::layout::RelativePosition_obj::TOP_dyn());
HXLINE(1356)						downSpace = ((stageBottomRight->y - this->actualHeight) - (this->_lastPopUpOriginBounds->y + this->_lastPopUpOriginBounds->height));
HXLINE(1357)						if ((downSpace >= this->get_marginBottom())) {
HXLINE(1358)							::feathers::controls::Callout_obj::positionBelowOrigin(::hx::ObjectPtr<OBJ_>(this),this->_lastPopUpOriginBounds);
HXLINE(1359)							return;
            						}
HXLINE(1361)						if ((downSpace < ((Float)0.0))) {
HXLINE(1362)							downSpace = ((Float)0.0);
            						}
            					}
            				}
            			}
            		}
HXLINE(1367)		bool _hx_tmp;
HXDLIN(1367)		bool _hx_tmp1;
HXDLIN(1367)		bool _hx_tmp2;
HXDLIN(1367)		if ((downSpace != ::Math_obj::NEGATIVE_INFINITY)) {
HXLINE(1367)			_hx_tmp2 = (downSpace >= upSpace);
            		}
            		else {
HXLINE(1367)			_hx_tmp2 = false;
            		}
HXDLIN(1367)		if (_hx_tmp2) {
HXLINE(1367)			_hx_tmp1 = (downSpace >= rightSpace);
            		}
            		else {
HXLINE(1367)			_hx_tmp1 = false;
            		}
HXDLIN(1367)		if (_hx_tmp1) {
HXLINE(1367)			_hx_tmp = (downSpace >= leftSpace);
            		}
            		else {
HXLINE(1367)			_hx_tmp = false;
            		}
HXDLIN(1367)		if (_hx_tmp) {
HXLINE(1368)			::feathers::controls::Callout_obj::positionBelowOrigin(::hx::ObjectPtr<OBJ_>(this),this->_lastPopUpOriginBounds);
            		}
            		else {
HXLINE(1369)			bool _hx_tmp3;
HXDLIN(1369)			bool _hx_tmp4;
HXDLIN(1369)			if ((upSpace != ::Math_obj::NEGATIVE_INFINITY)) {
HXLINE(1369)				_hx_tmp4 = (upSpace >= rightSpace);
            			}
            			else {
HXLINE(1369)				_hx_tmp4 = false;
            			}
HXDLIN(1369)			if (_hx_tmp4) {
HXLINE(1369)				_hx_tmp3 = (upSpace >= leftSpace);
            			}
            			else {
HXLINE(1369)				_hx_tmp3 = false;
            			}
HXDLIN(1369)			if (_hx_tmp3) {
HXLINE(1370)				::feathers::controls::Callout_obj::positionAboveOrigin(::hx::ObjectPtr<OBJ_>(this),this->_lastPopUpOriginBounds);
            			}
            			else {
HXLINE(1371)				bool _hx_tmp5;
HXDLIN(1371)				if ((rightSpace != ::Math_obj::NEGATIVE_INFINITY)) {
HXLINE(1371)					_hx_tmp5 = (rightSpace >= leftSpace);
            				}
            				else {
HXLINE(1371)					_hx_tmp5 = false;
            				}
HXDLIN(1371)				if (_hx_tmp5) {
HXLINE(1372)					::feathers::controls::Callout_obj::positionRightOfOrigin(::hx::ObjectPtr<OBJ_>(this),this->_lastPopUpOriginBounds);
            				}
            				else {
HXLINE(1373)					if ((leftSpace != ::Math_obj::NEGATIVE_INFINITY)) {
HXLINE(1374)						::feathers::controls::Callout_obj::positionLeftOfOrigin(::hx::ObjectPtr<OBJ_>(this),this->_lastPopUpOriginBounds);
            					}
            					else {
HXLINE(1376)						::feathers::controls::Callout_obj::positionBelowOrigin(::hx::ObjectPtr<OBJ_>(this),this->_lastPopUpOriginBounds);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,positionRelativeToOrigin,(void))

void Callout_obj::callout_addedToStageHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1380_callout_addedToStageHandler)
HXLINE(1381)		this->stage->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->callout_stage_mouseDownHandler_dyn(),false,0,true);
HXLINE(1382)		this->stage->addEventListener(HX_("touchBegin",ea,cd,e6,a9),this->callout_stage_touchBeginHandler_dyn(),false,0,true);
HXLINE(1383)		if (::hx::IsNotNull( this->_origin )) {
HXLINE(1384)			this->addEventListener(HX_("enterFrame",f5,03,50,02),this->callout_enterFrameHandler_dyn(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,callout_addedToStageHandler,(void))

void Callout_obj::callout_removedFromStageHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1388_callout_removedFromStageHandler)
HXLINE(1389)		this->stage->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->callout_stage_mouseDownHandler_dyn(),null());
HXLINE(1390)		this->stage->removeEventListener(HX_("touchBegin",ea,cd,e6,a9),this->callout_stage_touchBeginHandler_dyn(),null());
HXLINE(1391)		this->removeEventListener(HX_("enterFrame",f5,03,50,02),this->callout_enterFrameHandler_dyn(),null());
HXLINE(1393)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("close",b8,17,63,48),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,callout_removedFromStageHandler,(void))

void Callout_obj::callout_enterFrameHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1396_callout_enterFrameHandler)
HXLINE(1397)		if (!(this->checkForOriginMoved())) {
HXLINE(1398)			return;
            		}
HXLINE(1400)		this->setInvalid(::feathers::controls::Callout_obj::INVALIDATION_FLAG_ORIGIN);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,callout_enterFrameHandler,(void))

void Callout_obj::callout_origin_removedFromStageHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1404_callout_origin_removedFromStageHandler)
HXDLIN(1404)		this->close();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,callout_origin_removedFromStageHandler,(void))

void Callout_obj::callout_content_resizeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1407_callout_content_resizeHandler)
HXLINE(1408)		if (this->_ignoreContentResize) {
HXLINE(1409)			return;
            		}
HXLINE(1411)		 ::feathers::layout::Measurements _hx_tmp = this->_contentMeasurements;
HXDLIN(1411)		_hx_tmp->save(this->get_content());
HXLINE(1412)		this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,callout_content_resizeHandler,(void))

void Callout_obj::callout_stage_mouseDownHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1415_callout_stage_mouseDownHandler)
HXLINE(1416)		if (!(this->closeOnPointerOutside)) {
HXLINE(1417)			return;
            		}
HXLINE(1419)		if (this->hitTestPoint(event->stageX,event->stageY,null())) {
HXLINE(1420)			return;
            		}
HXLINE(1422)		this->close();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,callout_stage_mouseDownHandler,(void))

void Callout_obj::callout_stage_touchBeginHandler( ::openfl::events::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_1425_callout_stage_touchBeginHandler)
HXLINE(1426)		if (event->isPrimaryTouchPoint) {
HXLINE(1428)			return;
            		}
HXLINE(1430)		if (!(this->closeOnPointerOutside)) {
HXLINE(1431)			return;
            		}
HXLINE(1433)		if (this->hitTestPoint(event->stageX,event->stageY,null())) {
HXLINE(1434)			return;
            		}
HXLINE(1436)		this->close();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,callout_stage_touchBeginHandler,(void))

Float Callout_obj::get_gap(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_gap)
HXDLIN(  85)		return this->_hx___gap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_gap,return )

Float Callout_obj::set_gap(Float value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_gap)
HXLINE( 106)		if (!(this->setStyle(HX_("gap",16,7d,4e,00),null()))) {
HXLINE( 107)			return this->_hx___gap;
            		}
HXLINE( 109)		if ((this->_hx___gap == value)) {
HXLINE( 110)			return this->_hx___gap;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_gap_dyn();
HXLINE( 116)		this->_hx___gap = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___gap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_gap,return )

Float Callout_obj::clearStyle_gap(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_gap)
HXLINE( 132)		this->set_gap(((Float)0.0));
HXLINE( 133)		return this->get_gap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_gap,return )

Float Callout_obj::get_marginTop(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_marginTop)
HXDLIN(  85)		return this->_hx___marginTop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_marginTop,return )

Float Callout_obj::set_marginTop(Float value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_marginTop)
HXLINE( 106)		if (!(this->setStyle(HX_("marginTop",07,7f,40,ee),null()))) {
HXLINE( 107)			return this->_hx___marginTop;
            		}
HXLINE( 109)		if ((this->_hx___marginTop == value)) {
HXLINE( 110)			return this->_hx___marginTop;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_marginTop_dyn();
HXLINE( 116)		this->_hx___marginTop = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___marginTop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_marginTop,return )

Float Callout_obj::clearStyle_marginTop(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_marginTop)
HXLINE( 132)		this->set_marginTop(((Float)0.0));
HXLINE( 133)		return this->get_marginTop();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_marginTop,return )

Float Callout_obj::get_marginRight(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_marginRight)
HXDLIN(  85)		return this->_hx___marginRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_marginRight,return )

Float Callout_obj::set_marginRight(Float value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_marginRight)
HXLINE( 106)		if (!(this->setStyle(HX_("marginRight",ce,a4,d8,33),null()))) {
HXLINE( 107)			return this->_hx___marginRight;
            		}
HXLINE( 109)		if ((this->_hx___marginRight == value)) {
HXLINE( 110)			return this->_hx___marginRight;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_marginRight_dyn();
HXLINE( 116)		this->_hx___marginRight = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___marginRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_marginRight,return )

Float Callout_obj::clearStyle_marginRight(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_marginRight)
HXLINE( 132)		this->set_marginRight(((Float)0.0));
HXLINE( 133)		return this->get_marginRight();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_marginRight,return )

Float Callout_obj::get_marginBottom(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_marginBottom)
HXDLIN(  85)		return this->_hx___marginBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_marginBottom,return )

Float Callout_obj::set_marginBottom(Float value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_marginBottom)
HXLINE( 106)		if (!(this->setStyle(HX_("marginBottom",b9,21,0a,41),null()))) {
HXLINE( 107)			return this->_hx___marginBottom;
            		}
HXLINE( 109)		if ((this->_hx___marginBottom == value)) {
HXLINE( 110)			return this->_hx___marginBottom;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_marginBottom_dyn();
HXLINE( 116)		this->_hx___marginBottom = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___marginBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_marginBottom,return )

Float Callout_obj::clearStyle_marginBottom(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_marginBottom)
HXLINE( 132)		this->set_marginBottom(((Float)0.0));
HXLINE( 133)		return this->get_marginBottom();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_marginBottom,return )

Float Callout_obj::get_marginLeft(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_marginLeft)
HXDLIN(  85)		return this->_hx___marginLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_marginLeft,return )

Float Callout_obj::set_marginLeft(Float value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_marginLeft)
HXLINE( 106)		if (!(this->setStyle(HX_("marginLeft",55,53,dd,84),null()))) {
HXLINE( 107)			return this->_hx___marginLeft;
            		}
HXLINE( 109)		if ((this->_hx___marginLeft == value)) {
HXLINE( 110)			return this->_hx___marginLeft;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_marginLeft_dyn();
HXLINE( 116)		this->_hx___marginLeft = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___marginLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_marginLeft,return )

Float Callout_obj::clearStyle_marginLeft(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_marginLeft)
HXLINE( 132)		this->set_marginLeft(((Float)0.0));
HXLINE( 133)		return this->get_marginLeft();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_marginLeft,return )

Float Callout_obj::get_paddingTop(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_paddingTop)
HXDLIN(  85)		return this->_hx___paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_paddingTop,return )

Float Callout_obj::set_paddingTop(Float value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_paddingTop)
HXLINE( 106)		if (!(this->setStyle(HX_("paddingTop",44,fd,05,3a),null()))) {
HXLINE( 107)			return this->_hx___paddingTop;
            		}
HXLINE( 109)		if ((this->_hx___paddingTop == value)) {
HXLINE( 110)			return this->_hx___paddingTop;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_paddingTop_dyn();
HXLINE( 116)		this->_hx___paddingTop = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_paddingTop,return )

Float Callout_obj::clearStyle_paddingTop(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_paddingTop)
HXLINE( 132)		this->set_paddingTop(((Float)0.0));
HXLINE( 133)		return this->get_paddingTop();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_paddingTop,return )

Float Callout_obj::get_paddingRight(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_paddingRight)
HXDLIN(  85)		return this->_hx___paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_paddingRight,return )

Float Callout_obj::set_paddingRight(Float value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_paddingRight)
HXLINE( 106)		if (!(this->setStyle(HX_("paddingRight",4b,ec,a7,1a),null()))) {
HXLINE( 107)			return this->_hx___paddingRight;
            		}
HXLINE( 109)		if ((this->_hx___paddingRight == value)) {
HXLINE( 110)			return this->_hx___paddingRight;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_paddingRight_dyn();
HXLINE( 116)		this->_hx___paddingRight = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_paddingRight,return )

Float Callout_obj::clearStyle_paddingRight(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_paddingRight)
HXLINE( 132)		this->set_paddingRight(((Float)0.0));
HXLINE( 133)		return this->get_paddingRight();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_paddingRight,return )

Float Callout_obj::get_paddingBottom(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_paddingBottom)
HXDLIN(  85)		return this->_hx___paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_paddingBottom,return )

Float Callout_obj::set_paddingBottom(Float value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_paddingBottom)
HXLINE( 106)		if (!(this->setStyle(HX_("paddingBottom",9c,67,99,4f),null()))) {
HXLINE( 107)			return this->_hx___paddingBottom;
            		}
HXLINE( 109)		if ((this->_hx___paddingBottom == value)) {
HXLINE( 110)			return this->_hx___paddingBottom;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_paddingBottom_dyn();
HXLINE( 116)		this->_hx___paddingBottom = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_paddingBottom,return )

Float Callout_obj::clearStyle_paddingBottom(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_paddingBottom)
HXLINE( 132)		this->set_paddingBottom(((Float)0.0));
HXLINE( 133)		return this->get_paddingBottom();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_paddingBottom,return )

Float Callout_obj::get_paddingLeft(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_paddingLeft)
HXDLIN(  85)		return this->_hx___paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_paddingLeft,return )

Float Callout_obj::set_paddingLeft(Float value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_paddingLeft)
HXLINE( 106)		if (!(this->setStyle(HX_("paddingLeft",78,4a,e6,85),null()))) {
HXLINE( 107)			return this->_hx___paddingLeft;
            		}
HXLINE( 109)		if ((this->_hx___paddingLeft == value)) {
HXLINE( 110)			return this->_hx___paddingLeft;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_paddingLeft_dyn();
HXLINE( 116)		this->_hx___paddingLeft = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_paddingLeft,return )

Float Callout_obj::clearStyle_paddingLeft(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_paddingLeft)
HXLINE( 132)		this->set_paddingLeft(((Float)0.0));
HXLINE( 133)		return this->get_paddingLeft();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_paddingLeft,return )

 ::feathers::layout::HorizontalAlign Callout_obj::get_horizontalAlign(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_horizontalAlign)
HXDLIN(  85)		return this->_hx___horizontalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_horizontalAlign,return )

 ::feathers::layout::HorizontalAlign Callout_obj::set_horizontalAlign( ::feathers::layout::HorizontalAlign value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_horizontalAlign)
HXLINE( 106)		if (!(this->setStyle(HX_("horizontalAlign",41,8f,67,f4),null()))) {
HXLINE( 107)			return this->_hx___horizontalAlign;
            		}
HXLINE( 109)		if (::hx::IsPointerEq( this->_hx___horizontalAlign,value )) {
HXLINE( 110)			return this->_hx___horizontalAlign;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_horizontalAlign_dyn();
HXLINE( 116)		this->_hx___horizontalAlign = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___horizontalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_horizontalAlign,return )

 ::feathers::layout::HorizontalAlign Callout_obj::clearStyle_horizontalAlign(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_horizontalAlign)
HXLINE( 132)		this->set_horizontalAlign(::feathers::layout::HorizontalAlign_obj::CENTER_dyn());
HXLINE( 133)		return this->get_horizontalAlign();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_horizontalAlign,return )

 ::feathers::layout::VerticalAlign Callout_obj::get_verticalAlign(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_verticalAlign)
HXDLIN(  85)		return this->_hx___verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_verticalAlign,return )

 ::feathers::layout::VerticalAlign Callout_obj::set_verticalAlign( ::feathers::layout::VerticalAlign value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_verticalAlign)
HXLINE( 106)		if (!(this->setStyle(HX_("verticalAlign",6f,1e,7c,e4),null()))) {
HXLINE( 107)			return this->_hx___verticalAlign;
            		}
HXLINE( 109)		if (::hx::IsPointerEq( this->_hx___verticalAlign,value )) {
HXLINE( 110)			return this->_hx___verticalAlign;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_verticalAlign_dyn();
HXLINE( 116)		this->_hx___verticalAlign = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_verticalAlign,return )

 ::feathers::layout::VerticalAlign Callout_obj::clearStyle_verticalAlign(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_verticalAlign)
HXLINE( 132)		this->set_verticalAlign(::feathers::layout::VerticalAlign_obj::MIDDLE_dyn());
HXLINE( 133)		return this->get_verticalAlign();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_verticalAlign,return )

 ::feathers::layout::RelativePosition Callout_obj::get_arrowPosition(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_arrowPosition)
HXDLIN(  85)		return this->_hx___arrowPosition;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_arrowPosition,return )

 ::feathers::layout::RelativePosition Callout_obj::set_arrowPosition( ::feathers::layout::RelativePosition value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_arrowPosition)
HXLINE( 106)		if (!(this->setStyle(HX_("arrowPosition",92,47,68,2b),null()))) {
HXLINE( 107)			return this->_hx___arrowPosition;
            		}
HXLINE( 109)		if (::hx::IsPointerEq( this->_hx___arrowPosition,value )) {
HXLINE( 110)			return this->_hx___arrowPosition;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_arrowPosition_dyn();
HXLINE( 116)		this->_hx___arrowPosition = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___arrowPosition;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_arrowPosition,return )

 ::feathers::layout::RelativePosition Callout_obj::clearStyle_arrowPosition(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_arrowPosition)
HXLINE( 132)		this->set_arrowPosition(::feathers::layout::RelativePosition_obj::TOP_dyn());
HXLINE( 133)		return this->get_arrowPosition();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_arrowPosition,return )

 ::openfl::display::DisplayObject Callout_obj::get_backgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_backgroundSkin)
HXDLIN(  85)		return this->_hx___backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_backgroundSkin,return )

 ::openfl::display::DisplayObject Callout_obj::set_backgroundSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_backgroundSkin)
HXLINE( 106)		if (!(this->setStyle(HX_("backgroundSkin",8b,65,6f,20),null()))) {
HXLINE( 107)			return this->_hx___backgroundSkin;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___backgroundSkin,value )) {
HXLINE( 110)			return this->_hx___backgroundSkin;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_backgroundSkin_dyn();
HXLINE( 116)		this->_hx___backgroundSkin = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_backgroundSkin,return )

 ::openfl::display::DisplayObject Callout_obj::clearStyle_backgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_backgroundSkin)
HXLINE( 132)		this->set_backgroundSkin(null());
HXLINE( 133)		return this->get_backgroundSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_backgroundSkin,return )

 ::openfl::display::DisplayObject Callout_obj::get_topArrowSkin(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_topArrowSkin)
HXDLIN(  85)		return this->_hx___topArrowSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_topArrowSkin,return )

 ::openfl::display::DisplayObject Callout_obj::set_topArrowSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_topArrowSkin)
HXLINE( 106)		if (!(this->setStyle(HX_("topArrowSkin",91,53,8e,75),null()))) {
HXLINE( 107)			return this->_hx___topArrowSkin;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___topArrowSkin,value )) {
HXLINE( 110)			return this->_hx___topArrowSkin;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_topArrowSkin_dyn();
HXLINE( 116)		this->_hx___topArrowSkin = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___topArrowSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_topArrowSkin,return )

 ::openfl::display::DisplayObject Callout_obj::clearStyle_topArrowSkin(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_topArrowSkin)
HXLINE( 132)		this->set_topArrowSkin(null());
HXLINE( 133)		return this->get_topArrowSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_topArrowSkin,return )

 ::openfl::display::DisplayObject Callout_obj::get_rightArrowSkin(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_rightArrowSkin)
HXDLIN(  85)		return this->_hx___rightArrowSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_rightArrowSkin,return )

 ::openfl::display::DisplayObject Callout_obj::set_rightArrowSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_rightArrowSkin)
HXLINE( 106)		if (!(this->setStyle(HX_("rightArrowSkin",6a,4d,0d,e7),null()))) {
HXLINE( 107)			return this->_hx___rightArrowSkin;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___rightArrowSkin,value )) {
HXLINE( 110)			return this->_hx___rightArrowSkin;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_rightArrowSkin_dyn();
HXLINE( 116)		this->_hx___rightArrowSkin = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___rightArrowSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_rightArrowSkin,return )

 ::openfl::display::DisplayObject Callout_obj::clearStyle_rightArrowSkin(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_rightArrowSkin)
HXLINE( 132)		this->set_rightArrowSkin(null());
HXLINE( 133)		return this->get_rightArrowSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_rightArrowSkin,return )

 ::openfl::display::DisplayObject Callout_obj::get_bottomArrowSkin(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_bottomArrowSkin)
HXDLIN(  85)		return this->_hx___bottomArrowSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_bottomArrowSkin,return )

 ::openfl::display::DisplayObject Callout_obj::set_bottomArrowSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_bottomArrowSkin)
HXLINE( 106)		if (!(this->setStyle(HX_("bottomArrowSkin",7b,18,62,41),null()))) {
HXLINE( 107)			return this->_hx___bottomArrowSkin;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___bottomArrowSkin,value )) {
HXLINE( 110)			return this->_hx___bottomArrowSkin;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_bottomArrowSkin_dyn();
HXLINE( 116)		this->_hx___bottomArrowSkin = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___bottomArrowSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_bottomArrowSkin,return )

 ::openfl::display::DisplayObject Callout_obj::clearStyle_bottomArrowSkin(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_bottomArrowSkin)
HXLINE( 132)		this->set_bottomArrowSkin(null());
HXLINE( 133)		return this->get_bottomArrowSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_bottomArrowSkin,return )

 ::openfl::display::DisplayObject Callout_obj::get_leftArrowSkin(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_leftArrowSkin)
HXDLIN(  85)		return this->_hx___leftArrowSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_leftArrowSkin,return )

 ::openfl::display::DisplayObject Callout_obj::set_leftArrowSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_leftArrowSkin)
HXLINE( 106)		if (!(this->setStyle(HX_("leftArrowSkin",df,f3,e3,81),null()))) {
HXLINE( 107)			return this->_hx___leftArrowSkin;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___leftArrowSkin,value )) {
HXLINE( 110)			return this->_hx___leftArrowSkin;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_leftArrowSkin_dyn();
HXLINE( 116)		this->_hx___leftArrowSkin = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___leftArrowSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_leftArrowSkin,return )

 ::openfl::display::DisplayObject Callout_obj::clearStyle_leftArrowSkin(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_leftArrowSkin)
HXLINE( 132)		this->set_leftArrowSkin(null());
HXLINE( 133)		return this->get_leftArrowSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_leftArrowSkin,return )

Float Callout_obj::get_topArrowGap(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_topArrowGap)
HXDLIN(  85)		return this->_hx___topArrowGap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_topArrowGap,return )

Float Callout_obj::set_topArrowGap(Float value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_topArrowGap)
HXLINE( 106)		if (!(this->setStyle(HX_("topArrowGap",82,7e,16,e6),null()))) {
HXLINE( 107)			return this->_hx___topArrowGap;
            		}
HXLINE( 109)		if ((this->_hx___topArrowGap == value)) {
HXLINE( 110)			return this->_hx___topArrowGap;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_topArrowGap_dyn();
HXLINE( 116)		this->_hx___topArrowGap = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___topArrowGap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_topArrowGap,return )

Float Callout_obj::clearStyle_topArrowGap(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_topArrowGap)
HXLINE( 132)		this->set_topArrowGap(((Float)0.0));
HXLINE( 133)		return this->get_topArrowGap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_topArrowGap,return )

Float Callout_obj::get_rightArrowGap(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_rightArrowGap)
HXDLIN(  85)		return this->_hx___rightArrowGap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_rightArrowGap,return )

Float Callout_obj::set_rightArrowGap(Float value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_rightArrowGap)
HXLINE( 106)		if (!(this->setStyle(HX_("rightArrowGap",c9,42,c3,6b),null()))) {
HXLINE( 107)			return this->_hx___rightArrowGap;
            		}
HXLINE( 109)		if ((this->_hx___rightArrowGap == value)) {
HXLINE( 110)			return this->_hx___rightArrowGap;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_rightArrowGap_dyn();
HXLINE( 116)		this->_hx___rightArrowGap = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___rightArrowGap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_rightArrowGap,return )

Float Callout_obj::clearStyle_rightArrowGap(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_rightArrowGap)
HXLINE( 132)		this->set_rightArrowGap(((Float)0.0));
HXLINE( 133)		return this->get_rightArrowGap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_rightArrowGap,return )

Float Callout_obj::get_bottomArrowGap(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_bottomArrowGap)
HXDLIN(  85)		return this->_hx___bottomArrowGap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_bottomArrowGap,return )

Float Callout_obj::set_bottomArrowGap(Float value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_bottomArrowGap)
HXLINE( 106)		if (!(this->setStyle(HX_("bottomArrowGap",d8,44,d0,fc),null()))) {
HXLINE( 107)			return this->_hx___bottomArrowGap;
            		}
HXLINE( 109)		if ((this->_hx___bottomArrowGap == value)) {
HXLINE( 110)			return this->_hx___bottomArrowGap;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_bottomArrowGap_dyn();
HXLINE( 116)		this->_hx___bottomArrowGap = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___bottomArrowGap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_bottomArrowGap,return )

Float Callout_obj::clearStyle_bottomArrowGap(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_bottomArrowGap)
HXLINE( 132)		this->set_bottomArrowGap(((Float)0.0));
HXLINE( 133)		return this->get_bottomArrowGap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_bottomArrowGap,return )

Float Callout_obj::get_leftArrowGap(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_85_get_leftArrowGap)
HXDLIN(  85)		return this->_hx___leftArrowGap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,get_leftArrowGap,return )

Float Callout_obj::set_leftArrowGap(Float value){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_99_set_leftArrowGap)
HXLINE( 106)		if (!(this->setStyle(HX_("leftArrowGap",f4,e1,f7,9e),null()))) {
HXLINE( 107)			return this->_hx___leftArrowGap;
            		}
HXLINE( 109)		if ((this->_hx___leftArrowGap == value)) {
HXLINE( 110)			return this->_hx___leftArrowGap;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_leftArrowGap_dyn();
HXLINE( 116)		this->_hx___leftArrowGap = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___leftArrowGap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Callout_obj,set_leftArrowGap,return )

Float Callout_obj::clearStyle_leftArrowGap(){
            	HX_STACKFRAME(&_hx_pos_60893ffdea4f470b_131_clearStyle_leftArrowGap)
HXLINE( 132)		this->set_leftArrowGap(((Float)0.0));
HXLINE( 133)		return this->get_leftArrowGap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Callout_obj,clearStyle_leftArrowGap,return )

::hx::Class Callout_obj::get_styleContext(){
            	HX_STACKFRAME(&_hx_pos_a44c9ef2ec015b45_42_get_styleContext)
HXDLIN(  42)		return ::hx::ClassOf< ::feathers::controls::Callout >();
            	}


 ::feathers::core::InvalidationFlag Callout_obj::INVALIDATION_FLAG_ORIGIN;

 ::feathers::controls::Callout Callout_obj::show( ::openfl::display::DisplayObject content, ::openfl::display::DisplayObject origin,::Array< ::Dynamic> supportedPositions,::hx::Null< bool >  __o_modal, ::Dynamic customOverlayFactory){
            		bool modal = __o_modal.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7a4dd787dae34c11_92_show)
HXLINE(  93)		 ::feathers::controls::Callout callout =  ::feathers::controls::Callout_obj::__alloc( HX_CTX ,null());
HXLINE(  94)		callout->set_content(content);
HXLINE(  95)		return ::feathers::controls::Callout_obj::showCallout(callout,origin,supportedPositions,modal,customOverlayFactory);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Callout_obj,show,return )

 ::feathers::controls::Callout Callout_obj::showCallout( ::feathers::controls::Callout callout, ::openfl::display::DisplayObject origin,::Array< ::Dynamic> supportedPositions,::hx::Null< bool >  __o_modal, ::Dynamic customOverlayFactory){
            		bool modal = __o_modal.Default(true);
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_99_showCallout)
HXLINE( 100)		callout->supportedPositions = supportedPositions;
HXLINE( 101)		callout->set_origin(origin);
HXLINE( 102)		 ::Dynamic overlayFactory = customOverlayFactory;
HXLINE( 103)		if (::hx::IsNull( overlayFactory )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::openfl::display::DisplayObject _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_7a4dd787dae34c11_104_showCallout)
HXLINE( 105)				 ::openfl::display::Sprite overlay =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 106)				overlay->get_graphics()->beginFill(16711935,((Float)0.0));
HXLINE( 107)				overlay->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(1) ),( (Float)(1) ));
HXLINE( 108)				overlay->get_graphics()->endFill();
HXLINE( 109)				return overlay;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 104)			overlayFactory =  ::Dynamic(new _hx_Closure_0());
            		}
HXLINE( 112)		::feathers::core::PopUpManager_obj::addPopUp(callout,origin,modal,false,overlayFactory);
HXLINE( 113)		return callout;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Callout_obj,showCallout,return )

void Callout_obj::positionBelowOrigin( ::feathers::controls::Callout callout, ::openfl::geom::Rectangle originBounds){
            	HX_GC_STACKFRAME(&_hx_pos_7a4dd787dae34c11_116_positionBelowOrigin)
HXLINE( 117)		callout->measureWithArrowPosition(::feathers::layout::RelativePosition_obj::TOP_dyn());
HXLINE( 119)		 ::openfl::display::DisplayObjectContainer popUpRoot = ::feathers::core::IPopUpManager_obj::get_root(::feathers::core::PopUpManager_obj::forStage(callout->stage));
HXLINE( 121)		 ::openfl::geom::Point stageTopLeft =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 122)		stageTopLeft = popUpRoot->globalToLocal(stageTopLeft);
HXLINE( 124)		 ::openfl::geom::Point stageBottomRight =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,callout->stage->stageWidth,callout->stage->stageHeight);
HXLINE( 125)		stageBottomRight = popUpRoot->globalToLocal(stageBottomRight);
HXLINE( 127)		Float idealXPosition = originBounds->x;
HXLINE( 128)		switch((int)(callout->get_horizontalAlign()->_hx_getIndex())){
            			case (int)1: {
HXLINE( 131)				Float originBounds1 = originBounds->width;
HXDLIN( 131)				idealXPosition = (idealXPosition + ((originBounds1 - callout->get_width()) / ((Float)2.0)));
            			}
            			break;
            			case (int)2: {
HXLINE( 135)				Float originBounds2 = originBounds->width;
HXDLIN( 135)				idealXPosition = (idealXPosition + (originBounds2 - callout->get_width()));
            			}
            			break;
            			default:{
            			}
            		}
HXLINE( 139)		Float stageTopLeft1 = stageTopLeft->x;
HXDLIN( 139)		Float minX = (stageTopLeft1 + callout->get_marginLeft());
HXLINE( 140)		Float stageBottomRight1 = stageBottomRight->x;
HXDLIN( 140)		Float maxX = (stageBottomRight1 - callout->get_width());
HXDLIN( 140)		Float maxX1 = (maxX - callout->get_marginRight());
HXLINE( 141)		Float xPosition = idealXPosition;
HXLINE( 142)		if ((xPosition < minX)) {
HXLINE( 143)			xPosition = minX;
            		}
            		else {
HXLINE( 144)			if ((xPosition > maxX1)) {
HXLINE( 145)				xPosition = maxX1;
            			}
            		}
HXLINE( 147)		callout->set_x(xPosition);
HXLINE( 148)		Float _hx_tmp = (originBounds->y + originBounds->height);
HXDLIN( 148)		callout->set_y((_hx_tmp + callout->get_gap()));
HXLINE( 149)		callout->_arrowOffset = (idealXPosition - xPosition);
HXLINE( 150)		callout->set_arrowPosition(::feathers::layout::RelativePosition_obj::TOP_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Callout_obj,positionBelowOrigin,(void))

void Callout_obj::positionAboveOrigin( ::feathers::controls::Callout callout, ::openfl::geom::Rectangle originBounds){
            	HX_GC_STACKFRAME(&_hx_pos_7a4dd787dae34c11_153_positionAboveOrigin)
HXLINE( 154)		callout->measureWithArrowPosition(::feathers::layout::RelativePosition_obj::BOTTOM_dyn());
HXLINE( 156)		 ::openfl::display::DisplayObjectContainer popUpRoot = ::feathers::core::IPopUpManager_obj::get_root(::feathers::core::PopUpManager_obj::forStage(callout->stage));
HXLINE( 158)		 ::openfl::geom::Point stageTopLeft =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 159)		stageTopLeft = popUpRoot->globalToLocal(stageTopLeft);
HXLINE( 161)		 ::openfl::geom::Point stageBottomRight =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,callout->stage->stageWidth,callout->stage->stageHeight);
HXLINE( 162)		stageBottomRight = popUpRoot->globalToLocal(stageBottomRight);
HXLINE( 164)		Float idealXPosition = originBounds->x;
HXLINE( 165)		switch((int)(callout->get_horizontalAlign()->_hx_getIndex())){
            			case (int)1: {
HXLINE( 168)				Float originBounds1 = originBounds->width;
HXDLIN( 168)				idealXPosition = (idealXPosition + ((originBounds1 - callout->get_width()) / ((Float)2.0)));
            			}
            			break;
            			case (int)2: {
HXLINE( 172)				Float originBounds2 = originBounds->width;
HXDLIN( 172)				idealXPosition = (idealXPosition + (originBounds2 - callout->get_width()));
            			}
            			break;
            			default:{
            			}
            		}
HXLINE( 176)		Float stageTopLeft1 = stageTopLeft->x;
HXDLIN( 176)		Float minX = (stageTopLeft1 + callout->get_marginLeft());
HXLINE( 177)		Float stageBottomRight1 = stageBottomRight->x;
HXDLIN( 177)		Float maxX = (stageBottomRight1 - callout->get_width());
HXDLIN( 177)		Float maxX1 = (maxX - callout->get_marginRight());
HXLINE( 178)		Float xPosition = idealXPosition;
HXLINE( 179)		if ((xPosition < minX)) {
HXLINE( 180)			xPosition = minX;
            		}
            		else {
HXLINE( 181)			if ((xPosition > maxX1)) {
HXLINE( 182)				xPosition = maxX1;
            			}
            		}
HXLINE( 184)		callout->set_x(xPosition);
HXLINE( 185)		Float originBounds3 = originBounds->y;
HXDLIN( 185)		Float _hx_tmp = (originBounds3 - callout->get_height());
HXDLIN( 185)		callout->set_y((_hx_tmp - callout->get_gap()));
HXLINE( 186)		callout->_arrowOffset = (idealXPosition - xPosition);
HXLINE( 187)		callout->set_arrowPosition(::feathers::layout::RelativePosition_obj::BOTTOM_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Callout_obj,positionAboveOrigin,(void))

void Callout_obj::positionLeftOfOrigin( ::feathers::controls::Callout callout, ::openfl::geom::Rectangle originBounds){
            	HX_GC_STACKFRAME(&_hx_pos_7a4dd787dae34c11_190_positionLeftOfOrigin)
HXLINE( 191)		callout->measureWithArrowPosition(::feathers::layout::RelativePosition_obj::RIGHT_dyn());
HXLINE( 193)		 ::openfl::display::DisplayObjectContainer popUpRoot = ::feathers::core::IPopUpManager_obj::get_root(::feathers::core::PopUpManager_obj::forStage(callout->stage));
HXLINE( 195)		 ::openfl::geom::Point stageTopLeft =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 196)		stageTopLeft = popUpRoot->globalToLocal(stageTopLeft);
HXLINE( 198)		 ::openfl::geom::Point stageBottomRight =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,callout->stage->stageWidth,callout->stage->stageHeight);
HXLINE( 199)		stageBottomRight = popUpRoot->globalToLocal(stageBottomRight);
HXLINE( 201)		Float idealYPosition = originBounds->y;
HXLINE( 202)		switch((int)(callout->get_verticalAlign()->_hx_getIndex())){
            			case (int)1: {
HXLINE( 205)				Float originBounds1 = originBounds->height;
HXDLIN( 205)				idealYPosition = (idealYPosition + ((originBounds1 - callout->get_height()) / ((Float)2.0)));
            			}
            			break;
            			case (int)2: {
HXLINE( 209)				Float originBounds2 = originBounds->height;
HXDLIN( 209)				idealYPosition = (idealYPosition + (originBounds2 - callout->get_height()));
            			}
            			break;
            			default:{
            			}
            		}
HXLINE( 213)		Float stageTopLeft1 = stageTopLeft->y;
HXDLIN( 213)		Float minY = (stageTopLeft1 + callout->get_marginTop());
HXLINE( 214)		Float stageBottomRight1 = stageBottomRight->y;
HXDLIN( 214)		Float maxY = (stageBottomRight1 - callout->get_height());
HXDLIN( 214)		Float maxY1 = (maxY - callout->get_marginBottom());
HXLINE( 215)		Float yPosition = idealYPosition;
HXLINE( 216)		if ((yPosition < minY)) {
HXLINE( 217)			yPosition = minY;
            		}
            		else {
HXLINE( 218)			if ((yPosition > maxY1)) {
HXLINE( 219)				yPosition = maxY1;
            			}
            		}
HXLINE( 221)		Float originBounds3 = originBounds->x;
HXDLIN( 221)		Float _hx_tmp = (originBounds3 - callout->get_width());
HXDLIN( 221)		callout->set_x((_hx_tmp - callout->get_gap()));
HXLINE( 222)		callout->set_y(yPosition);
HXLINE( 223)		callout->_arrowOffset = (idealYPosition - yPosition);
HXLINE( 224)		callout->set_arrowPosition(::feathers::layout::RelativePosition_obj::RIGHT_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Callout_obj,positionLeftOfOrigin,(void))

void Callout_obj::positionRightOfOrigin( ::feathers::controls::Callout callout, ::openfl::geom::Rectangle originBounds){
            	HX_GC_STACKFRAME(&_hx_pos_7a4dd787dae34c11_227_positionRightOfOrigin)
HXLINE( 228)		callout->measureWithArrowPosition(::feathers::layout::RelativePosition_obj::RIGHT_dyn());
HXLINE( 230)		 ::openfl::display::DisplayObjectContainer popUpRoot = ::feathers::core::IPopUpManager_obj::get_root(::feathers::core::PopUpManager_obj::forStage(callout->stage));
HXLINE( 232)		 ::openfl::geom::Point stageTopLeft =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 233)		stageTopLeft = popUpRoot->globalToLocal(stageTopLeft);
HXLINE( 235)		 ::openfl::geom::Point stageBottomRight =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,callout->stage->stageWidth,callout->stage->stageHeight);
HXLINE( 236)		stageBottomRight = popUpRoot->globalToLocal(stageBottomRight);
HXLINE( 238)		Float idealYPosition = originBounds->y;
HXLINE( 239)		switch((int)(callout->get_verticalAlign()->_hx_getIndex())){
            			case (int)1: {
HXLINE( 242)				Float originBounds1 = originBounds->height;
HXDLIN( 242)				idealYPosition = (idealYPosition + ((originBounds1 - callout->get_height()) / ((Float)2.0)));
            			}
            			break;
            			case (int)2: {
HXLINE( 246)				Float originBounds2 = originBounds->height;
HXDLIN( 246)				idealYPosition = (idealYPosition + (originBounds2 - callout->get_height()));
            			}
            			break;
            			default:{
            			}
            		}
HXLINE( 250)		Float stageTopLeft1 = stageTopLeft->y;
HXDLIN( 250)		Float minY = (stageTopLeft1 + callout->get_marginTop());
HXLINE( 251)		Float stageBottomRight1 = stageBottomRight->y;
HXDLIN( 251)		Float maxY = (stageBottomRight1 - callout->get_height());
HXDLIN( 251)		Float maxY1 = (maxY - callout->get_marginBottom());
HXLINE( 252)		Float yPosition = idealYPosition;
HXLINE( 253)		if ((yPosition < minY)) {
HXLINE( 254)			yPosition = minY;
            		}
            		else {
HXLINE( 255)			if ((yPosition > maxY1)) {
HXLINE( 256)				yPosition = maxY1;
            			}
            		}
HXLINE( 258)		Float _hx_tmp = (originBounds->x + originBounds->width);
HXDLIN( 258)		callout->set_x((_hx_tmp + callout->get_gap()));
HXLINE( 259)		callout->set_y(yPosition);
HXLINE( 260)		callout->_arrowOffset = (idealYPosition - yPosition);
HXLINE( 261)		callout->set_arrowPosition(::feathers::layout::RelativePosition_obj::LEFT_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Callout_obj,positionRightOfOrigin,(void))


::hx::ObjectPtr< Callout_obj > Callout_obj::__new( ::openfl::display::DisplayObject content) {
	::hx::ObjectPtr< Callout_obj > __this = new Callout_obj();
	__this->__construct(content);
	return __this;
}

::hx::ObjectPtr< Callout_obj > Callout_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display::DisplayObject content) {
	Callout_obj *__this = (Callout_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Callout_obj), true, "feathers.controls.Callout"));
	*(void **)__this = Callout_obj::_hx_vtable;
	__this->__construct(content);
	return __this;
}

Callout_obj::Callout_obj()
{
}

void Callout_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Callout);
	HX_MARK_MEMBER_NAME(_contentMeasurements,"_contentMeasurements");
	HX_MARK_MEMBER_NAME(_content,"_content");
	HX_MARK_MEMBER_NAME(_origin,"_origin");
	HX_MARK_MEMBER_NAME(_currentBackgroundSkin,"_currentBackgroundSkin");
	HX_MARK_MEMBER_NAME(_backgroundSkinMeasurements,"_backgroundSkinMeasurements");
	HX_MARK_MEMBER_NAME(_currentArrowSkin,"_currentArrowSkin");
	HX_MARK_MEMBER_NAME(_arrowOffset,"_arrowOffset");
	HX_MARK_MEMBER_NAME(supportedPositions,"supportedPositions");
	HX_MARK_MEMBER_NAME(_lastPopUpOriginBounds,"_lastPopUpOriginBounds");
	HX_MARK_MEMBER_NAME(_ignoreContentResize,"_ignoreContentResize");
	HX_MARK_MEMBER_NAME(closeOnPointerOutside,"closeOnPointerOutside");
	HX_MARK_MEMBER_NAME(_hx___gap,"__gap");
	HX_MARK_MEMBER_NAME(_hx___marginTop,"__marginTop");
	HX_MARK_MEMBER_NAME(_hx___marginRight,"__marginRight");
	HX_MARK_MEMBER_NAME(_hx___marginBottom,"__marginBottom");
	HX_MARK_MEMBER_NAME(_hx___marginLeft,"__marginLeft");
	HX_MARK_MEMBER_NAME(_hx___paddingTop,"__paddingTop");
	HX_MARK_MEMBER_NAME(_hx___paddingRight,"__paddingRight");
	HX_MARK_MEMBER_NAME(_hx___paddingBottom,"__paddingBottom");
	HX_MARK_MEMBER_NAME(_hx___paddingLeft,"__paddingLeft");
	HX_MARK_MEMBER_NAME(_hx___horizontalAlign,"__horizontalAlign");
	HX_MARK_MEMBER_NAME(_hx___verticalAlign,"__verticalAlign");
	HX_MARK_MEMBER_NAME(_hx___arrowPosition,"__arrowPosition");
	HX_MARK_MEMBER_NAME(_hx___backgroundSkin,"__backgroundSkin");
	HX_MARK_MEMBER_NAME(_hx___topArrowSkin,"__topArrowSkin");
	HX_MARK_MEMBER_NAME(_hx___rightArrowSkin,"__rightArrowSkin");
	HX_MARK_MEMBER_NAME(_hx___bottomArrowSkin,"__bottomArrowSkin");
	HX_MARK_MEMBER_NAME(_hx___leftArrowSkin,"__leftArrowSkin");
	HX_MARK_MEMBER_NAME(_hx___topArrowGap,"__topArrowGap");
	HX_MARK_MEMBER_NAME(_hx___rightArrowGap,"__rightArrowGap");
	HX_MARK_MEMBER_NAME(_hx___bottomArrowGap,"__bottomArrowGap");
	HX_MARK_MEMBER_NAME(_hx___leftArrowGap,"__leftArrowGap");
	 ::feathers::core::FeathersControl_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Callout_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_contentMeasurements,"_contentMeasurements");
	HX_VISIT_MEMBER_NAME(_content,"_content");
	HX_VISIT_MEMBER_NAME(_origin,"_origin");
	HX_VISIT_MEMBER_NAME(_currentBackgroundSkin,"_currentBackgroundSkin");
	HX_VISIT_MEMBER_NAME(_backgroundSkinMeasurements,"_backgroundSkinMeasurements");
	HX_VISIT_MEMBER_NAME(_currentArrowSkin,"_currentArrowSkin");
	HX_VISIT_MEMBER_NAME(_arrowOffset,"_arrowOffset");
	HX_VISIT_MEMBER_NAME(supportedPositions,"supportedPositions");
	HX_VISIT_MEMBER_NAME(_lastPopUpOriginBounds,"_lastPopUpOriginBounds");
	HX_VISIT_MEMBER_NAME(_ignoreContentResize,"_ignoreContentResize");
	HX_VISIT_MEMBER_NAME(closeOnPointerOutside,"closeOnPointerOutside");
	HX_VISIT_MEMBER_NAME(_hx___gap,"__gap");
	HX_VISIT_MEMBER_NAME(_hx___marginTop,"__marginTop");
	HX_VISIT_MEMBER_NAME(_hx___marginRight,"__marginRight");
	HX_VISIT_MEMBER_NAME(_hx___marginBottom,"__marginBottom");
	HX_VISIT_MEMBER_NAME(_hx___marginLeft,"__marginLeft");
	HX_VISIT_MEMBER_NAME(_hx___paddingTop,"__paddingTop");
	HX_VISIT_MEMBER_NAME(_hx___paddingRight,"__paddingRight");
	HX_VISIT_MEMBER_NAME(_hx___paddingBottom,"__paddingBottom");
	HX_VISIT_MEMBER_NAME(_hx___paddingLeft,"__paddingLeft");
	HX_VISIT_MEMBER_NAME(_hx___horizontalAlign,"__horizontalAlign");
	HX_VISIT_MEMBER_NAME(_hx___verticalAlign,"__verticalAlign");
	HX_VISIT_MEMBER_NAME(_hx___arrowPosition,"__arrowPosition");
	HX_VISIT_MEMBER_NAME(_hx___backgroundSkin,"__backgroundSkin");
	HX_VISIT_MEMBER_NAME(_hx___topArrowSkin,"__topArrowSkin");
	HX_VISIT_MEMBER_NAME(_hx___rightArrowSkin,"__rightArrowSkin");
	HX_VISIT_MEMBER_NAME(_hx___bottomArrowSkin,"__bottomArrowSkin");
	HX_VISIT_MEMBER_NAME(_hx___leftArrowSkin,"__leftArrowSkin");
	HX_VISIT_MEMBER_NAME(_hx___topArrowGap,"__topArrowGap");
	HX_VISIT_MEMBER_NAME(_hx___rightArrowGap,"__rightArrowGap");
	HX_VISIT_MEMBER_NAME(_hx___bottomArrowGap,"__bottomArrowGap");
	HX_VISIT_MEMBER_NAME(_hx___leftArrowGap,"__leftArrowGap");
	 ::feathers::core::FeathersControl_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Callout_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_gap() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		if (HX_FIELD_EQ(inName,"__gap") ) { return ::hx::Val( _hx___gap ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_origin() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_content() ); }
		if (HX_FIELD_EQ(inName,"_origin") ) { return ::hx::Val( _origin ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return ::hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"measure") ) { return ::hx::Val( measure_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gap") ) { return ::hx::Val( get_gap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gap") ) { return ::hx::Val( set_gap_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_content") ) { return ::hx::Val( _content ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"marginTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_marginTop() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_origin") ) { return ::hx::Val( get_origin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_origin") ) { return ::hx::Val( set_origin_dyn() ); }
		if (HX_FIELD_EQ(inName,"marginLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_marginLeft() ); }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingTop() ); }
		if (HX_FIELD_EQ(inName,"setPadding") ) { return ::hx::Val( setPadding_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_content") ) { return ::hx::Val( get_content_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_content") ) { return ::hx::Val( set_content_dyn() ); }
		if (HX_FIELD_EQ(inName,"marginRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_marginRight() ); }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingLeft() ); }
		if (HX_FIELD_EQ(inName,"topArrowGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_topArrowGap() ); }
		if (HX_FIELD_EQ(inName,"__marginTop") ) { return ::hx::Val( _hx___marginTop ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"marginBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_marginBottom() ); }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingRight() ); }
		if (HX_FIELD_EQ(inName,"topArrowSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_topArrowSkin() ); }
		if (HX_FIELD_EQ(inName,"leftArrowGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_leftArrowGap() ); }
		if (HX_FIELD_EQ(inName,"_arrowOffset") ) { return ::hx::Val( _arrowOffset ); }
		if (HX_FIELD_EQ(inName,"__marginLeft") ) { return ::hx::Val( _hx___marginLeft ); }
		if (HX_FIELD_EQ(inName,"__paddingTop") ) { return ::hx::Val( _hx___paddingTop ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingBottom() ); }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_verticalAlign() ); }
		if (HX_FIELD_EQ(inName,"arrowPosition") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_arrowPosition() ); }
		if (HX_FIELD_EQ(inName,"leftArrowSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_leftArrowSkin() ); }
		if (HX_FIELD_EQ(inName,"rightArrowGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_rightArrowGap() ); }
		if (HX_FIELD_EQ(inName,"get_marginTop") ) { return ::hx::Val( get_marginTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_marginTop") ) { return ::hx::Val( set_marginTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"__marginRight") ) { return ::hx::Val( _hx___marginRight ); }
		if (HX_FIELD_EQ(inName,"__paddingLeft") ) { return ::hx::Val( _hx___paddingLeft ); }
		if (HX_FIELD_EQ(inName,"__topArrowGap") ) { return ::hx::Val( _hx___topArrowGap ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"backgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_backgroundSkin() ); }
		if (HX_FIELD_EQ(inName,"rightArrowSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_rightArrowSkin() ); }
		if (HX_FIELD_EQ(inName,"bottomArrowGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bottomArrowGap() ); }
		if (HX_FIELD_EQ(inName,"refreshEnabled") ) { return ::hx::Val( refreshEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"layoutChildren") ) { return ::hx::Val( layoutChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_gap") ) { return ::hx::Val( clearStyle_gap_dyn() ); }
		if (HX_FIELD_EQ(inName,"__marginBottom") ) { return ::hx::Val( _hx___marginBottom ); }
		if (HX_FIELD_EQ(inName,"get_marginLeft") ) { return ::hx::Val( get_marginLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_marginLeft") ) { return ::hx::Val( set_marginLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_paddingTop") ) { return ::hx::Val( get_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingTop") ) { return ::hx::Val( set_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"__paddingRight") ) { return ::hx::Val( _hx___paddingRight ); }
		if (HX_FIELD_EQ(inName,"__topArrowSkin") ) { return ::hx::Val( _hx___topArrowSkin ); }
		if (HX_FIELD_EQ(inName,"__leftArrowGap") ) { return ::hx::Val( _hx___leftArrowGap ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"horizontalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_horizontalAlign() ); }
		if (HX_FIELD_EQ(inName,"bottomArrowSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bottomArrowSkin() ); }
		if (HX_FIELD_EQ(inName,"get_marginRight") ) { return ::hx::Val( get_marginRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_marginRight") ) { return ::hx::Val( set_marginRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"__paddingBottom") ) { return ::hx::Val( _hx___paddingBottom ); }
		if (HX_FIELD_EQ(inName,"get_paddingLeft") ) { return ::hx::Val( get_paddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingLeft") ) { return ::hx::Val( set_paddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"__verticalAlign") ) { return ::hx::Val( _hx___verticalAlign ); }
		if (HX_FIELD_EQ(inName,"__arrowPosition") ) { return ::hx::Val( _hx___arrowPosition ); }
		if (HX_FIELD_EQ(inName,"__leftArrowSkin") ) { return ::hx::Val( _hx___leftArrowSkin ); }
		if (HX_FIELD_EQ(inName,"get_topArrowGap") ) { return ::hx::Val( get_topArrowGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_topArrowGap") ) { return ::hx::Val( set_topArrowGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"__rightArrowGap") ) { return ::hx::Val( _hx___rightArrowGap ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"refreshArrowSkin") ) { return ::hx::Val( refreshArrowSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_marginBottom") ) { return ::hx::Val( get_marginBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_marginBottom") ) { return ::hx::Val( set_marginBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_paddingRight") ) { return ::hx::Val( get_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingRight") ) { return ::hx::Val( set_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"__backgroundSkin") ) { return ::hx::Val( _hx___backgroundSkin ); }
		if (HX_FIELD_EQ(inName,"get_topArrowSkin") ) { return ::hx::Val( get_topArrowSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_topArrowSkin") ) { return ::hx::Val( set_topArrowSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"__rightArrowSkin") ) { return ::hx::Val( _hx___rightArrowSkin ); }
		if (HX_FIELD_EQ(inName,"__bottomArrowGap") ) { return ::hx::Val( _hx___bottomArrowGap ); }
		if (HX_FIELD_EQ(inName,"get_leftArrowGap") ) { return ::hx::Val( get_leftArrowGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_leftArrowGap") ) { return ::hx::Val( set_leftArrowGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_styleContext") ) { return ::hx::Val( get_styleContext_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_currentArrowSkin") ) { return ::hx::Val( _currentArrowSkin ); }
		if (HX_FIELD_EQ(inName,"get_paddingBottom") ) { return ::hx::Val( get_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingBottom") ) { return ::hx::Val( set_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"__horizontalAlign") ) { return ::hx::Val( _hx___horizontalAlign ); }
		if (HX_FIELD_EQ(inName,"get_verticalAlign") ) { return ::hx::Val( get_verticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_verticalAlign") ) { return ::hx::Val( set_verticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_arrowPosition") ) { return ::hx::Val( get_arrowPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_arrowPosition") ) { return ::hx::Val( set_arrowPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bottomArrowSkin") ) { return ::hx::Val( _hx___bottomArrowSkin ); }
		if (HX_FIELD_EQ(inName,"get_leftArrowSkin") ) { return ::hx::Val( get_leftArrowSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_leftArrowSkin") ) { return ::hx::Val( set_leftArrowSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rightArrowGap") ) { return ::hx::Val( get_rightArrowGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rightArrowGap") ) { return ::hx::Val( set_rightArrowGap_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"supportedPositions") ) { return ::hx::Val( supportedPositions ); }
		if (HX_FIELD_EQ(inName,"get_backgroundSkin") ) { return ::hx::Val( get_backgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundSkin") ) { return ::hx::Val( set_backgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rightArrowSkin") ) { return ::hx::Val( get_rightArrowSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rightArrowSkin") ) { return ::hx::Val( set_rightArrowSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomArrowGap") ) { return ::hx::Val( get_bottomArrowGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottomArrowGap") ) { return ::hx::Val( set_bottomArrowGap_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getCurrentArrowSkin") ) { return ::hx::Val( getCurrentArrowSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkForOriginMoved") ) { return ::hx::Val( checkForOriginMoved_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_horizontalAlign") ) { return ::hx::Val( get_horizontalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_horizontalAlign") ) { return ::hx::Val( set_horizontalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomArrowSkin") ) { return ::hx::Val( get_bottomArrowSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottomArrowSkin") ) { return ::hx::Val( set_bottomArrowSkin_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_contentMeasurements") ) { return ::hx::Val( _contentMeasurements ); }
		if (HX_FIELD_EQ(inName,"_ignoreContentResize") ) { return ::hx::Val( _ignoreContentResize ); }
		if (HX_FIELD_EQ(inName,"clearStyle_marginTop") ) { return ::hx::Val( clearStyle_marginTop_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"closeOnPointerOutside") ) { return ::hx::Val( closeOnPointerOutside ); }
		if (HX_FIELD_EQ(inName,"refreshBackgroundSkin") ) { return ::hx::Val( refreshBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_marginLeft") ) { return ::hx::Val( clearStyle_marginLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingTop") ) { return ::hx::Val( clearStyle_paddingTop_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_currentBackgroundSkin") ) { return ::hx::Val( _currentBackgroundSkin ); }
		if (HX_FIELD_EQ(inName,"_lastPopUpOriginBounds") ) { return ::hx::Val( _lastPopUpOriginBounds ); }
		if (HX_FIELD_EQ(inName,"initializeCalloutTheme") ) { return ::hx::Val( initializeCalloutTheme_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeCurrentArrowSkin") ) { return ::hx::Val( removeCurrentArrowSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_marginRight") ) { return ::hx::Val( clearStyle_marginRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingLeft") ) { return ::hx::Val( clearStyle_paddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_topArrowGap") ) { return ::hx::Val( clearStyle_topArrowGap_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"clearStyle_marginBottom") ) { return ::hx::Val( clearStyle_marginBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingRight") ) { return ::hx::Val( clearStyle_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_topArrowSkin") ) { return ::hx::Val( clearStyle_topArrowSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_leftArrowGap") ) { return ::hx::Val( clearStyle_leftArrowGap_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"measureWithArrowPosition") ) { return ::hx::Val( measureWithArrowPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentBackgroundSkin") ) { return ::hx::Val( getCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"addCurrentBackgroundSkin") ) { return ::hx::Val( addCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"positionRelativeToOrigin") ) { return ::hx::Val( positionRelativeToOrigin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingBottom") ) { return ::hx::Val( clearStyle_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_verticalAlign") ) { return ::hx::Val( clearStyle_verticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_arrowPosition") ) { return ::hx::Val( clearStyle_arrowPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_leftArrowSkin") ) { return ::hx::Val( clearStyle_leftArrowSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_rightArrowGap") ) { return ::hx::Val( clearStyle_rightArrowGap_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"callout_enterFrameHandler") ) { return ::hx::Val( callout_enterFrameHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_backgroundSkin") ) { return ::hx::Val( clearStyle_backgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_rightArrowSkin") ) { return ::hx::Val( clearStyle_rightArrowSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_bottomArrowGap") ) { return ::hx::Val( clearStyle_bottomArrowGap_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"clearStyle_horizontalAlign") ) { return ::hx::Val( clearStyle_horizontalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_bottomArrowSkin") ) { return ::hx::Val( clearStyle_bottomArrowSkin_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_backgroundSkinMeasurements") ) { return ::hx::Val( _backgroundSkinMeasurements ); }
		if (HX_FIELD_EQ(inName,"removeCurrentBackgroundSkin") ) { return ::hx::Val( removeCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"callout_addedToStageHandler") ) { return ::hx::Val( callout_addedToStageHandler_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"callout_content_resizeHandler") ) { return ::hx::Val( callout_content_resizeHandler_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"callout_stage_mouseDownHandler") ) { return ::hx::Val( callout_stage_mouseDownHandler_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"callout_removedFromStageHandler") ) { return ::hx::Val( callout_removedFromStageHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"callout_stage_touchBeginHandler") ) { return ::hx::Val( callout_stage_touchBeginHandler_dyn() ); }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"callout_origin_removedFromStageHandler") ) { return ::hx::Val( callout_origin_removedFromStageHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Callout_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"show") ) { outValue = show_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"showCallout") ) { outValue = showCallout_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"positionBelowOrigin") ) { outValue = positionBelowOrigin_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"positionAboveOrigin") ) { outValue = positionAboveOrigin_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"positionLeftOfOrigin") ) { outValue = positionLeftOfOrigin_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"positionRightOfOrigin") ) { outValue = positionRightOfOrigin_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"INVALIDATION_FLAG_ORIGIN") ) { outValue = ( INVALIDATION_FLAG_ORIGIN ); return true; }
	}
	return false;
}

::hx::Val Callout_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_gap(inValue.Cast< Float >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"__gap") ) { _hx___gap=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_origin(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_content(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"_origin") ) { _origin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_content") ) { _content=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"marginTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_marginTop(inValue.Cast< Float >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"marginLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_marginLeft(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingTop(inValue.Cast< Float >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"marginRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_marginRight(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingLeft(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"topArrowGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_topArrowGap(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__marginTop") ) { _hx___marginTop=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"marginBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_marginBottom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingRight(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"topArrowSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_topArrowSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"leftArrowGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_leftArrowGap(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_arrowOffset") ) { _arrowOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__marginLeft") ) { _hx___marginLeft=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__paddingTop") ) { _hx___paddingTop=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingBottom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_verticalAlign(inValue.Cast<  ::feathers::layout::VerticalAlign >()) ); }
		if (HX_FIELD_EQ(inName,"arrowPosition") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_arrowPosition(inValue.Cast<  ::feathers::layout::RelativePosition >()) ); }
		if (HX_FIELD_EQ(inName,"leftArrowSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_leftArrowSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"rightArrowGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_rightArrowGap(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__marginRight") ) { _hx___marginRight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__paddingLeft") ) { _hx___paddingLeft=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__topArrowGap") ) { _hx___topArrowGap=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"backgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_backgroundSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"rightArrowSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_rightArrowSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"bottomArrowGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_bottomArrowGap(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__marginBottom") ) { _hx___marginBottom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__paddingRight") ) { _hx___paddingRight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__topArrowSkin") ) { _hx___topArrowSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__leftArrowGap") ) { _hx___leftArrowGap=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"horizontalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_horizontalAlign(inValue.Cast<  ::feathers::layout::HorizontalAlign >()) ); }
		if (HX_FIELD_EQ(inName,"bottomArrowSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_bottomArrowSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"__paddingBottom") ) { _hx___paddingBottom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__verticalAlign") ) { _hx___verticalAlign=inValue.Cast<  ::feathers::layout::VerticalAlign >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__arrowPosition") ) { _hx___arrowPosition=inValue.Cast<  ::feathers::layout::RelativePosition >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__leftArrowSkin") ) { _hx___leftArrowSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rightArrowGap") ) { _hx___rightArrowGap=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__backgroundSkin") ) { _hx___backgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rightArrowSkin") ) { _hx___rightArrowSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__bottomArrowGap") ) { _hx___bottomArrowGap=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_currentArrowSkin") ) { _currentArrowSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__horizontalAlign") ) { _hx___horizontalAlign=inValue.Cast<  ::feathers::layout::HorizontalAlign >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__bottomArrowSkin") ) { _hx___bottomArrowSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"supportedPositions") ) { supportedPositions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_contentMeasurements") ) { _contentMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ignoreContentResize") ) { _ignoreContentResize=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"closeOnPointerOutside") ) { closeOnPointerOutside=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_currentBackgroundSkin") ) { _currentBackgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastPopUpOriginBounds") ) { _lastPopUpOriginBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_backgroundSkinMeasurements") ) { _backgroundSkinMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Callout_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 24:
		if (HX_FIELD_EQ(inName,"INVALIDATION_FLAG_ORIGIN") ) { INVALIDATION_FLAG_ORIGIN=ioValue.Cast<  ::feathers::core::InvalidationFlag >(); return true; }
	}
	return false;
}

void Callout_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_contentMeasurements",d1,16,b6,c9));
	outFields->push(HX_("_content",ba,e6,2f,53));
	outFields->push(HX_("content",39,8d,77,19));
	outFields->push(HX_("_origin",85,2b,78,b9));
	outFields->push(HX_("origin",e6,19,01,4b));
	outFields->push(HX_("gap",16,7d,4e,00));
	outFields->push(HX_("marginTop",07,7f,40,ee));
	outFields->push(HX_("marginRight",ce,a4,d8,33));
	outFields->push(HX_("marginBottom",b9,21,0a,41));
	outFields->push(HX_("marginLeft",55,53,dd,84));
	outFields->push(HX_("paddingTop",44,fd,05,3a));
	outFields->push(HX_("paddingRight",4b,ec,a7,1a));
	outFields->push(HX_("paddingBottom",9c,67,99,4f));
	outFields->push(HX_("paddingLeft",78,4a,e6,85));
	outFields->push(HX_("horizontalAlign",41,8f,67,f4));
	outFields->push(HX_("verticalAlign",6f,1e,7c,e4));
	outFields->push(HX_("arrowPosition",92,47,68,2b));
	outFields->push(HX_("_currentBackgroundSkin",e5,c0,55,58));
	outFields->push(HX_("_backgroundSkinMeasurements",41,46,9b,f8));
	outFields->push(HX_("backgroundSkin",8b,65,6f,20));
	outFields->push(HX_("_currentArrowSkin",cc,37,a4,93));
	outFields->push(HX_("topArrowSkin",91,53,8e,75));
	outFields->push(HX_("rightArrowSkin",6a,4d,0d,e7));
	outFields->push(HX_("bottomArrowSkin",7b,18,62,41));
	outFields->push(HX_("leftArrowSkin",df,f3,e3,81));
	outFields->push(HX_("topArrowGap",82,7e,16,e6));
	outFields->push(HX_("rightArrowGap",c9,42,c3,6b));
	outFields->push(HX_("bottomArrowGap",d8,44,d0,fc));
	outFields->push(HX_("leftArrowGap",f4,e1,f7,9e));
	outFields->push(HX_("_arrowOffset",3d,30,28,81));
	outFields->push(HX_("supportedPositions",9c,d7,13,1a));
	outFields->push(HX_("_lastPopUpOriginBounds",72,4f,fb,ac));
	outFields->push(HX_("_ignoreContentResize",9c,76,67,67));
	outFields->push(HX_("closeOnPointerOutside",3f,27,55,f4));
	outFields->push(HX_("__gap",f6,dd,2a,f2));
	outFields->push(HX_("__marginTop",e7,c7,6c,1c));
	outFields->push(HX_("__marginRight",ae,e5,50,7c));
	outFields->push(HX_("__marginBottom",d9,a4,ca,61));
	outFields->push(HX_("__marginLeft",75,ce,70,bd));
	outFields->push(HX_("__paddingTop",64,78,99,72));
	outFields->push(HX_("__paddingRight",6b,6f,68,3b));
	outFields->push(HX_("__paddingBottom",7c,a0,4b,d7));
	outFields->push(HX_("__paddingLeft",58,8b,5e,ce));
	outFields->push(HX_("__horizontalAlign",21,c0,c1,77));
	outFields->push(HX_("__verticalAlign",4f,57,2e,6c));
	outFields->push(HX_("__arrowPosition",72,80,1a,b3));
	outFields->push(HX_("__backgroundSkin",ab,f0,ae,54));
	outFields->push(HX_("__topArrowSkin",b1,d6,4e,96));
	outFields->push(HX_("__rightArrowSkin",8a,d8,4c,1b));
	outFields->push(HX_("__bottomArrowSkin",5b,49,bc,c4));
	outFields->push(HX_("__leftArrowSkin",bf,2c,96,09));
	outFields->push(HX_("__topArrowGap",62,bf,8e,2e));
	outFields->push(HX_("__rightArrowGap",a9,7b,75,f3));
	outFields->push(HX_("__bottomArrowGap",f8,cf,0f,31));
	outFields->push(HX_("__leftArrowGap",14,65,b8,bf));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Callout_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(Callout_obj,_contentMeasurements),HX_("_contentMeasurements",d1,16,b6,c9)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(Callout_obj,_content),HX_("_content",ba,e6,2f,53)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(Callout_obj,_origin),HX_("_origin",85,2b,78,b9)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(Callout_obj,_currentBackgroundSkin),HX_("_currentBackgroundSkin",e5,c0,55,58)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(Callout_obj,_backgroundSkinMeasurements),HX_("_backgroundSkinMeasurements",41,46,9b,f8)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(Callout_obj,_currentArrowSkin),HX_("_currentArrowSkin",cc,37,a4,93)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_arrowOffset),HX_("_arrowOffset",3d,30,28,81)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Callout_obj,supportedPositions),HX_("supportedPositions",9c,d7,13,1a)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(Callout_obj,_lastPopUpOriginBounds),HX_("_lastPopUpOriginBounds",72,4f,fb,ac)},
	{::hx::fsBool,(int)offsetof(Callout_obj,_ignoreContentResize),HX_("_ignoreContentResize",9c,76,67,67)},
	{::hx::fsBool,(int)offsetof(Callout_obj,closeOnPointerOutside),HX_("closeOnPointerOutside",3f,27,55,f4)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_hx___gap),HX_("__gap",f6,dd,2a,f2)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_hx___marginTop),HX_("__marginTop",e7,c7,6c,1c)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_hx___marginRight),HX_("__marginRight",ae,e5,50,7c)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_hx___marginBottom),HX_("__marginBottom",d9,a4,ca,61)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_hx___marginLeft),HX_("__marginLeft",75,ce,70,bd)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_hx___paddingTop),HX_("__paddingTop",64,78,99,72)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_hx___paddingRight),HX_("__paddingRight",6b,6f,68,3b)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_hx___paddingBottom),HX_("__paddingBottom",7c,a0,4b,d7)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_hx___paddingLeft),HX_("__paddingLeft",58,8b,5e,ce)},
	{::hx::fsObject /*  ::feathers::layout::HorizontalAlign */ ,(int)offsetof(Callout_obj,_hx___horizontalAlign),HX_("__horizontalAlign",21,c0,c1,77)},
	{::hx::fsObject /*  ::feathers::layout::VerticalAlign */ ,(int)offsetof(Callout_obj,_hx___verticalAlign),HX_("__verticalAlign",4f,57,2e,6c)},
	{::hx::fsObject /*  ::feathers::layout::RelativePosition */ ,(int)offsetof(Callout_obj,_hx___arrowPosition),HX_("__arrowPosition",72,80,1a,b3)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(Callout_obj,_hx___backgroundSkin),HX_("__backgroundSkin",ab,f0,ae,54)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(Callout_obj,_hx___topArrowSkin),HX_("__topArrowSkin",b1,d6,4e,96)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(Callout_obj,_hx___rightArrowSkin),HX_("__rightArrowSkin",8a,d8,4c,1b)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(Callout_obj,_hx___bottomArrowSkin),HX_("__bottomArrowSkin",5b,49,bc,c4)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(Callout_obj,_hx___leftArrowSkin),HX_("__leftArrowSkin",bf,2c,96,09)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_hx___topArrowGap),HX_("__topArrowGap",62,bf,8e,2e)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_hx___rightArrowGap),HX_("__rightArrowGap",a9,7b,75,f3)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_hx___bottomArrowGap),HX_("__bottomArrowGap",f8,cf,0f,31)},
	{::hx::fsFloat,(int)offsetof(Callout_obj,_hx___leftArrowGap),HX_("__leftArrowGap",14,65,b8,bf)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Callout_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::feathers::core::InvalidationFlag */ ,(void *) &Callout_obj::INVALIDATION_FLAG_ORIGIN,HX_("INVALIDATION_FLAG_ORIGIN",b8,44,a2,71)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Callout_obj_sMemberFields[] = {
	HX_("_contentMeasurements",d1,16,b6,c9),
	HX_("_content",ba,e6,2f,53),
	HX_("get_content",50,ed,71,9f),
	HX_("set_content",5c,f4,de,a9),
	HX_("_origin",85,2b,78,b9),
	HX_("get_origin",af,89,88,3b),
	HX_("set_origin",23,28,06,3f),
	HX_("_currentBackgroundSkin",e5,c0,55,58),
	HX_("_backgroundSkinMeasurements",41,46,9b,f8),
	HX_("_currentArrowSkin",cc,37,a4,93),
	HX_("_arrowOffset",3d,30,28,81),
	HX_("supportedPositions",9c,d7,13,1a),
	HX_("_lastPopUpOriginBounds",72,4f,fb,ac),
	HX_("_ignoreContentResize",9c,76,67,67),
	HX_("closeOnPointerOutside",3f,27,55,f4),
	HX_("close",b8,17,63,48),
	HX_("setPadding",4f,7e,5c,23),
	HX_("dispose",9f,80,4c,bb),
	HX_("initializeCalloutTheme",a9,a6,53,36),
	HX_("update",09,86,05,87),
	HX_("measure",5e,fb,e9,3c),
	HX_("measureWithArrowPosition",6e,70,41,a8),
	HX_("getCurrentBackgroundSkin",2e,6b,dc,9d),
	HX_("refreshBackgroundSkin",c6,3c,91,2d),
	HX_("addCurrentBackgroundSkin",c3,bb,57,cf),
	HX_("removeCurrentBackgroundSkin",c0,fc,70,a2),
	HX_("refreshArrowSkin",8b,47,fc,b7),
	HX_("getCurrentArrowSkin",23,b2,4f,b5),
	HX_("removeCurrentArrowSkin",d1,89,68,06),
	HX_("refreshEnabled",e6,13,46,f3),
	HX_("layoutChildren",09,3e,82,44),
	HX_("checkForOriginMoved",cc,86,fe,bb),
	HX_("positionRelativeToOrigin",76,05,6d,a6),
	HX_("callout_addedToStageHandler",58,e5,07,44),
	HX_("callout_removedFromStageHandler",27,ff,a8,b9),
	HX_("callout_enterFrameHandler",c6,bb,18,69),
	HX_("callout_origin_removedFromStageHandler",4c,6a,58,af),
	HX_("callout_content_resizeHandler",61,8f,99,7e),
	HX_("callout_stage_mouseDownHandler",33,4e,10,ab),
	HX_("callout_stage_touchBeginHandler",30,8c,bb,86),
	HX_("__gap",f6,dd,2a,f2),
	HX_("get_gap",ad,45,c3,26),
	HX_("set_gap",b9,d6,c4,19),
	HX_("clearStyle_gap",7b,a8,15,a8),
	HX_("__marginTop",e7,c7,6c,1c),
	HX_("get_marginTop",de,52,a4,af),
	HX_("set_marginTop",ea,34,aa,f4),
	HX_("clearStyle_marginTop",2c,c4,31,a8),
	HX_("__marginRight",ae,e5,50,7c),
	HX_("get_marginRight",65,5c,ba,f4),
	HX_("set_marginRight",71,d9,85,f0),
	HX_("clearStyle_marginRight",33,3d,81,40),
	HX_("__marginBottom",d9,a4,ca,61),
	HX_("get_marginBottom",42,0e,a9,45),
	HX_("set_marginBottom",b6,fb,ea,9b),
	HX_("clearStyle_marginBottom",b4,e1,e6,47),
	HX_("__marginLeft",75,ce,70,bd),
	HX_("get_marginLeft",9e,db,d2,fa),
	HX_("set_marginLeft",12,c4,f2,1a),
	HX_("clearStyle_marginLeft",90,8e,08,7e),
	HX_("__paddingTop",64,78,99,72),
	HX_("get_paddingTop",8d,85,fb,af),
	HX_("set_paddingTop",01,6e,1b,d0),
	HX_("clearStyle_paddingTop",7f,38,31,33),
	HX_("__paddingRight",6b,6f,68,3b),
	HX_("get_paddingRight",d4,d8,46,1f),
	HX_("set_paddingRight",48,c6,88,75),
	HX_("clearStyle_paddingRight",46,ac,84,21),
	HX_("__paddingBottom",7c,a0,4b,d7),
	HX_("get_paddingBottom",f3,72,09,56),
	HX_("set_paddingBottom",ff,4a,77,79),
	HX_("clearStyle_paddingBottom",41,a3,e4,49),
	HX_("__paddingLeft",58,8b,5e,ce),
	HX_("get_paddingLeft",0f,02,c8,46),
	HX_("set_paddingLeft",1b,7f,93,42),
	HX_("clearStyle_paddingLeft",dd,e2,8e,92),
	HX_("__horizontalAlign",21,c0,c1,77),
	HX_("get_horizontalAlign",58,5e,72,7f),
	HX_("set_horizontalAlign",64,51,0f,bc),
	HX_("clearStyle_horizontalAlign",26,be,b4,84),
	HX_("__verticalAlign",4f,57,2e,6c),
	HX_("get_verticalAlign",c6,29,ec,ea),
	HX_("set_verticalAlign",d2,01,5a,0e),
	HX_("clearStyle_verticalAlign",14,5a,c7,de),
	HX_("__arrowPosition",72,80,1a,b3),
	HX_("get_arrowPosition",e9,52,d8,31),
	HX_("set_arrowPosition",f5,2a,46,55),
	HX_("clearStyle_arrowPosition",37,83,b3,25),
	HX_("__backgroundSkin",ab,f0,ae,54),
	HX_("get_backgroundSkin",54,46,09,bc),
	HX_("set_backgroundSkin",c8,78,b8,98),
	HX_("clearStyle_backgroundSkin",46,5a,f8,27),
	HX_("__topArrowSkin",b1,d6,4e,96),
	HX_("get_topArrowSkin",1a,40,2d,7a),
	HX_("set_topArrowSkin",8e,2d,6f,d0),
	HX_("clearStyle_topArrowSkin",8c,13,6b,7c),
	HX_("__rightArrowSkin",8a,d8,4c,1b),
	HX_("get_rightArrowSkin",33,2e,a7,82),
	HX_("set_rightArrowSkin",a7,60,56,5f),
	HX_("clearStyle_rightArrowSkin",25,42,96,ee),
	HX_("__bottomArrowSkin",5b,49,bc,c4),
	HX_("get_bottomArrowSkin",92,e7,6c,cc),
	HX_("set_bottomArrowSkin",9e,da,09,09),
	HX_("clearStyle_bottomArrowSkin",60,47,af,d1),
	HX_("__leftArrowSkin",bf,2c,96,09),
	HX_("get_leftArrowSkin",36,ff,53,88),
	HX_("set_leftArrowSkin",42,d7,c1,ab),
	HX_("clearStyle_leftArrowSkin",84,2f,2f,7c),
	HX_("__topArrowGap",62,bf,8e,2e),
	HX_("get_topArrowGap",19,36,f8,a6),
	HX_("set_topArrowGap",25,b3,c3,a2),
	HX_("clearStyle_topArrowGap",e7,16,bf,f2),
	HX_("__rightArrowGap",a9,7b,75,f3),
	HX_("get_rightArrowGap",20,4e,33,72),
	HX_("set_rightArrowGap",2c,26,a1,95),
	HX_("clearStyle_rightArrowGap",6e,7e,0e,66),
	HX_("__bottomArrowGap",f8,cf,0f,31),
	HX_("get_bottomArrowGap",a1,25,6a,98),
	HX_("set_bottomArrowGap",15,58,19,75),
	HX_("clearStyle_bottomArrowGap",93,39,59,04),
	HX_("__leftArrowGap",14,65,b8,bf),
	HX_("get_leftArrowGap",7d,ce,96,a3),
	HX_("set_leftArrowGap",f1,bb,d8,f9),
	HX_("clearStyle_leftArrowGap",ef,a1,d4,a5),
	HX_("get_styleContext",47,7d,20,4b),
	::String(null()) };

static void Callout_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Callout_obj::INVALIDATION_FLAG_ORIGIN,"INVALIDATION_FLAG_ORIGIN");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Callout_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Callout_obj::INVALIDATION_FLAG_ORIGIN,"INVALIDATION_FLAG_ORIGIN");
};

#endif

::hx::Class Callout_obj::__mClass;

static ::String Callout_obj_sStaticFields[] = {
	HX_("INVALIDATION_FLAG_ORIGIN",b8,44,a2,71),
	HX_("show",fd,d4,52,4c),
	HX_("showCallout",33,db,04,31),
	HX_("positionBelowOrigin",4e,39,a9,44),
	HX_("positionAboveOrigin",ba,66,9e,9f),
	HX_("positionLeftOfOrigin",cd,c3,d5,fb),
	HX_("positionRightOfOrigin",f0,17,4f,cd),
	::String(null())
};

void Callout_obj::__register()
{
	Callout_obj _hx_dummy;
	Callout_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.Callout",d6,2d,3f,06);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Callout_obj::__GetStatic;
	__mClass->mSetStaticField = &Callout_obj::__SetStatic;
	__mClass->mMarkFunc = Callout_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Callout_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Callout_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Callout_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Callout_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Callout_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Callout_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Callout_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_67_boot)
HXDLIN(  67)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("defaultXmlProperty",0b,06,d9,8a),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("content",39,8d,77,19))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_7a4dd787dae34c11_68_boot)
HXDLIN(  68)		INVALIDATION_FLAG_ORIGIN = ::feathers::core::InvalidationFlag_obj::CUSTOM(HX_("origin",e6,19,01,4b));
            	}
}

} // end namespace feathers
} // end namespace controls
