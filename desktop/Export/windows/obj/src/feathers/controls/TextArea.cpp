// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_controls_Callout
#include <feathers/controls/Callout.h>
#endif
#ifndef INCLUDED_feathers_controls_TextArea
#include <feathers/controls/TextArea.h>
#endif
#ifndef INCLUDED_feathers_controls_TextCallout
#include <feathers/controls/TextCallout.h>
#endif
#ifndef INCLUDED_feathers_controls_TextInput
#include <feathers/controls/TextInput.h>
#endif
#ifndef INCLUDED_feathers_controls_TextInputState
#include <feathers/controls/TextInputState.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_BaseScrollContainer
#include <feathers/controls/supportClasses/BaseScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_IViewPort
#include <feathers/controls/supportClasses/IViewPort.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_TextFieldViewPort
#include <feathers/controls/supportClasses/TextFieldViewPort.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusManagerAware
#include <feathers/core/IFocusManagerAware.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IHTMLTextControl
#include <feathers/core/IHTMLTextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStageFocusDelegate
#include <feathers/core/IStageFocusDelegate.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_core_IStateObserver
#include <feathers/core/IStateObserver.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_InvalidationFlag
#include <feathers/core/InvalidationFlag.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_PopUpManager
#include <feathers/core/PopUpManager.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_events_FeathersEvent
#include <feathers/events/FeathersEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_style_IDarkModeTheme
#include <feathers/style/IDarkModeTheme.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_ITheme
#include <feathers/style/ITheme.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_text_TextFormat
#include <feathers/text/TextFormat.h>
#endif
#ifndef INCLUDED_feathers_themes_ClassVariantTheme
#include <feathers/themes/ClassVariantTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_BaseSteelTheme
#include <feathers/themes/steel/BaseSteelTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_components_SteelTextAreaStyles
#include <feathers/themes/steel/components/SteelTextAreaStyles.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_daf92d091ed090b4_52_new,"feathers.controls.TextArea","new",0xc6a45be6,"feathers.controls.TextArea.new","feathers/controls/TextArea.hx",52,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_119_get_tabEnabled,"feathers.controls.TextArea","get_tabEnabled",0x4c67352f,"feathers.controls.TextArea.get_tabEnabled","feathers/controls/TextArea.hx",119,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_138_get_editable,"feathers.controls.TextArea","get_editable",0x90808c67,"feathers.controls.TextArea.get_editable","feathers/controls/TextArea.hx",138,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_141_set_editable,"feathers.controls.TextArea","set_editable",0xa579afdb,"feathers.controls.TextArea.set_editable","feathers/controls/TextArea.hx",141,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_166_get_selectable,"feathers.controls.TextArea","get_selectable",0xd088f519,"feathers.controls.TextArea.get_selectable","feathers/controls/TextArea.hx",166,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_169_set_selectable,"feathers.controls.TextArea","set_selectable",0xf0a8dd8d,"feathers.controls.TextArea.set_selectable","feathers/controls/TextArea.hx",169,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_192_get_currentState,"feathers.controls.TextArea","get_currentState",0x5a64805b,"feathers.controls.TextArea.get_currentState","feathers/controls/TextArea.hx",192,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_195_set_enabled,"feathers.controls.TextArea","set_enabled",0x2348ed2a,"feathers.controls.TextArea.set_enabled","feathers/controls/TextArea.hx",195,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_226_get_text,"feathers.controls.TextArea","get_text",0x535e76f0,"feathers.controls.TextArea.get_text","feathers/controls/TextArea.hx",226,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_229_set_text,"feathers.controls.TextArea","set_text",0x01bbd064,"feathers.controls.TextArea.set_text","feathers/controls/TextArea.hx",229,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_252_get_baseline,"feathers.controls.TextArea","get_baseline",0xcc026448,"feathers.controls.TextArea.get_baseline","feathers/controls/TextArea.hx",252,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_280_get_prompt,"feathers.controls.TextArea","get_prompt",0x9dee52a7,"feathers.controls.TextArea.get_prompt","feathers/controls/TextArea.hx",280,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_283_set_prompt,"feathers.controls.TextArea","set_prompt",0xa16bf11b,"feathers.controls.TextArea.set_prompt","feathers/controls/TextArea.hx",283,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_314_get_restrict,"feathers.controls.TextArea","get_restrict",0xac7952ff,"feathers.controls.TextArea.get_restrict","feathers/controls/TextArea.hx",314,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_317_set_restrict,"feathers.controls.TextArea","set_restrict",0xc1727673,"feathers.controls.TextArea.set_restrict","feathers/controls/TextArea.hx",317,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_347_get_displayAsPassword,"feathers.controls.TextArea","get_displayAsPassword",0xc26cb2ec,"feathers.controls.TextArea.get_displayAsPassword","feathers/controls/TextArea.hx",347,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_350_set_displayAsPassword,"feathers.controls.TextArea","set_displayAsPassword",0x167580f8,"feathers.controls.TextArea.set_displayAsPassword","feathers/controls/TextArea.hx",350,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_384_get_errorString,"feathers.controls.TextArea","get_errorString",0xc5b5e2d6,"feathers.controls.TextArea.get_errorString","feathers/controls/TextArea.hx",384,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_387_set_errorString,"feathers.controls.TextArea","set_errorString",0xc1815fe2,"feathers.controls.TextArea.set_errorString","feathers/controls/TextArea.hx",387,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_408_get_errorStringCalloutOpen,"feathers.controls.TextArea","get_errorStringCalloutOpen",0x555d1f64,"feathers.controls.TextArea.get_errorStringCalloutOpen","feathers/controls/TextArea.hx",408,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_610_get_selectionAnchorIndex,"feathers.controls.TextArea","get_selectionAnchorIndex",0x9ee793b4,"feathers.controls.TextArea.get_selectionAnchorIndex","feathers/controls/TextArea.hx",610,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_629_get_selectionActiveIndex,"feathers.controls.TextArea","get_selectionActiveIndex",0x876166c3,"feathers.controls.TextArea.get_selectionActiveIndex","feathers/controls/TextArea.hx",629,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_645_get_maxChars,"feathers.controls.TextArea","get_maxChars",0xaaab775c,"feathers.controls.TextArea.get_maxChars","feathers/controls/TextArea.hx",645,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_648_set_maxChars,"feathers.controls.TextArea","set_maxChars",0xbfa49ad0,"feathers.controls.TextArea.set_maxChars","feathers/controls/TextArea.hx",648,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_677_get_measureViewPort,"feathers.controls.TextArea","get_measureViewPort",0x35b304a1,"feathers.controls.TextArea.get_measureViewPort","feathers/controls/TextArea.hx",677,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_684_get_stageFocusTarget,"feathers.controls.TextArea","get_stageFocusTarget",0xa09385ee,"feathers.controls.TextArea.get_stageFocusTarget","feathers/controls/TextArea.hx",684,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_703_getSkinForState,"feathers.controls.TextArea","getSkinForState",0x67de2821,"feathers.controls.TextArea.getSkinForState","feathers/controls/TextArea.hx",703,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_721_setSkinForState,"feathers.controls.TextArea","setSkinForState",0x63a9a52d,"feathers.controls.TextArea.setSkinForState","feathers/controls/TextArea.hx",721,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_752_getTextFormatForState,"feathers.controls.TextArea","getTextFormatForState",0x013e9568,"feathers.controls.TextArea.getTextFormatForState","feathers/controls/TextArea.hx",752,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_770_setTextFormatForState,"feathers.controls.TextArea","setTextFormatForState",0x55476374,"feathers.controls.TextArea.setTextFormatForState","feathers/controls/TextArea.hx",770,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_798_selectRange,"feathers.controls.TextArea","selectRange",0x523b2aa7,"feathers.controls.TextArea.selectRange","feathers/controls/TextArea.hx",798,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_811_selectAll,"feathers.controls.TextArea","selectAll",0xdc038f8b,"feathers.controls.TextArea.selectAll","feathers/controls/TextArea.hx",811,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_824_setTextPadding,"feathers.controls.TextArea","setTextPadding",0xea24465c,"feathers.controls.TextArea.setTextPadding","feathers/controls/TextArea.hx",824,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_831_showFocus,"feathers.controls.TextArea","showFocus",0x80f4b9a1,"feathers.controls.TextArea.showFocus","feathers/controls/TextArea.hx",831,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_838_dispose,"feathers.controls.TextArea","dispose",0xc3f04725,"feathers.controls.TextArea.dispose","feathers/controls/TextArea.hx",838,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_845_initializeTextAreaTheme,"feathers.controls.TextArea","initializeTextAreaTheme",0x94f037e5,"feathers.controls.TextArea.initializeTextAreaTheme","feathers/controls/TextArea.hx",845,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_849_update,"feathers.controls.TextArea","update",0xcbf07243,"feathers.controls.TextArea.update","feathers/controls/TextArea.hx",849,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_920_layoutChildren,"feathers.controls.TextArea","layoutChildren",0xdaeaf443,"feathers.controls.TextArea.layoutChildren","feathers/controls/TextArea.hx",920,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_925_addCurrentBackgroundSkin,"feathers.controls.TextArea","addCurrentBackgroundSkin",0xca643e7d,"feathers.controls.TextArea.addCurrentBackgroundSkin","feathers/controls/TextArea.hx",925,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_934_removeCurrentBackgroundSkin,"feathers.controls.TextArea","removeCurrentBackgroundSkin",0x7f936a46,"feathers.controls.TextArea.removeCurrentBackgroundSkin","feathers/controls/TextArea.hx",934,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_944_refreshTextStyles,"feathers.controls.TextArea","refreshTextStyles",0x6d87ae70,"feathers.controls.TextArea.refreshTextStyles","feathers/controls/TextArea.hx",944,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_962_refreshPrompt,"feathers.controls.TextArea","refreshPrompt",0xb68b64e5,"feathers.controls.TextArea.refreshPrompt","feathers/controls/TextArea.hx",962,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_982_refreshPromptText,"feathers.controls.TextArea","refreshPromptText",0x7ca33432,"feathers.controls.TextArea.refreshPromptText","feathers/controls/TextArea.hx",982,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1009_refreshPromptStyles,"feathers.controls.TextArea","refreshPromptStyles",0x9048f8e7,"feathers.controls.TextArea.refreshPromptStyles","feathers/controls/TextArea.hx",1009,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1035_getCurrentPromptTextFormat,"feathers.controls.TextArea","getCurrentPromptTextFormat",0x9d267425,"feathers.controls.TextArea.getCurrentPromptTextFormat","feathers/controls/TextArea.hx",1035,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1043_refreshErrorString,"feathers.controls.TextArea","refreshErrorString",0x8a97efd8,"feathers.controls.TextArea.refreshErrorString","feathers/controls/TextArea.hx",1043,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1056_layoutPrompt,"feathers.controls.TextArea","layoutPrompt",0xd65da3a8,"feathers.controls.TextArea.layoutPrompt","feathers/controls/TextArea.hx",1056,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1084_getCurrentBackgroundSkin,"feathers.controls.TextArea","getCurrentBackgroundSkin",0x98e8ede8,"feathers.controls.TextArea.getCurrentBackgroundSkin","feathers/controls/TextArea.hx",1084,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1092_getCurrentTextFormat,"feathers.controls.TextArea","getCurrentTextFormat",0x35dbe5a1,"feathers.controls.TextArea.getCurrentTextFormat","feathers/controls/TextArea.hx",1092,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1103_createErrorCallout,"feathers.controls.TextArea","createErrorCallout",0x3cf0bc1e,"feathers.controls.TextArea.createErrorCallout","feathers/controls/TextArea.hx",1103,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1116_destroyErrorCallout,"feathers.controls.TextArea","destroyErrorCallout",0x2bb4a368,"feathers.controls.TextArea.destroyErrorCallout","feathers/controls/TextArea.hx",1116,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1126_changeState,"feathers.controls.TextArea","changeState",0xbe81a007,"feathers.controls.TextArea.changeState","feathers/controls/TextArea.hx",1126,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1139_refreshState,"feathers.controls.TextArea","refreshState",0x9d4e45f0,"feathers.controls.TextArea.refreshState","feathers/controls/TextArea.hx",1139,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1157_textArea_focusInHandler,"feathers.controls.TextArea","textArea_focusInHandler",0xcd7f98f8,"feathers.controls.TextArea.textArea_focusInHandler","feathers/controls/TextArea.hx",1157,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1169_textArea_focusOutHandler,"feathers.controls.TextArea","textArea_focusOutHandler",0x97ab9ee9,"feathers.controls.TextArea.textArea_focusOutHandler","feathers/controls/TextArea.hx",1169,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1172_baseScrollContainer_keyDownHandler,"feathers.controls.TextArea","baseScrollContainer_keyDownHandler",0x99efc4ff,"feathers.controls.TextArea.baseScrollContainer_keyDownHandler","feathers/controls/TextArea.hx",1172,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1176_textArea_viewPort_changeHandler,"feathers.controls.TextArea","textArea_viewPort_changeHandler",0x7a1c400c,"feathers.controls.TextArea.textArea_viewPort_changeHandler","feathers/controls/TextArea.hx",1176,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1186_textArea_textFormat_changeHandler,"feathers.controls.TextArea","textArea_textFormat_changeHandler",0x88f2408a,"feathers.controls.TextArea.textArea_textFormat_changeHandler","feathers/controls/TextArea.hx",1186,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_1190_textArea_promptTextFormat_changeHandler,"feathers.controls.TextArea","textArea_promptTextFormat_changeHandler",0xaae8e48e,"feathers.controls.TextArea.textArea_promptTextFormat_changeHandler","feathers/controls/TextArea.hx",1190,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_e0b9e3d78fefef05_42_get_styleContext,"feathers.controls.TextArea","get_styleContext",0xd5ceb601,"feathers.controls.TextArea.get_styleContext","feathers/macros/StyleContextMacro.hx",42,0xea61cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_85_get_smoothScrolling,"feathers.controls.TextArea","get_smoothScrolling",0xd443a384,"feathers.controls.TextArea.get_smoothScrolling","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_99_set_smoothScrolling,"feathers.controls.TextArea","set_smoothScrolling",0x10e09690,"feathers.controls.TextArea.set_smoothScrolling","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_131_clearStyle_smoothScrolling,"feathers.controls.TextArea","clearStyle_smoothScrolling",0xbdcdb106,"feathers.controls.TextArea.clearStyle_smoothScrolling","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_85_get_textFormat,"feathers.controls.TextArea","get_textFormat",0x40dd4e47,"feathers.controls.TextArea.get_textFormat","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_99_set_textFormat,"feathers.controls.TextArea","set_textFormat",0x60fd36bb,"feathers.controls.TextArea.set_textFormat","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_131_clearStyle_textFormat,"feathers.controls.TextArea","clearStyle_textFormat",0x86d23005,"feathers.controls.TextArea.clearStyle_textFormat","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_85_get_disabledTextFormat,"feathers.controls.TextArea","get_disabledTextFormat",0x3c8081e3,"feathers.controls.TextArea.get_disabledTextFormat","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_99_set_disabledTextFormat,"feathers.controls.TextArea","set_disabledTextFormat",0x702bfe57,"feathers.controls.TextArea.set_disabledTextFormat","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_131_clearStyle_disabledTextFormat,"feathers.controls.TextArea","clearStyle_disabledTextFormat",0x52ea51a1,"feathers.controls.TextArea.clearStyle_disabledTextFormat","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_85_get_promptTextFormat,"feathers.controls.TextArea","get_promptTextFormat",0x0e10dd4b,"feathers.controls.TextArea.get_promptTextFormat","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_99_set_promptTextFormat,"feathers.controls.TextArea","set_promptTextFormat",0xdac894bf,"feathers.controls.TextArea.set_promptTextFormat","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_131_clearStyle_promptTextFormat,"feathers.controls.TextArea","clearStyle_promptTextFormat",0x7d52a189,"feathers.controls.TextArea.clearStyle_promptTextFormat","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_85_get_embedFonts,"feathers.controls.TextArea","get_embedFonts",0x9b4005ae,"feathers.controls.TextArea.get_embedFonts","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_99_set_embedFonts,"feathers.controls.TextArea","set_embedFonts",0xbb5fee22,"feathers.controls.TextArea.set_embedFonts","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_131_clearStyle_embedFonts,"feathers.controls.TextArea","clearStyle_embedFonts",0xe134e76c,"feathers.controls.TextArea.clearStyle_embedFonts","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_85_get_wordWrap,"feathers.controls.TextArea","get_wordWrap",0xbbb59c77,"feathers.controls.TextArea.get_wordWrap","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_99_set_wordWrap,"feathers.controls.TextArea","set_wordWrap",0xd0aebfeb,"feathers.controls.TextArea.set_wordWrap","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_131_clearStyle_wordWrap,"feathers.controls.TextArea","clearStyle_wordWrap",0xd739f2b5,"feathers.controls.TextArea.clearStyle_wordWrap","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_85_get_textPaddingTop,"feathers.controls.TextArea","get_textPaddingTop",0xfb898454,"feathers.controls.TextArea.get_textPaddingTop","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_99_set_textPaddingTop,"feathers.controls.TextArea","set_textPaddingTop",0xd838b6c8,"feathers.controls.TextArea.set_textPaddingTop","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_131_clearStyle_textPaddingTop,"feathers.controls.TextArea","clearStyle_textPaddingTop",0xda251d12,"feathers.controls.TextArea.clearStyle_textPaddingTop","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_85_get_textPaddingRight,"feathers.controls.TextArea","get_textPaddingRight",0xe967575b,"feathers.controls.TextArea.get_textPaddingRight","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_99_set_textPaddingRight,"feathers.controls.TextArea","set_textPaddingRight",0xb61f0ecf,"feathers.controls.TextArea.set_textPaddingRight","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_131_clearStyle_textPaddingRight,"feathers.controls.TextArea","clearStyle_textPaddingRight",0x58a91b99,"feathers.controls.TextArea.clearStyle_textPaddingRight","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_85_get_textPaddingBottom,"feathers.controls.TextArea","get_textPaddingBottom",0x6857aa8c,"feathers.controls.TextArea.get_textPaddingBottom","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_99_set_textPaddingBottom,"feathers.controls.TextArea","set_textPaddingBottom",0xbc607898,"feathers.controls.TextArea.set_textPaddingBottom","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_131_clearStyle_textPaddingBottom,"feathers.controls.TextArea","clearStyle_textPaddingBottom",0x52a19c8e,"feathers.controls.TextArea.clearStyle_textPaddingBottom","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_85_get_textPaddingLeft,"feathers.controls.TextArea","get_textPaddingLeft",0x1778f168,"feathers.controls.TextArea.get_textPaddingLeft","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_99_set_textPaddingLeft,"feathers.controls.TextArea","set_textPaddingLeft",0x5415e474,"feathers.controls.TextArea.set_textPaddingLeft","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_131_clearStyle_textPaddingLeft,"feathers.controls.TextArea","clearStyle_textPaddingLeft",0x0102feea,"feathers.controls.TextArea.clearStyle_textPaddingLeft","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_85_get_showPromptWhenEmptyAndFocused,"feathers.controls.TextArea","get_showPromptWhenEmptyAndFocused",0x5d2b6ccf,"feathers.controls.TextArea.get_showPromptWhenEmptyAndFocused","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_99_set_showPromptWhenEmptyAndFocused,"feathers.controls.TextArea","set_showPromptWhenEmptyAndFocused",0xc7371cdb,"feathers.controls.TextArea.set_showPromptWhenEmptyAndFocused","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_131_clearStyle_showPromptWhenEmptyAndFocused,"feathers.controls.TextArea","clearStyle_showPromptWhenEmptyAndFocused",0x931959d1,"feathers.controls.TextArea.clearStyle_showPromptWhenEmptyAndFocused","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_85_get_customErrorCalloutVariant,"feathers.controls.TextArea","get_customErrorCalloutVariant",0x742b7d49,"feathers.controls.TextArea.get_customErrorCalloutVariant","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_99_set_customErrorCalloutVariant,"feathers.controls.TextArea","set_customErrorCalloutVariant",0x36033755,"feathers.controls.TextArea.set_customErrorCalloutVariant","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d08b6d6560ae58f_131_clearStyle_customErrorCalloutVariant,"feathers.controls.TextArea","clearStyle_customErrorCalloutVariant",0x2a9a414b,"feathers.controls.TextArea.clearStyle_customErrorCalloutVariant","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_52_boot,"feathers.controls.TextArea","boot",0x01450dec,"feathers.controls.TextArea.boot","feathers/controls/TextArea.hx",52,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_53_boot,"feathers.controls.TextArea","boot",0x01450dec,"feathers.controls.TextArea.boot","feathers/controls/TextArea.hx",53,0x7328f66a)
HX_LOCAL_STACK_FRAME(_hx_pos_daf92d091ed090b4_68_boot,"feathers.controls.TextArea","boot",0x01450dec,"feathers.controls.TextArea.boot","feathers/controls/TextArea.hx",68,0x7328f66a)
namespace feathers{
namespace controls{

void TextArea_obj::__construct(::String __o_text,::String prompt, ::Dynamic changeListener){
            		::String text = __o_text;
            		if (::hx::IsNull(__o_text)) text = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_daf92d091ed090b4_52_new)
HXLINE( 672)		this->_hx___customErrorCalloutVariant = null();
HXLINE( 592)		this->_hx___showPromptWhenEmptyAndFocused = true;
HXLINE( 574)		this->_hx___textPaddingLeft = ((Float)0.0);
HXLINE( 558)		this->_hx___textPaddingBottom = ((Float)0.0);
HXLINE( 542)		this->_hx___textPaddingRight = ((Float)0.0);
HXLINE( 526)		this->_hx___textPaddingTop = ((Float)0.0);
HXLINE( 510)		this->_hx___wordWrap = true;
HXLINE( 495)		this->_hx___embedFonts = false;
HXLINE( 479)		this->_hx___promptTextFormat = null();
HXLINE( 463)		this->_hx___disabledTextFormat = null();
HXLINE( 444)		this->_hx___textFormat = null();
HXLINE( 423)		this->_hx___smoothScrolling = false;
HXLINE( 687)		this->_stateToSkin =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 674)		this->_ignoreViewPortTextChange = false;
HXLINE( 657)		this->_previousCustomErrorCalloutVariant = null();
HXLINE( 632)		this->_maxChars = 0;
HXLINE( 425)		this->_stateToTextFormat =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 359)		this->_errorString = null();
HXLINE( 326)		this->_displayAsPassword = false;
HXLINE( 178)		this->_currentState = ::feathers::controls::TextInputState_obj::ENABLED_dyn();
HXLINE( 150)		this->_selectable = true;
HXLINE( 122)		this->_editable = true;
HXLINE( 113)		this->_updatedPromptStyles = false;
HXLINE( 112)		this->_previousSimplePromptTextFormat = null();
HXLINE( 111)		this->_previousPromptTextFormat = null();
HXLINE( 110)		this->_previousPrompt = null();
HXLINE( 109)		this->_previousSimpleTextFormat = null();
HXLINE( 108)		this->_previousTextFormat = null();
HXLINE(  76)		this->initializeTextAreaTheme();
HXLINE(  78)		super::__construct();
HXLINE(  80)		this->set_text(text);
HXLINE(  81)		this->set_prompt(prompt);
HXLINE(  83)		this->set_tabEnabled(true);
HXLINE(  84)		this->set_tabChildren(false);
HXLINE(  85)		this->focusRect = null();
HXLINE(  87)		if (::hx::IsNull( this->get_viewPort() )) {
HXLINE(  88)			this->textFieldViewPort =  ::feathers::controls::supportClasses::TextFieldViewPort_obj::__alloc( HX_CTX );
HXLINE(  89)			this->textFieldViewPort->set_wordWrap(true);
HXLINE(  90)			this->textFieldViewPort->set_multiline(true);
HXLINE(  91)			this->textFieldViewPort->addEventListener(HX_("change",70,91,72,b7),this->textArea_viewPort_changeHandler_dyn(),null(),null(),null());
HXLINE(  92)			this->addChild(this->textFieldViewPort);
HXLINE(  93)			this->set_viewPort(this->textFieldViewPort);
            		}
HXLINE(  96)		this->addEventListener(HX_("focusIn",dd,45,83,41),this->textArea_focusInHandler_dyn(),null(),null(),null());
HXLINE(  97)		this->addEventListener(HX_("focusOut",96,6f,5e,11),this->textArea_focusOutHandler_dyn(),null(),null(),null());
HXLINE(  99)		if (::hx::IsNotNull( changeListener )) {
HXLINE( 100)			this->addEventListener(HX_("change",70,91,72,b7),changeListener,null(),null(),null());
            		}
            	}

Dynamic TextArea_obj::__CreateEmpty() { return new TextArea_obj; }

void *TextArea_obj::_hx_vtable = 0;

Dynamic TextArea_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextArea_obj > _hx_result = new TextArea_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TextArea_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x142d1584) {
		if (inClassId<=(int)0x093ab78b) {
			if (inClassId<=(int)0x0498edf2) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x0498edf2;
				}
			} else {
				return inClassId==(int)0x093ab78b;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x142d1584;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			if (inClassId<=(int)0x4033f4be) {
				return inClassId==(int)0x1f4df417 || inClassId==(int)0x4033f4be;
			} else {
				return inClassId==(int)0x4af7dd8e;
			}
		} else {
			return inClassId==(int)0x58123034 || inClassId==(int)0x6b353933;
		}
	}
}

static ::feathers::core::IStageFocusDelegate_obj _hx_feathers_controls_TextArea__hx_feathers_core_IStageFocusDelegate= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextArea_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextArea_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_focusEnabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextArea_obj::set_focusEnabled,
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_focusOwner,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::TextArea_obj::set_focusOwner,
	( void (::hx::Object::*)(bool))&::feathers::controls::TextArea_obj::showFocus,
	(  ::openfl::display::InteractiveObject (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_stageFocusTarget,
};

static ::feathers::core::IStateContext_obj _hx_feathers_controls_TextArea__hx_feathers_core_IStateContext= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextArea_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::willTrigger,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_currentState_2aa2127b,
};

static ::openfl::events::IEventDispatcher_obj _hx_feathers_controls_TextArea__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextArea_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::willTrigger,
};

static ::feathers::core::ITextControl_obj _hx_feathers_controls_TextArea__hx_feathers_core_ITextControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextArea_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextArea_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextArea_obj::set_enabled,
	( ::String (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_toolTip,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::set_toolTip,
	( void (::hx::Object::*)())&::feathers::controls::TextArea_obj::initializeNow,
	( void (::hx::Object::*)())&::feathers::controls::TextArea_obj::dispose,
	( ::String (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_text,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::set_text,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_baseline,
};

static ::feathers::core::IFocusObject_obj _hx_feathers_controls_TextArea__hx_feathers_core_IFocusObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextArea_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextArea_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_focusEnabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextArea_obj::set_focusEnabled,
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_focusOwner,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::TextArea_obj::set_focusOwner,
	( void (::hx::Object::*)(bool))&::feathers::controls::TextArea_obj::showFocus,
};

static ::feathers::core::IFocusManagerAware_obj _hx_feathers_controls_TextArea__hx_feathers_core_IFocusManagerAware= {
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_focusManager,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::TextArea_obj::set_focusManager,
};

static ::feathers::core::IUIControl_obj _hx_feathers_controls_TextArea__hx_feathers_core_IUIControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextArea_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextArea_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextArea_obj::set_enabled,
	( ::String (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_toolTip,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::set_toolTip,
	( void (::hx::Object::*)())&::feathers::controls::TextArea_obj::initializeNow,
	( void (::hx::Object::*)())&::feathers::controls::TextArea_obj::dispose,
};

static ::feathers::core::IDisplayObject_obj _hx_feathers_controls_TextArea__hx_feathers_core_IDisplayObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextArea_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextArea_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextArea_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextArea_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextArea_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextArea_obj::set_visible,
};

 ::Dynamic TextArea_obj::get_currentState_2aa2127b() {
			return get_currentState();
}
void *TextArea_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x4afbe419: return &_hx_feathers_controls_TextArea__hx_feathers_core_IStageFocusDelegate;
		case (int)0xa18fd6d8: return &_hx_feathers_controls_TextArea__hx_feathers_core_IStateContext;
		case (int)0x87530281: return &_hx_feathers_controls_TextArea__hx_openfl_events_IEventDispatcher;
		case (int)0xfccd2876: return &_hx_feathers_controls_TextArea__hx_feathers_core_ITextControl;
		case (int)0x701686fd: return &_hx_feathers_controls_TextArea__hx_feathers_core_IFocusObject;
		case (int)0x7031642f: return &_hx_feathers_controls_TextArea__hx_feathers_core_IFocusManagerAware;
		case (int)0x2696a04f: return &_hx_feathers_controls_TextArea__hx_feathers_core_IUIControl;
		case (int)0x3a979a67: return &_hx_feathers_controls_TextArea__hx_feathers_core_IDisplayObject;
	}
	return super::_hx_getInterface(inHash);
}

bool TextArea_obj::get_tabEnabled(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_119_get_tabEnabled)
HXDLIN( 119)		if (this->_enabled) {
HXDLIN( 119)			return this->get_rawTabEnabled();
            		}
            		else {
HXDLIN( 119)			return false;
            		}
HXDLIN( 119)		return false;
            	}


bool TextArea_obj::get_editable(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_138_get_editable)
HXDLIN( 138)		return this->_editable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_editable,return )

bool TextArea_obj::set_editable(bool value){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_141_set_editable)
HXLINE( 142)		if ((this->_editable == value)) {
HXLINE( 143)			return this->_editable;
            		}
HXLINE( 145)		this->_editable = value;
HXLINE( 146)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STATE_dyn());
HXLINE( 147)		return this->_editable;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_editable,return )

bool TextArea_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_166_get_selectable)
HXDLIN( 166)		return this->_selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_selectable,return )

bool TextArea_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_169_set_selectable)
HXLINE( 170)		if ((this->_selectable == value)) {
HXLINE( 171)			return this->_selectable;
            		}
HXLINE( 173)		this->_selectable = value;
HXLINE( 174)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 175)		return this->_selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_selectable,return )

 ::feathers::controls::TextInputState TextArea_obj::get_currentState(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_192_get_currentState)
HXDLIN( 192)		return this->_currentState;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_currentState,return )

bool TextArea_obj::set_enabled(bool value){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_195_set_enabled)
HXLINE( 196)		this->super::set_enabled(value);
HXLINE( 197)		this->refreshState();
HXLINE( 198)		return this->_enabled;
            	}


::String TextArea_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_226_get_text)
HXDLIN( 226)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_text,return )

::String TextArea_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_229_set_text)
HXLINE( 230)		if (::hx::IsNull( value )) {
HXLINE( 232)			if ((this->_text.length == 0)) {
HXLINE( 234)				return this->_text;
            			}
HXLINE( 236)			value = HX_("",00,00,00,00);
            		}
HXLINE( 238)		if ((this->_text == value)) {
HXLINE( 239)			return this->_text;
            		}
HXLINE( 241)		this->_text = value;
HXLINE( 242)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 243)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 244)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_text,return )

Float TextArea_obj::get_baseline(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_252_get_baseline)
HXLINE( 253)		if (::hx::IsNull( this->textFieldViewPort )) {
HXLINE( 254)			return ((Float)0.0);
            		}
HXLINE( 256)		Float _hx_tmp = this->get_paddingTop();
HXDLIN( 256)		return (_hx_tmp + this->textFieldViewPort->get_baseline());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_baseline,return )

::String TextArea_obj::get_prompt(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_280_get_prompt)
HXDLIN( 280)		return this->_prompt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_prompt,return )

::String TextArea_obj::set_prompt(::String value){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_283_set_prompt)
HXLINE( 284)		if ((this->_prompt == value)) {
HXLINE( 285)			return this->_prompt;
            		}
HXLINE( 287)		this->_prompt = value;
HXLINE( 288)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 289)		return this->_prompt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_prompt,return )

::String TextArea_obj::get_restrict(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_314_get_restrict)
HXDLIN( 314)		return this->_hx___restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_restrict,return )

::String TextArea_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_317_set_restrict)
HXLINE( 318)		if ((this->_hx___restrict == value)) {
HXLINE( 319)			return this->_hx___restrict;
            		}
HXLINE( 321)		this->_hx___restrict = value;
HXLINE( 322)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 323)		return this->_hx___restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_restrict,return )

bool TextArea_obj::get_displayAsPassword(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_347_get_displayAsPassword)
HXDLIN( 347)		return this->_displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_displayAsPassword,return )

bool TextArea_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_350_set_displayAsPassword)
HXLINE( 351)		if ((this->_displayAsPassword == value)) {
HXLINE( 352)			return this->_displayAsPassword;
            		}
HXLINE( 354)		this->_displayAsPassword = value;
HXLINE( 355)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 356)		return this->_displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_displayAsPassword,return )

::String TextArea_obj::get_errorString(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_384_get_errorString)
HXDLIN( 384)		return this->_errorString;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_errorString,return )

::String TextArea_obj::set_errorString(::String value){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_387_set_errorString)
HXLINE( 388)		if ((this->_errorString == value)) {
HXLINE( 389)			return this->_errorString;
            		}
HXLINE( 391)		this->_errorString = value;
HXLINE( 392)		this->refreshState();
HXLINE( 393)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 394)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_errorString,return )

bool TextArea_obj::get_errorStringCalloutOpen(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_408_get_errorStringCalloutOpen)
HXDLIN( 408)		if (::hx::IsNotNull( this->errorStringCallout )) {
HXDLIN( 408)			return ::hx::IsNotNull( this->errorStringCallout->parent );
            		}
            		else {
HXDLIN( 408)			return false;
            		}
HXDLIN( 408)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_errorStringCalloutOpen,return )

int TextArea_obj::get_selectionAnchorIndex(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_610_get_selectionAnchorIndex)
HXDLIN( 610)		return this->textFieldViewPort->get_selectionAnchorIndex();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_selectionAnchorIndex,return )

int TextArea_obj::get_selectionActiveIndex(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_629_get_selectionActiveIndex)
HXDLIN( 629)		return this->textFieldViewPort->get_selectionActiveIndex();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_selectionActiveIndex,return )

int TextArea_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_645_get_maxChars)
HXDLIN( 645)		return this->_maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_maxChars,return )

int TextArea_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_648_set_maxChars)
HXLINE( 649)		if ((this->_maxChars == value)) {
HXLINE( 650)			return this->_maxChars;
            		}
HXLINE( 652)		this->_maxChars = value;
HXLINE( 653)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 654)		return this->_maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_maxChars,return )

bool TextArea_obj::get_measureViewPort(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_677_get_measureViewPort)
HXDLIN( 677)		return false;
            	}


 ::openfl::display::InteractiveObject TextArea_obj::get_stageFocusTarget(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_684_get_stageFocusTarget)
HXDLIN( 684)		return this->textFieldViewPort;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_stageFocusTarget,return )

 ::openfl::display::DisplayObject TextArea_obj::getSkinForState( ::feathers::controls::TextInputState state){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_703_getSkinForState)
HXDLIN( 703)		return this->_stateToSkin->get(state).StaticCast<  ::openfl::display::DisplayObject >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,getSkinForState,return )

void TextArea_obj::setSkinForState( ::feathers::controls::TextInputState state, ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_721_setSkinForState)
HXLINE( 722)		if (!(this->setStyle(HX_("setSkinForState",a7,e8,72,5e),state))) {
HXLINE( 723)			return;
            		}
HXLINE( 725)		 ::openfl::display::DisplayObject oldSkin = this->_stateToSkin->get(state).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 726)		bool _hx_tmp;
HXDLIN( 726)		if (::hx::IsNotNull( oldSkin )) {
HXLINE( 726)			_hx_tmp = ::hx::IsInstanceEq( oldSkin,this->_currentBackgroundSkin );
            		}
            		else {
HXLINE( 726)			_hx_tmp = false;
            		}
HXDLIN( 726)		if (_hx_tmp) {
HXLINE( 727)			this->removeCurrentBackgroundSkin(oldSkin);
HXLINE( 728)			this->_currentBackgroundSkin = null();
            		}
HXLINE( 730)		if (::hx::IsNull( skin )) {
HXLINE( 731)			this->_stateToSkin->remove(state);
            		}
            		else {
HXLINE( 733)			this->_stateToSkin->set(state,skin);
            		}
HXLINE( 735)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextArea_obj,setSkinForState,(void))

 ::feathers::text::TextFormat TextArea_obj::getTextFormatForState( ::feathers::controls::TextInputState state){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_752_getTextFormatForState)
HXDLIN( 752)		return this->_stateToTextFormat->get(state).StaticCast<  ::feathers::text::TextFormat >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,getTextFormatForState,return )

void TextArea_obj::setTextFormatForState( ::feathers::controls::TextInputState state, ::feathers::text::TextFormat textFormat){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_770_setTextFormatForState)
HXLINE( 771)		if (!(this->setStyle(HX_("setTextFormatForState",6e,7e,1f,fc),state))) {
HXLINE( 772)			return;
            		}
HXLINE( 774)		if (::hx::IsNull( textFormat )) {
HXLINE( 775)			this->_stateToTextFormat->remove(state);
            		}
            		else {
HXLINE( 777)			this->_stateToTextFormat->set(state,textFormat);
            		}
HXLINE( 779)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextArea_obj,setTextFormatForState,(void))

void TextArea_obj::selectRange(int anchorIndex,int activeIndex){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_798_selectRange)
HXDLIN( 798)		this->textFieldViewPort->selectRange(anchorIndex,activeIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextArea_obj,selectRange,(void))

void TextArea_obj::selectAll(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_811_selectAll)
HXDLIN( 811)		this->textFieldViewPort->selectRange(0,this->_text.length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,selectAll,(void))

void TextArea_obj::setTextPadding(Float value){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_824_setTextPadding)
HXLINE( 825)		this->set_textPaddingTop(value);
HXLINE( 826)		this->set_textPaddingRight(value);
HXLINE( 827)		this->set_textPaddingBottom(value);
HXLINE( 828)		this->set_textPaddingLeft(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,setTextPadding,(void))

void TextArea_obj::showFocus(bool show){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_831_showFocus)
HXLINE( 832)		this->super::showFocus(show);
HXLINE( 833)		if (show) {
HXLINE( 834)			this->selectRange(this->_text.length,0);
            		}
            	}


void TextArea_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_838_dispose)
HXLINE( 839)		this->destroyErrorCallout();
HXLINE( 840)		this->super::dispose();
            	}


void TextArea_obj::initializeTextAreaTheme(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_845_initializeTextAreaTheme)
HXDLIN( 845)		::feathers::themes::steel::components::SteelTextAreaStyles_obj::initialize(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,initializeTextAreaTheme,(void))

void TextArea_obj::update(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_849_update)
HXLINE( 850)		bool dataInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 851)		bool sizeInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
HXLINE( 852)		bool stateInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::STATE_dyn());
HXLINE( 853)		bool stylesInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 854)		::String _hx_tmp = this->_previousCustomErrorCalloutVariant;
HXDLIN( 854)		if ((_hx_tmp != this->get_customErrorCalloutVariant())) {
HXLINE( 855)			this->setInvalidationFlag(::feathers::controls::TextArea_obj::INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY);
            		}
HXLINE( 857)		bool errorCalloutFactoryInvalid = this->isInvalid(::feathers::controls::TextArea_obj::INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY);
HXLINE( 859)		this->_updatedPromptStyles = false;
HXLINE( 863)		bool _hx_tmp1;
HXDLIN( 863)		if (!(errorCalloutFactoryInvalid)) {
HXLINE( 863)			_hx_tmp1 = dataInvalid;
            		}
            		else {
HXLINE( 863)			_hx_tmp1 = true;
            		}
HXDLIN( 863)		if (_hx_tmp1) {
HXLINE( 864)			this->createErrorCallout();
            		}
HXLINE( 867)		bool _hx_tmp2;
HXDLIN( 867)		if (!(dataInvalid)) {
HXLINE( 867)			_hx_tmp2 = stateInvalid;
            		}
            		else {
HXLINE( 867)			_hx_tmp2 = true;
            		}
HXDLIN( 867)		if (_hx_tmp2) {
HXLINE( 868)			this->refreshPrompt();
            		}
HXLINE( 871)		bool _hx_tmp3;
HXDLIN( 871)		if (!(stylesInvalid)) {
HXLINE( 871)			_hx_tmp3 = stateInvalid;
            		}
            		else {
HXLINE( 871)			_hx_tmp3 = true;
            		}
HXDLIN( 871)		if (_hx_tmp3) {
HXLINE( 872)			this->refreshPromptStyles();
            		}
HXLINE( 875)		bool _hx_tmp4;
HXDLIN( 875)		bool _hx_tmp5;
HXDLIN( 875)		if (!(dataInvalid)) {
HXLINE( 875)			_hx_tmp5 = stylesInvalid;
            		}
            		else {
HXLINE( 875)			_hx_tmp5 = true;
            		}
HXDLIN( 875)		if (!(_hx_tmp5)) {
HXLINE( 875)			_hx_tmp4 = sizeInvalid;
            		}
            		else {
HXLINE( 875)			_hx_tmp4 = true;
            		}
HXDLIN( 875)		if (_hx_tmp4) {
HXLINE( 876)			this->refreshPromptText(sizeInvalid);
            		}
HXLINE( 879)		if (stylesInvalid) {
HXLINE( 880)			this->refreshTextStyles();
HXLINE( 881)			 ::feathers::controls::supportClasses::TextFieldViewPort _hx_tmp6 = this->textFieldViewPort;
HXDLIN( 881)			_hx_tmp6->set_embedFonts(this->get_embedFonts());
HXLINE( 882)			 ::feathers::controls::supportClasses::TextFieldViewPort _hx_tmp7 = this->textFieldViewPort;
HXDLIN( 882)			_hx_tmp7->set_wordWrap(this->get_wordWrap());
HXLINE( 883)			 ::feathers::controls::supportClasses::TextFieldViewPort _hx_tmp8 = this->textFieldViewPort;
HXDLIN( 883)			_hx_tmp8->set_paddingTop(this->get_textPaddingTop());
HXLINE( 884)			 ::feathers::controls::supportClasses::TextFieldViewPort _hx_tmp9 = this->textFieldViewPort;
HXDLIN( 884)			_hx_tmp9->set_paddingRight(this->get_textPaddingRight());
HXLINE( 885)			 ::feathers::controls::supportClasses::TextFieldViewPort _hx_tmp10 = this->textFieldViewPort;
HXDLIN( 885)			_hx_tmp10->set_paddingBottom(this->get_textPaddingBottom());
HXLINE( 886)			 ::feathers::controls::supportClasses::TextFieldViewPort _hx_tmp11 = this->textFieldViewPort;
HXDLIN( 886)			_hx_tmp11->set_paddingLeft(this->get_textPaddingLeft());
HXLINE( 887)			 ::feathers::controls::supportClasses::TextFieldViewPort _hx_tmp12 = this->textFieldViewPort;
HXDLIN( 887)			_hx_tmp12->set_smoothScrolling(this->get_smoothScrolling());
            		}
HXLINE( 890)		if (dataInvalid) {
HXLINE( 891)			bool oldIgnoreViewPortTextChange = this->_ignoreViewPortTextChange;
HXLINE( 892)			this->_ignoreViewPortTextChange = true;
HXLINE( 893)			this->textFieldViewPort->set_text(this->_text);
HXLINE( 894)			this->_ignoreViewPortTextChange = oldIgnoreViewPortTextChange;
HXLINE( 895)			this->textFieldViewPort->set_restrict(this->_hx___restrict);
HXLINE( 896)			this->textFieldViewPort->set_maxChars(this->_maxChars);
HXLINE( 897)			this->textFieldViewPort->set_displayAsPassword(this->_displayAsPassword);
HXLINE( 898)			if (this->_editable) {
HXLINE( 899)				this->textFieldViewPort->set_selectable(this->_enabled);
            			}
            			else {
HXLINE( 901)				bool _hx_tmp13;
HXDLIN( 901)				if (this->_enabled) {
HXLINE( 901)					_hx_tmp13 = this->_selectable;
            				}
            				else {
HXLINE( 901)					_hx_tmp13 = false;
            				}
HXDLIN( 901)				this->textFieldViewPort->set_selectable(_hx_tmp13);
            			}
            		}
HXLINE( 905)		if (stateInvalid) {
HXLINE( 906)			this->textFieldViewPort->set_enabled(this->_enabled);
HXLINE( 907)			 ::Dynamic _hx_tmp14;
HXDLIN( 907)			if (this->_editable) {
HXLINE( 907)				_hx_tmp14 = 1;
            			}
            			else {
HXLINE( 907)				_hx_tmp14 = 0;
            			}
HXDLIN( 907)			this->textFieldViewPort->set_textFieldType(_hx_tmp14);
            		}
HXLINE( 910)		this->super::update();
HXLINE( 914)		bool _hx_tmp15;
HXDLIN( 914)		bool _hx_tmp16;
HXDLIN( 914)		if (!(errorCalloutFactoryInvalid)) {
HXLINE( 914)			_hx_tmp16 = stateInvalid;
            		}
            		else {
HXLINE( 914)			_hx_tmp16 = true;
            		}
HXDLIN( 914)		if (!(_hx_tmp16)) {
HXLINE( 914)			_hx_tmp15 = dataInvalid;
            		}
            		else {
HXLINE( 914)			_hx_tmp15 = true;
            		}
HXDLIN( 914)		if (_hx_tmp15) {
HXLINE( 915)			this->refreshErrorString();
            		}
HXLINE( 917)		this->_previousCustomErrorCalloutVariant = this->get_customErrorCalloutVariant();
            	}


void TextArea_obj::layoutChildren(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_920_layoutChildren)
HXLINE( 921)		this->super::layoutChildren();
HXLINE( 922)		this->layoutPrompt();
            	}


void TextArea_obj::addCurrentBackgroundSkin( ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_925_addCurrentBackgroundSkin)
HXLINE( 926)		if (::hx::IsNotNull( skin )) {
HXLINE( 927)			if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::core::IStateObserver >())) {
HXLINE( 928)				::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(skin,0xb36ec70d),::hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 931)		this->super::addCurrentBackgroundSkin(skin);
            	}


void TextArea_obj::removeCurrentBackgroundSkin( ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_934_removeCurrentBackgroundSkin)
HXLINE( 935)		if (::hx::IsNull( skin )) {
HXLINE( 936)			return;
            		}
HXLINE( 938)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::core::IStateObserver >())) {
HXLINE( 939)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(skin,0xb36ec70d),null());
            		}
HXLINE( 941)		this->super::removeCurrentBackgroundSkin(skin);
            	}


void TextArea_obj::refreshTextStyles(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_944_refreshTextStyles)
HXLINE( 945)		 ::feathers::text::TextFormat textFormat = this->getCurrentTextFormat();
HXLINE( 946)		 ::openfl::text::TextFormat simpleTextFormat;
HXDLIN( 946)		if (::hx::IsNotNull( textFormat )) {
HXLINE( 946)			simpleTextFormat = textFormat->toSimpleTextFormat();
            		}
            		else {
HXLINE( 946)			simpleTextFormat = null();
            		}
HXLINE( 947)		if (::hx::IsInstanceEq( simpleTextFormat,this->_previousSimpleTextFormat )) {
HXLINE( 949)			return;
            		}
HXLINE( 951)		if (::hx::IsNotNull( this->_previousTextFormat )) {
HXLINE( 952)			this->_previousTextFormat->removeEventListener(HX_("change",70,91,72,b7),this->textArea_textFormat_changeHandler_dyn(),null());
            		}
HXLINE( 954)		if (::hx::IsNotNull( textFormat )) {
HXLINE( 955)			textFormat->addEventListener(HX_("change",70,91,72,b7),this->textArea_textFormat_changeHandler_dyn(),false,0,true);
HXLINE( 956)			this->textFieldViewPort->set_textFormat(simpleTextFormat);
            		}
HXLINE( 958)		this->_previousTextFormat = textFormat;
HXLINE( 959)		this->_previousSimpleTextFormat = simpleTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,refreshTextStyles,(void))

void TextArea_obj::refreshPrompt(){
            	HX_GC_STACKFRAME(&_hx_pos_daf92d091ed090b4_962_refreshPrompt)
HXLINE( 963)		if (::hx::IsNull( this->_prompt )) {
HXLINE( 964)			if (::hx::IsNotNull( this->promptTextField )) {
HXLINE( 965)				this->removeChild(this->promptTextField);
HXLINE( 966)				this->promptTextField = null();
            			}
HXLINE( 968)			return;
            		}
HXLINE( 970)		if (::hx::IsNull( this->promptTextField )) {
HXLINE( 971)			this->promptTextField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 972)			this->promptTextField->set_selectable(false);
HXLINE( 973)			this->promptTextField->set_mouseWheelEnabled(false);
HXLINE( 974)			this->promptTextField->mouseEnabled = false;
HXLINE( 975)			this->promptTextField->set_multiline(true);
HXLINE( 976)			 ::openfl::text::TextField _hx_tmp = this->promptTextField;
HXDLIN( 976)			this->addChildAt(_hx_tmp,this->getChildIndex(this->textFieldViewPort));
            		}
HXLINE( 978)		 ::openfl::text::TextField _hx_tmp1 = this->promptTextField;
HXDLIN( 978)		bool _hx_tmp2;
HXDLIN( 978)		if ((this->_text.length == 0)) {
HXLINE( 979)			if (::hx::IsPointerEq( this->get_currentState(),::feathers::controls::TextInputState_obj::FOCUSED_dyn() )) {
HXLINE( 978)				_hx_tmp2 = this->get_showPromptWhenEmptyAndFocused();
            			}
            			else {
HXLINE( 978)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE( 978)			_hx_tmp2 = false;
            		}
HXDLIN( 978)		_hx_tmp1->set_visible(_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,refreshPrompt,(void))

void TextArea_obj::refreshPromptText(bool sizeInvalid){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_982_refreshPromptText)
HXLINE( 983)		bool _hx_tmp;
HXDLIN( 983)		if (::hx::IsNotNull( this->_prompt )) {
HXLINE( 983)			bool _hx_tmp1;
HXDLIN( 983)			if ((this->_prompt == this->_previousPrompt)) {
HXLINE( 983)				_hx_tmp1 = !(this->_updatedPromptStyles);
            			}
            			else {
HXLINE( 983)				_hx_tmp1 = false;
            			}
HXDLIN( 983)			if (_hx_tmp1) {
HXLINE( 983)				_hx_tmp = !(sizeInvalid);
            			}
            			else {
HXLINE( 983)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 983)			_hx_tmp = true;
            		}
HXDLIN( 983)		if (_hx_tmp) {
HXLINE( 985)			return;
            		}
HXLINE( 989)		this->promptTextField->set_autoSize(1);
HXLINE( 990)		bool hasPromptText = (this->_prompt.length > 0);
HXLINE( 991)		if (hasPromptText) {
HXLINE( 992)			this->promptTextField->set_text(this->_prompt);
            		}
            		else {
HXLINE( 994)			this->promptTextField->set_text(HX_W(u"\u200b",ed6d,00ab));
            		}
HXLINE( 998)		this->promptTextField->set_wordWrap(false);
HXLINE( 999)		this->_promptTextMeasuredWidth = this->promptTextField->get_width();
HXLINE(1000)		this->_promptTextMeasuredHeight = this->promptTextField->get_height();
HXLINE(1001)		this->promptTextField->set_autoSize(2);
HXLINE(1002)		this->promptTextField->set_wordWrap(true);
HXLINE(1003)		if (!(hasPromptText)) {
HXLINE(1004)			this->promptTextField->set_text(HX_("",00,00,00,00));
            		}
HXLINE(1006)		this->_previousPrompt = this->_prompt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,refreshPromptText,(void))

void TextArea_obj::refreshPromptStyles(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1009_refreshPromptStyles)
HXLINE(1010)		if (::hx::IsNull( this->_prompt )) {
HXLINE(1011)			return;
            		}
HXLINE(1013)		bool _hx_tmp = this->promptTextField->get_embedFonts();
HXDLIN(1013)		if ((_hx_tmp != this->get_embedFonts())) {
HXLINE(1014)			 ::openfl::text::TextField _hx_tmp1 = this->promptTextField;
HXDLIN(1014)			_hx_tmp1->set_embedFonts(this->get_embedFonts());
HXLINE(1015)			this->_updatedPromptStyles = true;
            		}
HXLINE(1017)		 ::feathers::text::TextFormat textFormat = this->getCurrentPromptTextFormat();
HXLINE(1018)		 ::openfl::text::TextFormat simpleTextFormat;
HXDLIN(1018)		if (::hx::IsNotNull( textFormat )) {
HXLINE(1018)			simpleTextFormat = textFormat->toSimpleTextFormat();
            		}
            		else {
HXLINE(1018)			simpleTextFormat = null();
            		}
HXLINE(1019)		if (::hx::IsInstanceEq( simpleTextFormat,this->_previousSimplePromptTextFormat )) {
HXLINE(1021)			return;
            		}
HXLINE(1023)		if (::hx::IsNotNull( this->_previousPromptTextFormat )) {
HXLINE(1024)			this->_previousPromptTextFormat->removeEventListener(HX_("change",70,91,72,b7),this->textArea_promptTextFormat_changeHandler_dyn(),null());
            		}
HXLINE(1026)		if (::hx::IsNotNull( textFormat )) {
HXLINE(1027)			textFormat->addEventListener(HX_("change",70,91,72,b7),this->textArea_promptTextFormat_changeHandler_dyn(),false,0,true);
HXLINE(1028)			this->promptTextField->set_defaultTextFormat(simpleTextFormat);
HXLINE(1029)			this->_updatedPromptStyles = true;
            		}
HXLINE(1031)		this->_previousPromptTextFormat = textFormat;
HXLINE(1032)		this->_previousSimplePromptTextFormat = simpleTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,refreshPromptStyles,(void))

 ::feathers::text::TextFormat TextArea_obj::getCurrentPromptTextFormat(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1035_getCurrentPromptTextFormat)
HXLINE(1036)		 ::feathers::text::TextFormat textFormat = this->get_promptTextFormat();
HXLINE(1037)		if (::hx::IsNull( textFormat )) {
HXLINE(1038)			textFormat = this->get_textFormat();
            		}
HXLINE(1040)		return textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,getCurrentPromptTextFormat,return )

void TextArea_obj::refreshErrorString(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1043_refreshErrorString)
HXLINE(1044)		if (::hx::IsNull( this->errorStringCallout )) {
HXLINE(1045)			return;
            		}
HXLINE(1048)		this->errorStringCallout->set_text(this->_errorString);
HXLINE(1049)		bool _hx_tmp;
HXDLIN(1049)		if (::hx::IsPointerEq( this->_currentState,::feathers::controls::TextInputState_obj::FOCUSED_dyn() )) {
HXLINE(1049)			_hx_tmp = ::hx::IsNull( this->errorStringCallout->parent );
            		}
            		else {
HXLINE(1049)			_hx_tmp = false;
            		}
HXDLIN(1049)		if (_hx_tmp) {
HXLINE(1050)			::feathers::core::PopUpManager_obj::addPopUp(this->errorStringCallout,::hx::ObjectPtr<OBJ_>(this),false,false,null());
            		}
            		else {
HXLINE(1051)			bool _hx_tmp1;
HXDLIN(1051)			if (::hx::IsPointerNotEq( this->_currentState,::feathers::controls::TextInputState_obj::FOCUSED_dyn() )) {
HXLINE(1051)				_hx_tmp1 = ::hx::IsNotNull( this->errorStringCallout->parent );
            			}
            			else {
HXLINE(1051)				_hx_tmp1 = false;
            			}
HXDLIN(1051)			if (_hx_tmp1) {
HXLINE(1052)				this->errorStringCallout->parent->removeChild(this->errorStringCallout);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,refreshErrorString,(void))

void TextArea_obj::layoutPrompt(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1056_layoutPrompt)
HXLINE(1057)		if (::hx::IsNull( this->_prompt )) {
HXLINE(1058)			return;
            		}
HXLINE(1061)		 ::openfl::text::TextField _hx_tmp = this->promptTextField;
HXDLIN(1061)		Float _hx_tmp1 = this->leftViewPortOffset;
HXDLIN(1061)		_hx_tmp->set_x((_hx_tmp1 + this->get_textPaddingLeft()));
HXLINE(1062)		 ::openfl::text::TextField _hx_tmp2 = this->promptTextField;
HXDLIN(1062)		Float _hx_tmp3 = this->topViewPortOffset;
HXDLIN(1062)		_hx_tmp2->set_y((_hx_tmp3 + this->get_textPaddingTop()));
HXLINE(1064)		 ::Dynamic maxPromptWidth = ::feathers::controls::supportClasses::IViewPort_obj::get_visibleWidth(this->get_viewPort());
HXDLIN(1064)		Float maxPromptWidth1 = (( (Float)(maxPromptWidth) ) - this->get_textPaddingLeft());
HXDLIN(1064)		Float maxPromptWidth2 = (maxPromptWidth1 - this->get_textPaddingRight());
HXLINE(1065)		if ((this->_promptTextMeasuredWidth > maxPromptWidth2)) {
HXLINE(1070)			this->promptTextField->set_width(maxPromptWidth2);
            		}
            		else {
HXLINE(1079)			this->promptTextField->set_width(this->_promptTextMeasuredWidth);
            		}
HXLINE(1081)		 ::openfl::text::TextField _hx_tmp4 = this->promptTextField;
HXDLIN(1081)		 ::Dynamic _hx_tmp5 = ::feathers::controls::supportClasses::IViewPort_obj::get_visibleHeight(this->get_viewPort());
HXDLIN(1081)		Float _hx_tmp6 = (( (Float)(_hx_tmp5) ) - this->get_textPaddingTop());
HXDLIN(1081)		_hx_tmp4->set_height((_hx_tmp6 - this->get_textPaddingBottom()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,layoutPrompt,(void))

 ::openfl::display::DisplayObject TextArea_obj::getCurrentBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1084_getCurrentBackgroundSkin)
HXLINE(1085)		 ::openfl::display::DisplayObject result = this->_stateToSkin->get(this->_currentState).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE(1086)		if (::hx::IsNotNull( result )) {
HXLINE(1087)			return result;
            		}
HXLINE(1089)		return this->super::getCurrentBackgroundSkin();
            	}


 ::feathers::text::TextFormat TextArea_obj::getCurrentTextFormat(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1092_getCurrentTextFormat)
HXLINE(1093)		 ::feathers::text::TextFormat result = this->_stateToTextFormat->get(this->_currentState).StaticCast<  ::feathers::text::TextFormat >();
HXLINE(1094)		if (::hx::IsNotNull( result )) {
HXLINE(1095)			return result;
            		}
HXLINE(1097)		bool _hx_tmp;
HXDLIN(1097)		if (!(this->_enabled)) {
HXLINE(1097)			_hx_tmp = ::hx::IsNotNull( this->get_disabledTextFormat() );
            		}
            		else {
HXLINE(1097)			_hx_tmp = false;
            		}
HXDLIN(1097)		if (_hx_tmp) {
HXLINE(1098)			return this->get_disabledTextFormat();
            		}
HXLINE(1100)		return this->get_textFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,getCurrentTextFormat,return )

void TextArea_obj::createErrorCallout(){
            	HX_GC_STACKFRAME(&_hx_pos_daf92d091ed090b4_1103_createErrorCallout)
HXLINE(1104)		this->destroyErrorCallout();
HXLINE(1105)		bool _hx_tmp;
HXDLIN(1105)		if (::hx::IsNotNull( this->_errorString )) {
HXLINE(1105)			_hx_tmp = (this->_errorString.length == 0);
            		}
            		else {
HXLINE(1105)			_hx_tmp = true;
            		}
HXDLIN(1105)		if (_hx_tmp) {
HXLINE(1106)			return;
            		}
HXLINE(1108)		this->errorStringCallout =  ::feathers::controls::TextCallout_obj::__alloc( HX_CTX ,null());
HXLINE(1109)		if (::hx::IsNull( this->errorStringCallout->get_variant() )) {
HXLINE(1110)			 ::feathers::controls::TextCallout _hx_tmp1 = this->errorStringCallout;
HXDLIN(1110)			::String _hx_tmp2;
HXDLIN(1110)			if (::hx::IsNotNull( this->get_customErrorCalloutVariant() )) {
HXLINE(1110)				_hx_tmp2 = this->get_customErrorCalloutVariant();
            			}
            			else {
HXLINE(1110)				_hx_tmp2 = ::feathers::controls::TextInput_obj::CHILD_VARIANT_ERROR_CALLOUT;
            			}
HXDLIN(1110)			_hx_tmp1->set_variant(_hx_tmp2);
            		}
HXLINE(1112)		this->errorStringCallout->set_origin(::hx::ObjectPtr<OBJ_>(this));
HXLINE(1113)		this->errorStringCallout->closeOnPointerOutside = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,createErrorCallout,(void))

void TextArea_obj::destroyErrorCallout(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1116_destroyErrorCallout)
HXLINE(1117)		if (::hx::IsNull( this->errorStringCallout )) {
HXLINE(1118)			return;
            		}
HXLINE(1120)		if (::hx::IsNotNull( this->errorStringCallout->parent )) {
HXLINE(1121)			this->errorStringCallout->parent->removeChild(this->errorStringCallout);
            		}
HXLINE(1123)		this->errorStringCallout = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,destroyErrorCallout,(void))

void TextArea_obj::changeState( ::feathers::controls::TextInputState state){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1126_changeState)
HXLINE(1127)		if (!(this->_enabled)) {
HXLINE(1128)			state = ::feathers::controls::TextInputState_obj::DISABLED_dyn();
            		}
HXLINE(1130)		if (::hx::IsPointerEq( this->_currentState,state )) {
HXLINE(1131)			return;
            		}
HXLINE(1133)		this->_currentState = state;
HXLINE(1134)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STATE_dyn());
HXLINE(1135)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("stateChange",61,de,fb,31),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,changeState,(void))

void TextArea_obj::refreshState(){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1139_refreshState)
HXDLIN(1139)		if (this->_enabled) {
HXLINE(1144)			bool focused;
HXDLIN(1144)			if (::hx::IsNotNull( this->stage )) {
HXLINE(1144)				 ::openfl::display::InteractiveObject focused1 = this->stage->get_focus();
HXDLIN(1144)				focused = ::hx::IsInstanceEq( focused1,this->textFieldViewPort->get_textField() );
            			}
            			else {
HXLINE(1144)				focused = false;
            			}
HXLINE(1145)			if (focused) {
HXLINE(1146)				this->changeState(::feathers::controls::TextInputState_obj::FOCUSED_dyn());
            			}
            			else {
HXLINE(1147)				if (::hx::IsNotNull( this->_errorString )) {
HXLINE(1148)					this->changeState(::feathers::controls::TextInputState_obj::ERROR_dyn());
            				}
            				else {
HXLINE(1150)					this->changeState(::feathers::controls::TextInputState_obj::ENABLED_dyn());
            				}
            			}
            		}
            		else {
HXLINE(1153)			this->changeState(::feathers::controls::TextInputState_obj::DISABLED_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,refreshState,(void))

void TextArea_obj::textArea_focusInHandler( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1157_textArea_focusInHandler)
HXLINE(1158)		bool _hx_tmp;
HXDLIN(1158)		bool _hx_tmp1;
HXDLIN(1158)		bool _hx_tmp2;
HXDLIN(1158)		if (::hx::IsNotNull( this->stage )) {
HXLINE(1158)			_hx_tmp2 = ::hx::IsNotNull( this->stage->get_focus() );
            		}
            		else {
HXLINE(1158)			_hx_tmp2 = false;
            		}
HXDLIN(1158)		if (_hx_tmp2) {
HXLINE(1158)			_hx_tmp1 = ::hx::IsNotNull( this->textFieldViewPort );
            		}
            		else {
HXLINE(1158)			_hx_tmp1 = false;
            		}
HXDLIN(1158)		if (_hx_tmp1) {
HXLINE(1161)			 ::feathers::controls::supportClasses::TextFieldViewPort _hx_tmp3 = this->textFieldViewPort;
HXLINE(1158)			_hx_tmp = !(_hx_tmp3->contains(this->stage->get_focus()));
            		}
            		else {
HXLINE(1158)			_hx_tmp = false;
            		}
HXDLIN(1158)		if (_hx_tmp) {
HXLINE(1162)			event->stopImmediatePropagation();
HXLINE(1163)			this->stage->set_focus(this->textFieldViewPort);
            		}
HXLINE(1165)		this->refreshState();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,textArea_focusInHandler,(void))

void TextArea_obj::textArea_focusOutHandler( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1169_textArea_focusOutHandler)
HXDLIN(1169)		this->refreshState();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,textArea_focusOutHandler,(void))

void TextArea_obj::baseScrollContainer_keyDownHandler( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1172_baseScrollContainer_keyDownHandler)
            	}


void TextArea_obj::textArea_viewPort_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1176_textArea_viewPort_changeHandler)
HXLINE(1177)		if (this->_ignoreViewPortTextChange) {
HXLINE(1178)			return;
            		}
HXLINE(1182)		this->set_text(this->textFieldViewPort->get_text());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,textArea_viewPort_changeHandler,(void))

void TextArea_obj::textArea_textFormat_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1186_textArea_textFormat_changeHandler)
HXDLIN(1186)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,textArea_textFormat_changeHandler,(void))

void TextArea_obj::textArea_promptTextFormat_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_1190_textArea_promptTextFormat_changeHandler)
HXDLIN(1190)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,textArea_promptTextFormat_changeHandler,(void))

::hx::Class TextArea_obj::get_styleContext(){
            	HX_STACKFRAME(&_hx_pos_e0b9e3d78fefef05_42_get_styleContext)
HXDLIN(  42)		return ::hx::ClassOf< ::feathers::controls::TextArea >();
            	}


bool TextArea_obj::get_smoothScrolling(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_85_get_smoothScrolling)
HXDLIN(  85)		return this->_hx___smoothScrolling;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_smoothScrolling,return )

bool TextArea_obj::set_smoothScrolling(bool value){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_99_set_smoothScrolling)
HXLINE( 106)		if (!(this->setStyle(HX_("smoothScrolling",e7,5c,42,f4),null()))) {
HXLINE( 107)			return this->_hx___smoothScrolling;
            		}
HXLINE( 109)		if ((this->_hx___smoothScrolling == value)) {
HXLINE( 110)			return this->_hx___smoothScrolling;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_smoothScrolling_dyn();
HXLINE( 116)		this->_hx___smoothScrolling = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___smoothScrolling;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_smoothScrolling,return )

bool TextArea_obj::clearStyle_smoothScrolling(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_131_clearStyle_smoothScrolling)
HXLINE( 132)		this->set_smoothScrolling(false);
HXLINE( 133)		return this->get_smoothScrolling();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,clearStyle_smoothScrolling,return )

 ::feathers::text::TextFormat TextArea_obj::get_textFormat(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_85_get_textFormat)
HXDLIN(  85)		return this->_hx___textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_textFormat,return )

 ::feathers::text::TextFormat TextArea_obj::set_textFormat( ::feathers::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_99_set_textFormat)
HXLINE( 106)		if (!(this->setStyle(HX_("textFormat",c4,0f,7f,34),null()))) {
HXLINE( 107)			return this->_hx___textFormat;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___textFormat,value )) {
HXLINE( 110)			return this->_hx___textFormat;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_textFormat_dyn();
HXLINE( 116)		this->_hx___textFormat = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_textFormat,return )

 ::feathers::text::TextFormat TextArea_obj::clearStyle_textFormat(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_131_clearStyle_textFormat)
HXLINE( 132)		this->set_textFormat(null());
HXLINE( 133)		return this->get_textFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,clearStyle_textFormat,return )

 ::feathers::text::TextFormat TextArea_obj::get_disabledTextFormat(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_85_get_disabledTextFormat)
HXDLIN(  85)		return this->_hx___disabledTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_disabledTextFormat,return )

 ::feathers::text::TextFormat TextArea_obj::set_disabledTextFormat( ::feathers::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_99_set_disabledTextFormat)
HXLINE( 106)		if (!(this->setStyle(HX_("disabledTextFormat",60,88,2b,39),null()))) {
HXLINE( 107)			return this->_hx___disabledTextFormat;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___disabledTextFormat,value )) {
HXLINE( 110)			return this->_hx___disabledTextFormat;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_disabledTextFormat_dyn();
HXLINE( 116)		this->_hx___disabledTextFormat = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___disabledTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_disabledTextFormat,return )

 ::feathers::text::TextFormat TextArea_obj::clearStyle_disabledTextFormat(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_131_clearStyle_disabledTextFormat)
HXLINE( 132)		this->set_disabledTextFormat(null());
HXLINE( 133)		return this->get_disabledTextFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,clearStyle_disabledTextFormat,return )

 ::feathers::text::TextFormat TextArea_obj::get_promptTextFormat(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_85_get_promptTextFormat)
HXDLIN(  85)		return this->_hx___promptTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_promptTextFormat,return )

 ::feathers::text::TextFormat TextArea_obj::set_promptTextFormat( ::feathers::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_99_set_promptTextFormat)
HXLINE( 106)		if (!(this->setStyle(HX_("promptTextFormat",88,5a,f4,ec),null()))) {
HXLINE( 107)			return this->_hx___promptTextFormat;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___promptTextFormat,value )) {
HXLINE( 110)			return this->_hx___promptTextFormat;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_promptTextFormat_dyn();
HXLINE( 116)		this->_hx___promptTextFormat = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___promptTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_promptTextFormat,return )

 ::feathers::text::TextFormat TextArea_obj::clearStyle_promptTextFormat(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_131_clearStyle_promptTextFormat)
HXLINE( 132)		this->set_promptTextFormat(null());
HXLINE( 133)		return this->get_promptTextFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,clearStyle_promptTextFormat,return )

bool TextArea_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_85_get_embedFonts)
HXDLIN(  85)		return this->_hx___embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_embedFonts,return )

bool TextArea_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_99_set_embedFonts)
HXLINE( 106)		if (!(this->setStyle(HX_("embedFonts",2b,c7,e1,8e),null()))) {
HXLINE( 107)			return this->_hx___embedFonts;
            		}
HXLINE( 109)		if ((this->_hx___embedFonts == value)) {
HXLINE( 110)			return this->_hx___embedFonts;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_embedFonts_dyn();
HXLINE( 116)		this->_hx___embedFonts = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_embedFonts,return )

bool TextArea_obj::clearStyle_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_131_clearStyle_embedFonts)
HXLINE( 132)		this->set_embedFonts(false);
HXLINE( 133)		return this->get_embedFonts();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,clearStyle_embedFonts,return )

bool TextArea_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_85_get_wordWrap)
HXDLIN(  85)		return this->_hx___wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_wordWrap,return )

bool TextArea_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_99_set_wordWrap)
HXLINE( 106)		if (!(this->setStyle(HX_("wordWrap",b4,14,db,00),null()))) {
HXLINE( 107)			return this->_hx___wordWrap;
            		}
HXLINE( 109)		if ((this->_hx___wordWrap == value)) {
HXLINE( 110)			return this->_hx___wordWrap;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_wordWrap_dyn();
HXLINE( 116)		this->_hx___wordWrap = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_wordWrap,return )

bool TextArea_obj::clearStyle_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_131_clearStyle_wordWrap)
HXLINE( 132)		this->set_wordWrap(true);
HXLINE( 133)		return this->get_wordWrap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,clearStyle_wordWrap,return )

Float TextArea_obj::get_textPaddingTop(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_85_get_textPaddingTop)
HXDLIN(  85)		return this->_hx___textPaddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_textPaddingTop,return )

Float TextArea_obj::set_textPaddingTop(Float value){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_99_set_textPaddingTop)
HXLINE( 106)		if (!(this->setStyle(HX_("textPaddingTop",51,48,b6,22),null()))) {
HXLINE( 107)			return this->_hx___textPaddingTop;
            		}
HXLINE( 109)		if ((this->_hx___textPaddingTop == value)) {
HXLINE( 110)			return this->_hx___textPaddingTop;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_textPaddingTop_dyn();
HXLINE( 116)		this->_hx___textPaddingTop = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___textPaddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_textPaddingTop,return )

Float TextArea_obj::clearStyle_textPaddingTop(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_131_clearStyle_textPaddingTop)
HXLINE( 132)		this->set_textPaddingTop(((Float)0.0));
HXLINE( 133)		return this->get_textPaddingTop();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,clearStyle_textPaddingTop,return )

Float TextArea_obj::get_textPaddingRight(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_85_get_textPaddingRight)
HXDLIN(  85)		return this->_hx___textPaddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_textPaddingRight,return )

Float TextArea_obj::set_textPaddingRight(Float value){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_99_set_textPaddingRight)
HXLINE( 106)		if (!(this->setStyle(HX_("textPaddingRight",98,d4,4a,c8),null()))) {
HXLINE( 107)			return this->_hx___textPaddingRight;
            		}
HXLINE( 109)		if ((this->_hx___textPaddingRight == value)) {
HXLINE( 110)			return this->_hx___textPaddingRight;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_textPaddingRight_dyn();
HXLINE( 116)		this->_hx___textPaddingRight = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___textPaddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_textPaddingRight,return )

Float TextArea_obj::clearStyle_textPaddingRight(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_131_clearStyle_textPaddingRight)
HXLINE( 132)		this->set_textPaddingRight(((Float)0.0));
HXLINE( 133)		return this->get_textPaddingRight();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,clearStyle_textPaddingRight,return )

Float TextArea_obj::get_textPaddingBottom(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_85_get_textPaddingBottom)
HXDLIN(  85)		return this->_hx___textPaddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_textPaddingBottom,return )

Float TextArea_obj::set_textPaddingBottom(Float value){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_99_set_textPaddingBottom)
HXLINE( 106)		if (!(this->setStyle(HX_("textPaddingBottom",af,c2,81,90),null()))) {
HXLINE( 107)			return this->_hx___textPaddingBottom;
            		}
HXLINE( 109)		if ((this->_hx___textPaddingBottom == value)) {
HXLINE( 110)			return this->_hx___textPaddingBottom;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_textPaddingBottom_dyn();
HXLINE( 116)		this->_hx___textPaddingBottom = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___textPaddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_textPaddingBottom,return )

Float TextArea_obj::clearStyle_textPaddingBottom(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_131_clearStyle_textPaddingBottom)
HXLINE( 132)		this->set_textPaddingBottom(((Float)0.0));
HXLINE( 133)		return this->get_textPaddingBottom();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,clearStyle_textPaddingBottom,return )

Float TextArea_obj::get_textPaddingLeft(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_85_get_textPaddingLeft)
HXDLIN(  85)		return this->_hx___textPaddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_textPaddingLeft,return )

Float TextArea_obj::set_textPaddingLeft(Float value){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_99_set_textPaddingLeft)
HXLINE( 106)		if (!(this->setStyle(HX_("textPaddingLeft",cb,aa,77,37),null()))) {
HXLINE( 107)			return this->_hx___textPaddingLeft;
            		}
HXLINE( 109)		if ((this->_hx___textPaddingLeft == value)) {
HXLINE( 110)			return this->_hx___textPaddingLeft;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_textPaddingLeft_dyn();
HXLINE( 116)		this->_hx___textPaddingLeft = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___textPaddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_textPaddingLeft,return )

Float TextArea_obj::clearStyle_textPaddingLeft(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_131_clearStyle_textPaddingLeft)
HXLINE( 132)		this->set_textPaddingLeft(((Float)0.0));
HXLINE( 133)		return this->get_textPaddingLeft();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,clearStyle_textPaddingLeft,return )

bool TextArea_obj::get_showPromptWhenEmptyAndFocused(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_85_get_showPromptWhenEmptyAndFocused)
HXDLIN(  85)		return this->_hx___showPromptWhenEmptyAndFocused;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_showPromptWhenEmptyAndFocused,return )

bool TextArea_obj::set_showPromptWhenEmptyAndFocused(bool value){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_99_set_showPromptWhenEmptyAndFocused)
HXLINE( 106)		if (!(this->setStyle(HX_("showPromptWhenEmptyAndFocused",72,ad,6a,b1),null()))) {
HXLINE( 107)			return this->_hx___showPromptWhenEmptyAndFocused;
            		}
HXLINE( 109)		if ((this->_hx___showPromptWhenEmptyAndFocused == value)) {
HXLINE( 110)			return this->_hx___showPromptWhenEmptyAndFocused;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_showPromptWhenEmptyAndFocused_dyn();
HXLINE( 116)		this->_hx___showPromptWhenEmptyAndFocused = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___showPromptWhenEmptyAndFocused;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_showPromptWhenEmptyAndFocused,return )

bool TextArea_obj::clearStyle_showPromptWhenEmptyAndFocused(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_131_clearStyle_showPromptWhenEmptyAndFocused)
HXLINE( 132)		this->set_showPromptWhenEmptyAndFocused(true);
HXLINE( 133)		return this->get_showPromptWhenEmptyAndFocused();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,clearStyle_showPromptWhenEmptyAndFocused,return )

::String TextArea_obj::get_customErrorCalloutVariant(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_85_get_customErrorCalloutVariant)
HXDLIN(  85)		return this->_hx___customErrorCalloutVariant;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,get_customErrorCalloutVariant,return )

::String TextArea_obj::set_customErrorCalloutVariant(::String value){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_99_set_customErrorCalloutVariant)
HXLINE( 106)		if (!(this->setStyle(HX_("customErrorCalloutVariant",6c,f0,2e,4f),null()))) {
HXLINE( 107)			return this->_hx___customErrorCalloutVariant;
            		}
HXLINE( 109)		if ((this->_hx___customErrorCalloutVariant == value)) {
HXLINE( 110)			return this->_hx___customErrorCalloutVariant;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_customErrorCalloutVariant_dyn();
HXLINE( 116)		this->_hx___customErrorCalloutVariant = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___customErrorCalloutVariant;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextArea_obj,set_customErrorCalloutVariant,return )

::String TextArea_obj::clearStyle_customErrorCalloutVariant(){
            	HX_STACKFRAME(&_hx_pos_7d08b6d6560ae58f_131_clearStyle_customErrorCalloutVariant)
HXLINE( 132)		this->set_customErrorCalloutVariant(null());
HXLINE( 133)		return this->get_customErrorCalloutVariant();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextArea_obj,clearStyle_customErrorCalloutVariant,return )

 ::feathers::core::InvalidationFlag TextArea_obj::INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY;

::String TextArea_obj::CHILD_VARIANT_ERROR_CALLOUT;


::hx::ObjectPtr< TextArea_obj > TextArea_obj::__new(::String __o_text,::String prompt, ::Dynamic changeListener) {
	::hx::ObjectPtr< TextArea_obj > __this = new TextArea_obj();
	__this->__construct(__o_text,prompt,changeListener);
	return __this;
}

::hx::ObjectPtr< TextArea_obj > TextArea_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_text,::String prompt, ::Dynamic changeListener) {
	TextArea_obj *__this = (TextArea_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextArea_obj), true, "feathers.controls.TextArea"));
	*(void **)__this = TextArea_obj::_hx_vtable;
	__this->__construct(__o_text,prompt,changeListener);
	return __this;
}

TextArea_obj::TextArea_obj()
{
}

void TextArea_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextArea);
	HX_MARK_MEMBER_NAME(textFieldViewPort,"textFieldViewPort");
	HX_MARK_MEMBER_NAME(promptTextField,"promptTextField");
	HX_MARK_MEMBER_NAME(errorStringCallout,"errorStringCallout");
	HX_MARK_MEMBER_NAME(_previousTextFormat,"_previousTextFormat");
	HX_MARK_MEMBER_NAME(_previousSimpleTextFormat,"_previousSimpleTextFormat");
	HX_MARK_MEMBER_NAME(_previousPrompt,"_previousPrompt");
	HX_MARK_MEMBER_NAME(_previousPromptTextFormat,"_previousPromptTextFormat");
	HX_MARK_MEMBER_NAME(_previousSimplePromptTextFormat,"_previousSimplePromptTextFormat");
	HX_MARK_MEMBER_NAME(_updatedPromptStyles,"_updatedPromptStyles");
	HX_MARK_MEMBER_NAME(_promptTextMeasuredWidth,"_promptTextMeasuredWidth");
	HX_MARK_MEMBER_NAME(_promptTextMeasuredHeight,"_promptTextMeasuredHeight");
	HX_MARK_MEMBER_NAME(_editable,"_editable");
	HX_MARK_MEMBER_NAME(_selectable,"_selectable");
	HX_MARK_MEMBER_NAME(_currentState,"_currentState");
	HX_MARK_MEMBER_NAME(_text,"_text");
	HX_MARK_MEMBER_NAME(_prompt,"_prompt");
	HX_MARK_MEMBER_NAME(_hx___restrict,"__restrict");
	HX_MARK_MEMBER_NAME(_displayAsPassword,"_displayAsPassword");
	HX_MARK_MEMBER_NAME(_errorString,"_errorString");
	HX_MARK_MEMBER_NAME(_stateToTextFormat,"_stateToTextFormat");
	HX_MARK_MEMBER_NAME(_maxChars,"_maxChars");
	HX_MARK_MEMBER_NAME(_previousCustomErrorCalloutVariant,"_previousCustomErrorCalloutVariant");
	HX_MARK_MEMBER_NAME(_ignoreViewPortTextChange,"_ignoreViewPortTextChange");
	HX_MARK_MEMBER_NAME(_stateToSkin,"_stateToSkin");
	HX_MARK_MEMBER_NAME(_hx___smoothScrolling,"__smoothScrolling");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___disabledTextFormat,"__disabledTextFormat");
	HX_MARK_MEMBER_NAME(_hx___promptTextFormat,"__promptTextFormat");
	HX_MARK_MEMBER_NAME(_hx___embedFonts,"__embedFonts");
	HX_MARK_MEMBER_NAME(_hx___wordWrap,"__wordWrap");
	HX_MARK_MEMBER_NAME(_hx___textPaddingTop,"__textPaddingTop");
	HX_MARK_MEMBER_NAME(_hx___textPaddingRight,"__textPaddingRight");
	HX_MARK_MEMBER_NAME(_hx___textPaddingBottom,"__textPaddingBottom");
	HX_MARK_MEMBER_NAME(_hx___textPaddingLeft,"__textPaddingLeft");
	HX_MARK_MEMBER_NAME(_hx___showPromptWhenEmptyAndFocused,"__showPromptWhenEmptyAndFocused");
	HX_MARK_MEMBER_NAME(_hx___customErrorCalloutVariant,"__customErrorCalloutVariant");
	 ::feathers::controls::supportClasses::BaseScrollContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextArea_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(textFieldViewPort,"textFieldViewPort");
	HX_VISIT_MEMBER_NAME(promptTextField,"promptTextField");
	HX_VISIT_MEMBER_NAME(errorStringCallout,"errorStringCallout");
	HX_VISIT_MEMBER_NAME(_previousTextFormat,"_previousTextFormat");
	HX_VISIT_MEMBER_NAME(_previousSimpleTextFormat,"_previousSimpleTextFormat");
	HX_VISIT_MEMBER_NAME(_previousPrompt,"_previousPrompt");
	HX_VISIT_MEMBER_NAME(_previousPromptTextFormat,"_previousPromptTextFormat");
	HX_VISIT_MEMBER_NAME(_previousSimplePromptTextFormat,"_previousSimplePromptTextFormat");
	HX_VISIT_MEMBER_NAME(_updatedPromptStyles,"_updatedPromptStyles");
	HX_VISIT_MEMBER_NAME(_promptTextMeasuredWidth,"_promptTextMeasuredWidth");
	HX_VISIT_MEMBER_NAME(_promptTextMeasuredHeight,"_promptTextMeasuredHeight");
	HX_VISIT_MEMBER_NAME(_editable,"_editable");
	HX_VISIT_MEMBER_NAME(_selectable,"_selectable");
	HX_VISIT_MEMBER_NAME(_currentState,"_currentState");
	HX_VISIT_MEMBER_NAME(_text,"_text");
	HX_VISIT_MEMBER_NAME(_prompt,"_prompt");
	HX_VISIT_MEMBER_NAME(_hx___restrict,"__restrict");
	HX_VISIT_MEMBER_NAME(_displayAsPassword,"_displayAsPassword");
	HX_VISIT_MEMBER_NAME(_errorString,"_errorString");
	HX_VISIT_MEMBER_NAME(_stateToTextFormat,"_stateToTextFormat");
	HX_VISIT_MEMBER_NAME(_maxChars,"_maxChars");
	HX_VISIT_MEMBER_NAME(_previousCustomErrorCalloutVariant,"_previousCustomErrorCalloutVariant");
	HX_VISIT_MEMBER_NAME(_ignoreViewPortTextChange,"_ignoreViewPortTextChange");
	HX_VISIT_MEMBER_NAME(_stateToSkin,"_stateToSkin");
	HX_VISIT_MEMBER_NAME(_hx___smoothScrolling,"__smoothScrolling");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___disabledTextFormat,"__disabledTextFormat");
	HX_VISIT_MEMBER_NAME(_hx___promptTextFormat,"__promptTextFormat");
	HX_VISIT_MEMBER_NAME(_hx___embedFonts,"__embedFonts");
	HX_VISIT_MEMBER_NAME(_hx___wordWrap,"__wordWrap");
	HX_VISIT_MEMBER_NAME(_hx___textPaddingTop,"__textPaddingTop");
	HX_VISIT_MEMBER_NAME(_hx___textPaddingRight,"__textPaddingRight");
	HX_VISIT_MEMBER_NAME(_hx___textPaddingBottom,"__textPaddingBottom");
	HX_VISIT_MEMBER_NAME(_hx___textPaddingLeft,"__textPaddingLeft");
	HX_VISIT_MEMBER_NAME(_hx___showPromptWhenEmptyAndFocused,"__showPromptWhenEmptyAndFocused");
	HX_VISIT_MEMBER_NAME(_hx___customErrorCalloutVariant,"__customErrorCalloutVariant");
	 ::feathers::controls::supportClasses::BaseScrollContainer_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TextArea_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_text() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { return ::hx::Val( _text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"prompt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_prompt() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_prompt") ) { return ::hx::Val( _prompt ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return ::hx::Val( dispose_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"editable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_editable() ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return ::hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"baseline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_baseline() ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_restrict() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxChars() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_editable") ) { return ::hx::Val( _editable ); }
		if (HX_FIELD_EQ(inName,"_maxChars") ) { return ::hx::Val( _maxChars ); }
		if (HX_FIELD_EQ(inName,"selectAll") ) { return ::hx::Val( selectAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"showFocus") ) { return ::hx::Val( showFocus_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectable() ); }
		if (HX_FIELD_EQ(inName,"get_prompt") ) { return ::hx::Val( get_prompt_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_prompt") ) { return ::hx::Val( set_prompt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__restrict") ) { return ::hx::Val( _hx___restrict ); }
		if (HX_FIELD_EQ(inName,"textFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textFormat() ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_embedFonts() ); }
		if (HX_FIELD_EQ(inName,"__wordWrap") ) { return ::hx::Val( _hx___wordWrap ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_selectable") ) { return ::hx::Val( _selectable ); }
		if (HX_FIELD_EQ(inName,"set_enabled") ) { return ::hx::Val( set_enabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"errorString") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_errorString() ); }
		if (HX_FIELD_EQ(inName,"selectRange") ) { return ::hx::Val( selectRange_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeState") ) { return ::hx::Val( changeState_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_editable") ) { return ::hx::Val( get_editable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_editable") ) { return ::hx::Val( set_editable_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentState") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_currentState() ); }
		if (HX_FIELD_EQ(inName,"get_baseline") ) { return ::hx::Val( get_baseline_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return ::hx::Val( get_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return ::hx::Val( set_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"_errorString") ) { return ::hx::Val( _errorString ); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return ::hx::Val( get_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return ::hx::Val( set_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"_stateToSkin") ) { return ::hx::Val( _stateToSkin ); }
		if (HX_FIELD_EQ(inName,"layoutPrompt") ) { return ::hx::Val( layoutPrompt_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshState") ) { return ::hx::Val( refreshState_dyn() ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return ::hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"__embedFonts") ) { return ::hx::Val( _hx___embedFonts ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return ::hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return ::hx::Val( set_wordWrap_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_currentState") ) { return ::hx::Val( _currentState ); }
		if (HX_FIELD_EQ(inName,"refreshPrompt") ) { return ::hx::Val( refreshPrompt_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_tabEnabled") ) { return ::hx::Val( get_tabEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return ::hx::Val( get_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return ::hx::Val( set_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"textPaddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textPaddingTop() ); }
		if (HX_FIELD_EQ(inName,"setTextPadding") ) { return ::hx::Val( setTextPadding_dyn() ); }
		if (HX_FIELD_EQ(inName,"layoutChildren") ) { return ::hx::Val( layoutChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textFormat") ) { return ::hx::Val( get_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textFormat") ) { return ::hx::Val( set_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return ::hx::Val( get_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return ::hx::Val( set_embedFonts_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"promptTextField") ) { return ::hx::Val( promptTextField ); }
		if (HX_FIELD_EQ(inName,"_previousPrompt") ) { return ::hx::Val( _previousPrompt ); }
		if (HX_FIELD_EQ(inName,"get_errorString") ) { return ::hx::Val( get_errorString_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_errorString") ) { return ::hx::Val( set_errorString_dyn() ); }
		if (HX_FIELD_EQ(inName,"smoothScrolling") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_smoothScrolling() ); }
		if (HX_FIELD_EQ(inName,"textPaddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textPaddingLeft() ); }
		if (HX_FIELD_EQ(inName,"getSkinForState") ) { return ::hx::Val( getSkinForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSkinForState") ) { return ::hx::Val( setSkinForState_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_currentState") ) { return ::hx::Val( get_currentState_dyn() ); }
		if (HX_FIELD_EQ(inName,"promptTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_promptTextFormat() ); }
		if (HX_FIELD_EQ(inName,"textPaddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textPaddingRight() ); }
		if (HX_FIELD_EQ(inName,"stageFocusTarget") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_stageFocusTarget() ); }
		if (HX_FIELD_EQ(inName,"get_styleContext") ) { return ::hx::Val( get_styleContext_dyn() ); }
		if (HX_FIELD_EQ(inName,"__textPaddingTop") ) { return ::hx::Val( _hx___textPaddingTop ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"textFieldViewPort") ) { return ::hx::Val( textFieldViewPort ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_displayAsPassword() ); }
		if (HX_FIELD_EQ(inName,"textPaddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textPaddingBottom() ); }
		if (HX_FIELD_EQ(inName,"refreshTextStyles") ) { return ::hx::Val( refreshTextStyles_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshPromptText") ) { return ::hx::Val( refreshPromptText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__smoothScrolling") ) { return ::hx::Val( _hx___smoothScrolling ); }
		if (HX_FIELD_EQ(inName,"__textPaddingLeft") ) { return ::hx::Val( _hx___textPaddingLeft ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"errorStringCallout") ) { return ::hx::Val( errorStringCallout ); }
		if (HX_FIELD_EQ(inName,"_displayAsPassword") ) { return ::hx::Val( _displayAsPassword ); }
		if (HX_FIELD_EQ(inName,"_stateToTextFormat") ) { return ::hx::Val( _stateToTextFormat ); }
		if (HX_FIELD_EQ(inName,"disabledTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_disabledTextFormat() ); }
		if (HX_FIELD_EQ(inName,"refreshErrorString") ) { return ::hx::Val( refreshErrorString_dyn() ); }
		if (HX_FIELD_EQ(inName,"createErrorCallout") ) { return ::hx::Val( createErrorCallout_dyn() ); }
		if (HX_FIELD_EQ(inName,"__promptTextFormat") ) { return ::hx::Val( _hx___promptTextFormat ); }
		if (HX_FIELD_EQ(inName,"get_textPaddingTop") ) { return ::hx::Val( get_textPaddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textPaddingTop") ) { return ::hx::Val( set_textPaddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"__textPaddingRight") ) { return ::hx::Val( _hx___textPaddingRight ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_previousTextFormat") ) { return ::hx::Val( _previousTextFormat ); }
		if (HX_FIELD_EQ(inName,"get_measureViewPort") ) { return ::hx::Val( get_measureViewPort_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshPromptStyles") ) { return ::hx::Val( refreshPromptStyles_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroyErrorCallout") ) { return ::hx::Val( destroyErrorCallout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_smoothScrolling") ) { return ::hx::Val( get_smoothScrolling_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_smoothScrolling") ) { return ::hx::Val( set_smoothScrolling_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_wordWrap") ) { return ::hx::Val( clearStyle_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"__textPaddingBottom") ) { return ::hx::Val( _hx___textPaddingBottom ); }
		if (HX_FIELD_EQ(inName,"get_textPaddingLeft") ) { return ::hx::Val( get_textPaddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textPaddingLeft") ) { return ::hx::Val( set_textPaddingLeft_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_updatedPromptStyles") ) { return ::hx::Val( _updatedPromptStyles ); }
		if (HX_FIELD_EQ(inName,"selectionAnchorIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionAnchorIndex() ); }
		if (HX_FIELD_EQ(inName,"selectionActiveIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionActiveIndex() ); }
		if (HX_FIELD_EQ(inName,"get_stageFocusTarget") ) { return ::hx::Val( get_stageFocusTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentTextFormat") ) { return ::hx::Val( getCurrentTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"__disabledTextFormat") ) { return ::hx::Val( _hx___disabledTextFormat ); }
		if (HX_FIELD_EQ(inName,"get_promptTextFormat") ) { return ::hx::Val( get_promptTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_promptTextFormat") ) { return ::hx::Val( set_promptTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textPaddingRight") ) { return ::hx::Val( get_textPaddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textPaddingRight") ) { return ::hx::Val( set_textPaddingRight_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return ::hx::Val( get_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return ::hx::Val( set_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextFormatForState") ) { return ::hx::Val( getTextFormatForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormatForState") ) { return ::hx::Val( setTextFormatForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_textFormat") ) { return ::hx::Val( clearStyle_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_embedFonts") ) { return ::hx::Val( clearStyle_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textPaddingBottom") ) { return ::hx::Val( get_textPaddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textPaddingBottom") ) { return ::hx::Val( set_textPaddingBottom_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"errorStringCalloutOpen") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_errorStringCalloutOpen() ); }
		if (HX_FIELD_EQ(inName,"get_disabledTextFormat") ) { return ::hx::Val( get_disabledTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_disabledTextFormat") ) { return ::hx::Val( set_disabledTextFormat_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"initializeTextAreaTheme") ) { return ::hx::Val( initializeTextAreaTheme_dyn() ); }
		if (HX_FIELD_EQ(inName,"textArea_focusInHandler") ) { return ::hx::Val( textArea_focusInHandler_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"_promptTextMeasuredWidth") ) { return ::hx::Val( _promptTextMeasuredWidth ); }
		if (HX_FIELD_EQ(inName,"get_selectionAnchorIndex") ) { return ::hx::Val( get_selectionAnchorIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionActiveIndex") ) { return ::hx::Val( get_selectionActiveIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"addCurrentBackgroundSkin") ) { return ::hx::Val( addCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentBackgroundSkin") ) { return ::hx::Val( getCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"textArea_focusOutHandler") ) { return ::hx::Val( textArea_focusOutHandler_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_previousSimpleTextFormat") ) { return ::hx::Val( _previousSimpleTextFormat ); }
		if (HX_FIELD_EQ(inName,"_previousPromptTextFormat") ) { return ::hx::Val( _previousPromptTextFormat ); }
		if (HX_FIELD_EQ(inName,"_promptTextMeasuredHeight") ) { return ::hx::Val( _promptTextMeasuredHeight ); }
		if (HX_FIELD_EQ(inName,"customErrorCalloutVariant") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_customErrorCalloutVariant() ); }
		if (HX_FIELD_EQ(inName,"_ignoreViewPortTextChange") ) { return ::hx::Val( _ignoreViewPortTextChange ); }
		if (HX_FIELD_EQ(inName,"clearStyle_textPaddingTop") ) { return ::hx::Val( clearStyle_textPaddingTop_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"get_errorStringCalloutOpen") ) { return ::hx::Val( get_errorStringCalloutOpen_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentPromptTextFormat") ) { return ::hx::Val( getCurrentPromptTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_smoothScrolling") ) { return ::hx::Val( clearStyle_smoothScrolling_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_textPaddingLeft") ) { return ::hx::Val( clearStyle_textPaddingLeft_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"removeCurrentBackgroundSkin") ) { return ::hx::Val( removeCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_promptTextFormat") ) { return ::hx::Val( clearStyle_promptTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_textPaddingRight") ) { return ::hx::Val( clearStyle_textPaddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"__customErrorCalloutVariant") ) { return ::hx::Val( _hx___customErrorCalloutVariant ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"clearStyle_textPaddingBottom") ) { return ::hx::Val( clearStyle_textPaddingBottom_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"showPromptWhenEmptyAndFocused") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_showPromptWhenEmptyAndFocused() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_disabledTextFormat") ) { return ::hx::Val( clearStyle_disabledTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_customErrorCalloutVariant") ) { return ::hx::Val( get_customErrorCalloutVariant_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_customErrorCalloutVariant") ) { return ::hx::Val( set_customErrorCalloutVariant_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"_previousSimplePromptTextFormat") ) { return ::hx::Val( _previousSimplePromptTextFormat ); }
		if (HX_FIELD_EQ(inName,"textArea_viewPort_changeHandler") ) { return ::hx::Val( textArea_viewPort_changeHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"__showPromptWhenEmptyAndFocused") ) { return ::hx::Val( _hx___showPromptWhenEmptyAndFocused ); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"textArea_textFormat_changeHandler") ) { return ::hx::Val( textArea_textFormat_changeHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_showPromptWhenEmptyAndFocused") ) { return ::hx::Val( get_showPromptWhenEmptyAndFocused_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_showPromptWhenEmptyAndFocused") ) { return ::hx::Val( set_showPromptWhenEmptyAndFocused_dyn() ); }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"_previousCustomErrorCalloutVariant") ) { return ::hx::Val( _previousCustomErrorCalloutVariant ); }
		if (HX_FIELD_EQ(inName,"baseScrollContainer_keyDownHandler") ) { return ::hx::Val( baseScrollContainer_keyDownHandler_dyn() ); }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"clearStyle_customErrorCalloutVariant") ) { return ::hx::Val( clearStyle_customErrorCalloutVariant_dyn() ); }
		break;
	case 39:
		if (HX_FIELD_EQ(inName,"textArea_promptTextFormat_changeHandler") ) { return ::hx::Val( textArea_promptTextFormat_changeHandler_dyn() ); }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"clearStyle_showPromptWhenEmptyAndFocused") ) { return ::hx::Val( clearStyle_showPromptWhenEmptyAndFocused_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextArea_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 27:
		if (HX_FIELD_EQ(inName,"CHILD_VARIANT_ERROR_CALLOUT") ) { outValue = ( CHILD_VARIANT_ERROR_CALLOUT ); return true; }
		break;
	case 39:
		if (HX_FIELD_EQ(inName,"INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY") ) { outValue = ( INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY ); return true; }
	}
	return false;
}

::hx::Val TextArea_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { _text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"prompt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_prompt(inValue.Cast< ::String >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_prompt") ) { _prompt=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"editable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_editable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_restrict(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxChars(inValue.Cast< int >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_editable") ) { _editable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_maxChars") ) { _maxChars=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__restrict") ) { _hx___restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textFormat(inValue.Cast<  ::feathers::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_embedFonts(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__wordWrap") ) { _hx___wordWrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_selectable") ) { _selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"errorString") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_errorString(inValue.Cast< ::String >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_errorString") ) { _errorString=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stateToSkin") ) { _stateToSkin=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__embedFonts") ) { _hx___embedFonts=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_currentState") ) { _currentState=inValue.Cast<  ::feathers::controls::TextInputState >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"textPaddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textPaddingTop(inValue.Cast< Float >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"promptTextField") ) { promptTextField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_previousPrompt") ) { _previousPrompt=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"smoothScrolling") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_smoothScrolling(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"textPaddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textPaddingLeft(inValue.Cast< Float >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"promptTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_promptTextFormat(inValue.Cast<  ::feathers::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"textPaddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textPaddingRight(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__textPaddingTop") ) { _hx___textPaddingTop=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"textFieldViewPort") ) { textFieldViewPort=inValue.Cast<  ::feathers::controls::supportClasses::TextFieldViewPort >(); return inValue; }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_displayAsPassword(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"textPaddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textPaddingBottom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__smoothScrolling") ) { _hx___smoothScrolling=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textPaddingLeft") ) { _hx___textPaddingLeft=inValue.Cast< Float >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"errorStringCallout") ) { errorStringCallout=inValue.Cast<  ::feathers::controls::TextCallout >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_displayAsPassword") ) { _displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stateToTextFormat") ) { _stateToTextFormat=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disabledTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_disabledTextFormat(inValue.Cast<  ::feathers::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"__promptTextFormat") ) { _hx___promptTextFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textPaddingRight") ) { _hx___textPaddingRight=inValue.Cast< Float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_previousTextFormat") ) { _previousTextFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textPaddingBottom") ) { _hx___textPaddingBottom=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_updatedPromptStyles") ) { _updatedPromptStyles=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__disabledTextFormat") ) { _hx___disabledTextFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"_promptTextMeasuredWidth") ) { _promptTextMeasuredWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_previousSimpleTextFormat") ) { _previousSimpleTextFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_previousPromptTextFormat") ) { _previousPromptTextFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_promptTextMeasuredHeight") ) { _promptTextMeasuredHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"customErrorCalloutVariant") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_customErrorCalloutVariant(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"_ignoreViewPortTextChange") ) { _ignoreViewPortTextChange=inValue.Cast< bool >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__customErrorCalloutVariant") ) { _hx___customErrorCalloutVariant=inValue.Cast< ::String >(); return inValue; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"showPromptWhenEmptyAndFocused") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_showPromptWhenEmptyAndFocused(inValue.Cast< bool >()) ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"_previousSimplePromptTextFormat") ) { _previousSimplePromptTextFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showPromptWhenEmptyAndFocused") ) { _hx___showPromptWhenEmptyAndFocused=inValue.Cast< bool >(); return inValue; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"_previousCustomErrorCalloutVariant") ) { _previousCustomErrorCalloutVariant=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextArea_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 27:
		if (HX_FIELD_EQ(inName,"CHILD_VARIANT_ERROR_CALLOUT") ) { CHILD_VARIANT_ERROR_CALLOUT=ioValue.Cast< ::String >(); return true; }
		break;
	case 39:
		if (HX_FIELD_EQ(inName,"INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY") ) { INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY=ioValue.Cast<  ::feathers::core::InvalidationFlag >(); return true; }
	}
	return false;
}

void TextArea_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("textFieldViewPort",73,6e,c6,c1));
	outFields->push(HX_("promptTextField",89,5e,9e,da));
	outFields->push(HX_("errorStringCallout",f7,30,3b,02));
	outFields->push(HX_("_previousTextFormat",fa,5e,47,b1));
	outFields->push(HX_("_previousSimpleTextFormat",4c,a6,81,e5));
	outFields->push(HX_("_previousPrompt",da,4d,4f,ed));
	outFields->push(HX_("_previousPromptTextFormat",3e,f6,e8,14));
	outFields->push(HX_("_previousSimplePromptTextFormat",10,87,72,f6));
	outFields->push(HX_("_updatedPromptStyles",c2,90,45,d2));
	outFields->push(HX_("_promptTextMeasuredWidth",30,ed,80,76));
	outFields->push(HX_("_promptTextMeasuredHeight",7d,15,9e,f0));
	outFields->push(HX_("_editable",03,fc,3b,1d));
	outFields->push(HX_("editable",a4,04,a6,d5));
	outFields->push(HX_("_selectable",b5,83,b4,96));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("_currentState",f7,ed,85,ad));
	outFields->push(HX_("currentState",18,5b,17,cb));
	outFields->push(HX_("_text",8c,e8,0a,00));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("baseline",85,dc,27,11));
	outFields->push(HX_("_prompt",43,63,cf,23));
	outFields->push(HX_("prompt",a4,51,58,b5));
	outFields->push(HX_("__restrict",5c,3e,d7,94));
	outFields->push(HX_("restrict",3c,cb,9e,f1));
	outFields->push(HX_("_displayAsPassword",d0,6f,ac,bd));
	outFields->push(HX_("displayAsPassword",0f,cb,96,ea));
	outFields->push(HX_("_errorString",ba,1c,a7,65));
	outFields->push(HX_("errorString",b9,6e,9d,ff));
	outFields->push(HX_("errorStringCalloutOpen",61,a8,19,e4));
	outFields->push(HX_("smoothScrolling",e7,5c,42,f4));
	outFields->push(HX_("_stateToTextFormat",91,fd,b2,b5));
	outFields->push(HX_("textFormat",c4,0f,7f,34));
	outFields->push(HX_("disabledTextFormat",60,88,2b,39));
	outFields->push(HX_("promptTextFormat",88,5a,f4,ec));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("wordWrap",b4,14,db,00));
	outFields->push(HX_("textPaddingTop",51,48,b6,22));
	outFields->push(HX_("textPaddingRight",98,d4,4a,c8));
	outFields->push(HX_("textPaddingBottom",af,c2,81,90));
	outFields->push(HX_("textPaddingLeft",cb,aa,77,37));
	outFields->push(HX_("showPromptWhenEmptyAndFocused",72,ad,6a,b1));
	outFields->push(HX_("selectionAnchorIndex",71,f3,3e,61));
	outFields->push(HX_("selectionActiveIndex",80,c6,b8,49));
	outFields->push(HX_("_maxChars",f8,e6,66,37));
	outFields->push(HX_("maxChars",99,ef,d0,ef));
	outFields->push(HX_("_previousCustomErrorCalloutVariant",f6,2d,40,54));
	outFields->push(HX_("customErrorCalloutVariant",6c,f0,2e,4f));
	outFields->push(HX_("_ignoreViewPortTextChange",34,21,4c,6d));
	outFields->push(HX_("stageFocusTarget",2b,03,77,7f));
	outFields->push(HX_("_stateToSkin",8a,7c,a1,62));
	outFields->push(HX_("__smoothScrolling",c7,8d,9c,77));
	outFields->push(HX_("__textFormat",e4,8a,12,6d));
	outFields->push(HX_("__disabledTextFormat",80,23,5f,18));
	outFields->push(HX_("__promptTextFormat",a8,ed,84,58));
	outFields->push(HX_("__embedFonts",4b,42,75,c7));
	outFields->push(HX_("__wordWrap",d4,87,13,a4));
	outFields->push(HX_("__textPaddingTop",71,d3,f5,56));
	outFields->push(HX_("__textPaddingRight",b8,67,db,33));
	outFields->push(HX_("__textPaddingBottom",8f,eb,71,43));
	outFields->push(HX_("__textPaddingLeft",ab,db,d1,ba));
	outFields->push(HX_("__showPromptWhenEmptyAndFocused",52,a6,64,28));
	outFields->push(HX_("__customErrorCalloutVariant",4c,f9,c2,bd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextArea_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::feathers::controls::supportClasses::TextFieldViewPort */ ,(int)offsetof(TextArea_obj,textFieldViewPort),HX_("textFieldViewPort",73,6e,c6,c1)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(TextArea_obj,promptTextField),HX_("promptTextField",89,5e,9e,da)},
	{::hx::fsObject /*  ::feathers::controls::TextCallout */ ,(int)offsetof(TextArea_obj,errorStringCallout),HX_("errorStringCallout",f7,30,3b,02)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(TextArea_obj,_previousTextFormat),HX_("_previousTextFormat",fa,5e,47,b1)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextArea_obj,_previousSimpleTextFormat),HX_("_previousSimpleTextFormat",4c,a6,81,e5)},
	{::hx::fsString,(int)offsetof(TextArea_obj,_previousPrompt),HX_("_previousPrompt",da,4d,4f,ed)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(TextArea_obj,_previousPromptTextFormat),HX_("_previousPromptTextFormat",3e,f6,e8,14)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextArea_obj,_previousSimplePromptTextFormat),HX_("_previousSimplePromptTextFormat",10,87,72,f6)},
	{::hx::fsBool,(int)offsetof(TextArea_obj,_updatedPromptStyles),HX_("_updatedPromptStyles",c2,90,45,d2)},
	{::hx::fsFloat,(int)offsetof(TextArea_obj,_promptTextMeasuredWidth),HX_("_promptTextMeasuredWidth",30,ed,80,76)},
	{::hx::fsFloat,(int)offsetof(TextArea_obj,_promptTextMeasuredHeight),HX_("_promptTextMeasuredHeight",7d,15,9e,f0)},
	{::hx::fsBool,(int)offsetof(TextArea_obj,_editable),HX_("_editable",03,fc,3b,1d)},
	{::hx::fsBool,(int)offsetof(TextArea_obj,_selectable),HX_("_selectable",b5,83,b4,96)},
	{::hx::fsObject /*  ::feathers::controls::TextInputState */ ,(int)offsetof(TextArea_obj,_currentState),HX_("_currentState",f7,ed,85,ad)},
	{::hx::fsString,(int)offsetof(TextArea_obj,_text),HX_("_text",8c,e8,0a,00)},
	{::hx::fsString,(int)offsetof(TextArea_obj,_prompt),HX_("_prompt",43,63,cf,23)},
	{::hx::fsString,(int)offsetof(TextArea_obj,_hx___restrict),HX_("__restrict",5c,3e,d7,94)},
	{::hx::fsBool,(int)offsetof(TextArea_obj,_displayAsPassword),HX_("_displayAsPassword",d0,6f,ac,bd)},
	{::hx::fsString,(int)offsetof(TextArea_obj,_errorString),HX_("_errorString",ba,1c,a7,65)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(TextArea_obj,_stateToTextFormat),HX_("_stateToTextFormat",91,fd,b2,b5)},
	{::hx::fsInt,(int)offsetof(TextArea_obj,_maxChars),HX_("_maxChars",f8,e6,66,37)},
	{::hx::fsString,(int)offsetof(TextArea_obj,_previousCustomErrorCalloutVariant),HX_("_previousCustomErrorCalloutVariant",f6,2d,40,54)},
	{::hx::fsBool,(int)offsetof(TextArea_obj,_ignoreViewPortTextChange),HX_("_ignoreViewPortTextChange",34,21,4c,6d)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(TextArea_obj,_stateToSkin),HX_("_stateToSkin",8a,7c,a1,62)},
	{::hx::fsBool,(int)offsetof(TextArea_obj,_hx___smoothScrolling),HX_("__smoothScrolling",c7,8d,9c,77)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(TextArea_obj,_hx___textFormat),HX_("__textFormat",e4,8a,12,6d)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(TextArea_obj,_hx___disabledTextFormat),HX_("__disabledTextFormat",80,23,5f,18)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(TextArea_obj,_hx___promptTextFormat),HX_("__promptTextFormat",a8,ed,84,58)},
	{::hx::fsBool,(int)offsetof(TextArea_obj,_hx___embedFonts),HX_("__embedFonts",4b,42,75,c7)},
	{::hx::fsBool,(int)offsetof(TextArea_obj,_hx___wordWrap),HX_("__wordWrap",d4,87,13,a4)},
	{::hx::fsFloat,(int)offsetof(TextArea_obj,_hx___textPaddingTop),HX_("__textPaddingTop",71,d3,f5,56)},
	{::hx::fsFloat,(int)offsetof(TextArea_obj,_hx___textPaddingRight),HX_("__textPaddingRight",b8,67,db,33)},
	{::hx::fsFloat,(int)offsetof(TextArea_obj,_hx___textPaddingBottom),HX_("__textPaddingBottom",8f,eb,71,43)},
	{::hx::fsFloat,(int)offsetof(TextArea_obj,_hx___textPaddingLeft),HX_("__textPaddingLeft",ab,db,d1,ba)},
	{::hx::fsBool,(int)offsetof(TextArea_obj,_hx___showPromptWhenEmptyAndFocused),HX_("__showPromptWhenEmptyAndFocused",52,a6,64,28)},
	{::hx::fsString,(int)offsetof(TextArea_obj,_hx___customErrorCalloutVariant),HX_("__customErrorCalloutVariant",4c,f9,c2,bd)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TextArea_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::feathers::core::InvalidationFlag */ ,(void *) &TextArea_obj::INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY,HX_("INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY",52,80,9e,2a)},
	{::hx::fsString,(void *) &TextArea_obj::CHILD_VARIANT_ERROR_CALLOUT,HX_("CHILD_VARIANT_ERROR_CALLOUT",dc,da,fd,c3)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TextArea_obj_sMemberFields[] = {
	HX_("textFieldViewPort",73,6e,c6,c1),
	HX_("promptTextField",89,5e,9e,da),
	HX_("errorStringCallout",f7,30,3b,02),
	HX_("_previousTextFormat",fa,5e,47,b1),
	HX_("_previousSimpleTextFormat",4c,a6,81,e5),
	HX_("_previousPrompt",da,4d,4f,ed),
	HX_("_previousPromptTextFormat",3e,f6,e8,14),
	HX_("_previousSimplePromptTextFormat",10,87,72,f6),
	HX_("_updatedPromptStyles",c2,90,45,d2),
	HX_("_promptTextMeasuredWidth",30,ed,80,76),
	HX_("_promptTextMeasuredHeight",7d,15,9e,f0),
	HX_("get_tabEnabled",f5,7e,fe,b5),
	HX_("_editable",03,fc,3b,1d),
	HX_("get_editable",ad,b8,bf,8a),
	HX_("set_editable",21,dc,b8,9f),
	HX_("_selectable",b5,83,b4,96),
	HX_("get_selectable",df,3e,20,3a),
	HX_("set_selectable",53,27,40,5a),
	HX_("_currentState",f7,ed,85,ad),
	HX_("get_currentState",a1,47,b6,cf),
	HX_("set_enabled",a4,6b,98,0e),
	HX_("_text",8c,e8,0a,00),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("get_baseline",8e,90,41,c6),
	HX_("_prompt",43,63,cf,23),
	HX_("get_prompt",6d,c1,df,a5),
	HX_("set_prompt",e1,5f,5d,a9),
	HX_("__restrict",5c,3e,d7,94),
	HX_("get_restrict",45,7f,b8,a6),
	HX_("set_restrict",b9,a2,b1,bb),
	HX_("_displayAsPassword",d0,6f,ac,bd),
	HX_("get_displayAsPassword",e6,cd,44,69),
	HX_("set_displayAsPassword",f2,9b,4d,bd),
	HX_("_errorString",ba,1c,a7,65),
	HX_("get_errorString",50,26,7f,c0),
	HX_("set_errorString",5c,a3,4a,bc),
	HX_("get_errorStringCalloutOpen",2a,fa,1e,1c),
	HX_("_stateToTextFormat",91,fd,b2,b5),
	HX_("get_selectionAnchorIndex",fa,10,db,a3),
	HX_("get_selectionActiveIndex",09,e4,54,8c),
	HX_("_maxChars",f8,e6,66,37),
	HX_("get_maxChars",a2,a3,ea,a4),
	HX_("set_maxChars",16,c7,e3,b9),
	HX_("_previousCustomErrorCalloutVariant",f6,2d,40,54),
	HX_("_ignoreViewPortTextChange",34,21,4c,6d),
	HX_("get_measureViewPort",1b,8d,bc,e0),
	HX_("get_stageFocusTarget",34,68,e1,9d),
	HX_("_stateToSkin",8a,7c,a1,62),
	HX_("getSkinForState",9b,6b,a7,62),
	HX_("setSkinForState",a7,e8,72,5e),
	HX_("getTextFormatForState",62,b0,16,a8),
	HX_("setTextFormatForState",6e,7e,1f,fc),
	HX_("selectRange",21,a9,8a,3d),
	HX_("selectAll",85,9b,fc,8d),
	HX_("setTextPadding",22,90,bb,53),
	HX_("showFocus",9b,c5,ed,32),
	HX_("dispose",9f,80,4c,bb),
	HX_("initializeTextAreaTheme",5f,85,40,b6),
	HX_("update",09,86,05,87),
	HX_("layoutChildren",09,3e,82,44),
	HX_("addCurrentBackgroundSkin",c3,bb,57,cf),
	HX_("removeCurrentBackgroundSkin",c0,fc,70,a2),
	HX_("refreshTextStyles",6a,44,c4,9f),
	HX_("refreshPrompt",df,f5,92,b3),
	HX_("refreshPromptText",2c,ca,df,ae),
	HX_("refreshPromptStyles",61,81,52,3b),
	HX_("getCurrentPromptTextFormat",eb,4e,e8,63),
	HX_("refreshErrorString",9e,94,5e,4d),
	HX_("layoutPrompt",ee,cf,9c,d0),
	HX_("getCurrentBackgroundSkin",2e,6b,dc,9d),
	HX_("getCurrentTextFormat",e7,c7,29,33),
	HX_("createErrorCallout",e4,60,b7,ff),
	HX_("destroyErrorCallout",e2,2b,be,d6),
	HX_("changeState",81,1e,d1,a9),
	HX_("refreshState",36,72,8d,97),
	HX_("textArea_focusInHandler",72,e6,cf,ee),
	HX_("textArea_focusOutHandler",2f,1c,9f,9c),
	HX_("baseScrollContainer_keyDownHandler",c5,d5,d2,43),
	HX_("textArea_viewPort_changeHandler",86,97,0d,8f),
	HX_("textArea_textFormat_changeHandler",84,ea,83,be),
	HX_("textArea_promptTextFormat_changeHandler",08,46,95,2a),
	HX_("get_styleContext",47,7d,20,4b),
	HX_("__smoothScrolling",c7,8d,9c,77),
	HX_("get_smoothScrolling",fe,2b,4d,7f),
	HX_("set_smoothScrolling",0a,1f,ea,bb),
	HX_("clearStyle_smoothScrolling",cc,8b,8f,84),
	HX_("__textFormat",e4,8a,12,6d),
	HX_("get_textFormat",0d,98,74,aa),
	HX_("set_textFormat",81,80,94,ca),
	HX_("clearStyle_textFormat",ff,4a,aa,2d),
	HX_("__disabledTextFormat",80,23,5f,18),
	HX_("get_disabledTextFormat",a9,01,c0,92),
	HX_("set_disabledTextFormat",1d,7e,6b,c6),
	HX_("clearStyle_disabledTextFormat",9b,f6,2c,16),
	HX_("__promptTextFormat",a8,ed,84,58),
	HX_("get_promptTextFormat",91,bf,5e,0b),
	HX_("set_promptTextFormat",05,77,16,d8),
	HX_("clearStyle_promptTextFormat",03,34,30,a0),
	HX_("__embedFonts",4b,42,75,c7),
	HX_("get_embedFonts",74,4f,d7,04),
	HX_("set_embedFonts",e8,37,f7,24),
	HX_("clearStyle_embedFonts",66,02,0d,88),
	HX_("__wordWrap",d4,87,13,a4),
	HX_("get_wordWrap",bd,c8,f4,b5),
	HX_("set_wordWrap",31,ec,ed,ca),
	HX_("clearStyle_wordWrap",2f,7b,43,82),
	HX_("__textPaddingTop",71,d3,f5,56),
	HX_("get_textPaddingTop",1a,29,50,be),
	HX_("set_textPaddingTop",8e,5b,ff,9a),
	HX_("clearStyle_textPaddingTop",0c,3d,3f,2a),
	HX_("__textPaddingRight",b8,67,db,33),
	HX_("get_textPaddingRight",a1,39,b5,e6),
	HX_("set_textPaddingRight",15,f1,6c,b3),
	HX_("clearStyle_textPaddingRight",13,ae,86,7b),
	HX_("__textPaddingBottom",8f,eb,71,43),
	HX_("get_textPaddingBottom",86,c5,2f,0f),
	HX_("set_textPaddingBottom",92,93,38,63),
	HX_("clearStyle_textPaddingBottom",d4,34,a4,b1),
	HX_("__textPaddingLeft",ab,db,d1,ba),
	HX_("get_textPaddingLeft",e2,79,82,c2),
	HX_("set_textPaddingLeft",ee,6c,1f,ff),
	HX_("clearStyle_textPaddingLeft",b0,d9,c4,c7),
	HX_("__showPromptWhenEmptyAndFocused",52,a6,64,28),
	HX_("get_showPromptWhenEmptyAndFocused",c9,16,bd,92),
	HX_("set_showPromptWhenEmptyAndFocused",d5,c6,c8,fc),
	HX_("clearStyle_showPromptWhenEmptyAndFocused",17,43,42,ca),
	HX_("__customErrorCalloutVariant",4c,f9,c2,bd),
	HX_("get_customErrorCalloutVariant",43,22,6e,37),
	HX_("set_customErrorCalloutVariant",4f,dc,45,f9),
	HX_("clearStyle_customErrorCalloutVariant",91,8f,f7,5f),
	::String(null()) };

static void TextArea_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextArea_obj::INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY,"INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY");
	HX_MARK_MEMBER_NAME(TextArea_obj::CHILD_VARIANT_ERROR_CALLOUT,"CHILD_VARIANT_ERROR_CALLOUT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextArea_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextArea_obj::INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY,"INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY");
	HX_VISIT_MEMBER_NAME(TextArea_obj::CHILD_VARIANT_ERROR_CALLOUT,"CHILD_VARIANT_ERROR_CALLOUT");
};

#endif

::hx::Class TextArea_obj::__mClass;

static ::String TextArea_obj_sStaticFields[] = {
	HX_("INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY",52,80,9e,2a),
	HX_("CHILD_VARIANT_ERROR_CALLOUT",dc,da,fd,c3),
	::String(null())
};

void TextArea_obj::__register()
{
	TextArea_obj _hx_dummy;
	TextArea_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.TextArea",f4,30,cb,2c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextArea_obj::__GetStatic;
	__mClass->mSetStaticField = &TextArea_obj::__SetStatic;
	__mClass->mMarkFunc = TextArea_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextArea_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextArea_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextArea_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextArea_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextArea_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextArea_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextArea_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_52_boot)
HXDLIN(  52)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("setTextFormatForState",6e,7e,1f,fc), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("style",31,a5,1d,84),null())))
            				->setFixed(1,HX_("setSkinForState",a7,e8,72,5e), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("style",31,a5,1d,84),null())))))
            			->setFixed(1,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("defaultXmlProperty",0b,06,d9,8a),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("text",ad,cc,f9,4c))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_53_boot)
HXDLIN(  53)		INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY = ::feathers::core::InvalidationFlag_obj::CUSTOM(HX_("errorCalloutFactory",e2,a9,b3,d9));
            	}
{
            	HX_STACKFRAME(&_hx_pos_daf92d091ed090b4_68_boot)
HXDLIN(  68)		CHILD_VARIANT_ERROR_CALLOUT = HX_("textArea_errorCallout",8d,17,1e,01);
            	}
}

} // end namespace feathers
} // end namespace controls
