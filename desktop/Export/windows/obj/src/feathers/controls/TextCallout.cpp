// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_feathers_controls_Callout
#include <feathers/controls/Callout.h>
#endif
#ifndef INCLUDED_feathers_controls_Label
#include <feathers/controls/Label.h>
#endif
#ifndef INCLUDED_feathers_controls_TextCallout
#include <feathers/controls/TextCallout.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusManagerAware
#include <feathers/core/IFocusManagerAware.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IHTMLTextControl
#include <feathers/core/IHTMLTextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStageFocusDelegate
#include <feathers/core/IStageFocusDelegate.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_InvalidationFlag
#include <feathers/core/InvalidationFlag.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_RelativePosition
#include <feathers/layout/RelativePosition.h>
#endif
#ifndef INCLUDED_feathers_style_IDarkModeTheme
#include <feathers/style/IDarkModeTheme.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_ITheme
#include <feathers/style/ITheme.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_text_TextFormat
#include <feathers/text/TextFormat.h>
#endif
#ifndef INCLUDED_feathers_themes_ClassVariantTheme
#include <feathers/themes/ClassVariantTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_BaseSteelTheme
#include <feathers/themes/steel/BaseSteelTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_components_SteelTextCalloutStyles
#include <feathers/themes/steel/components/SteelTextCalloutStyles.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_StyleSheet
#include <openfl/text/StyleSheet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_44_new,"feathers.controls.TextCallout","new",0xfb65dd1b,"feathers.controls.TextCallout.new","feathers/controls/TextCallout.hx",44,0x25a5fe95)
HX_LOCAL_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_127_get_text,"feathers.controls.TextCallout","get_text",0x7d73759b,"feathers.controls.TextCallout.get_text","feathers/controls/TextCallout.hx",127,0x25a5fe95)
HX_LOCAL_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_130_set_text,"feathers.controls.TextCallout","set_text",0x2bd0cf0f,"feathers.controls.TextCallout.set_text","feathers/controls/TextCallout.hx",130,0x25a5fe95)
HX_LOCAL_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_160_get_htmlText,"feathers.controls.TextCallout","get_htmlText",0xcc03d7a6,"feathers.controls.TextCallout.get_htmlText","feathers/controls/TextCallout.hx",160,0x25a5fe95)
HX_LOCAL_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_163_set_htmlText,"feathers.controls.TextCallout","set_htmlText",0xe0fcfb1a,"feathers.controls.TextCallout.set_htmlText","feathers/controls/TextCallout.hx",163,0x25a5fe95)
HX_LOCAL_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_177_get_baseline,"feathers.controls.TextCallout","get_baseline",0xccf39473,"feathers.controls.TextCallout.get_baseline","feathers/controls/TextCallout.hx",177,0x25a5fe95)
HX_LOCAL_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_271_initializeTextCalloutTheme,"feathers.controls.TextCallout","initializeTextCalloutTheme",0xb4bd319b,"feathers.controls.TextCallout.initializeTextCalloutTheme","feathers/controls/TextCallout.hx",271,0x25a5fe95)
HX_LOCAL_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_275_initialize,"feathers.controls.TextCallout","initialize",0x7d1c01f5,"feathers.controls.TextCallout.initialize","feathers/controls/TextCallout.hx",275,0x25a5fe95)
HX_LOCAL_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_284_update,"feathers.controls.TextCallout","update",0xad5de02e,"feathers.controls.TextCallout.update","feathers/controls/TextCallout.hx",284,0x25a5fe95)
HX_LOCAL_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_300_refreshTextStyles,"feathers.controls.TextCallout","refreshTextStyles",0xb5a10265,"feathers.controls.TextCallout.refreshTextStyles","feathers/controls/TextCallout.hx",300,0x25a5fe95)
HX_LOCAL_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_310_refreshText,"feathers.controls.TextCallout","refreshText",0x05eb1be3,"feathers.controls.TextCallout.refreshText","feathers/controls/TextCallout.hx",310,0x25a5fe95)
HX_LOCAL_STACK_FRAME(_hx_pos_b50823d7ec930472_42_get_styleContext,"feathers.controls.TextCallout","get_styleContext",0xa152d7ac,"feathers.controls.TextCallout.get_styleContext","feathers/macros/StyleContextMacro.hx",42,0xea61cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_85_get_textFormat,"feathers.controls.TextCallout","get_textFormat",0x449b1f32,"feathers.controls.TextCallout.get_textFormat","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_99_set_textFormat,"feathers.controls.TextCallout","set_textFormat",0x64bb07a6,"feathers.controls.TextCallout.set_textFormat","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_131_clearStyle_textFormat,"feathers.controls.TextCallout","clearStyle_textFormat",0xa2bd227a,"feathers.controls.TextCallout.clearStyle_textFormat","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_85_get_styleSheet,"feathers.controls.TextCallout","get_styleSheet",0x0c324b1c,"feathers.controls.TextCallout.get_styleSheet","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_99_set_styleSheet,"feathers.controls.TextCallout","set_styleSheet",0x2c523390,"feathers.controls.TextCallout.set_styleSheet","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_131_clearStyle_styleSheet,"feathers.controls.TextCallout","clearStyle_styleSheet",0x6a544e64,"feathers.controls.TextCallout.clearStyle_styleSheet","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_85_get_embedFonts,"feathers.controls.TextCallout","get_embedFonts",0x9efdd699,"feathers.controls.TextCallout.get_embedFonts","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_99_set_embedFonts,"feathers.controls.TextCallout","set_embedFonts",0xbf1dbf0d,"feathers.controls.TextCallout.set_embedFonts","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_131_clearStyle_embedFonts,"feathers.controls.TextCallout","clearStyle_embedFonts",0xfd1fd9e1,"feathers.controls.TextCallout.clearStyle_embedFonts","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_85_get_disabledTextFormat,"feathers.controls.TextCallout","get_disabledTextFormat",0x8e29b5ce,"feathers.controls.TextCallout.get_disabledTextFormat","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_99_set_disabledTextFormat,"feathers.controls.TextCallout","set_disabledTextFormat",0xc1d53242,"feathers.controls.TextCallout.set_disabledTextFormat","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_131_clearStyle_disabledTextFormat,"feathers.controls.TextCallout","clearStyle_disabledTextFormat",0x066c4116,"feathers.controls.TextCallout.clearStyle_disabledTextFormat","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_85_get_wordWrap,"feathers.controls.TextCallout","get_wordWrap",0xbca6cca2,"feathers.controls.TextCallout.get_wordWrap","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_99_set_wordWrap,"feathers.controls.TextCallout","set_wordWrap",0xd19ff016,"feathers.controls.TextCallout.set_wordWrap","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_3c2dba69de4fe8ed_131_clearStyle_wordWrap,"feathers.controls.TextCallout","clearStyle_wordWrap",0x5747edea,"feathers.controls.TextCallout.clearStyle_wordWrap","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_82_show,"feathers.controls.TextCallout","show",0x010bebe2,"feathers.controls.TextCallout.show","feathers/controls/TextCallout.hx",82,0x25a5fe95)
HX_LOCAL_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_44_boot,"feathers.controls.TextCallout","boot",0xf5d49b17,"feathers.controls.TextCallout.boot","feathers/controls/TextCallout.hx",44,0x25a5fe95)
HX_LOCAL_STACK_FRAME(_hx_pos_ecc4387c0e0c834d_62_boot,"feathers.controls.TextCallout","boot",0xf5d49b17,"feathers.controls.TextCallout.boot","feathers/controls/TextCallout.hx",62,0x25a5fe95)
namespace feathers{
namespace controls{

void TextCallout_obj::__construct(::String __o_text){
            		::String text = __o_text;
            		if (::hx::IsNull(__o_text)) text = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_44_new)
HXLINE( 267)		this->_hx___wordWrap = false;
HXLINE( 250)		this->_hx___disabledTextFormat = null();
HXLINE( 231)		this->_hx___embedFonts = false;
HXLINE( 214)		this->_hx___styleSheet = null();
HXLINE( 200)		this->_hx___textFormat = null();
HXLINE( 139)		this->_htmlText = null();
HXLINE( 100)		this->initializeTextCalloutTheme();
HXLINE( 101)		super::__construct(null());
HXLINE( 103)		this->set_text(text);
            	}

Dynamic TextCallout_obj::__CreateEmpty() { return new TextCallout_obj; }

void *TextCallout_obj::_hx_vtable = 0;

Dynamic TextCallout_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextCallout_obj > _hx_result = new TextCallout_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextCallout_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x18349751 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x58123034) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x4033f4be || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x58123034;
			}
		} else {
			return inClassId==(int)0x6b353933 || inClassId==(int)0x6e6d822a;
		}
	}
}

static ::feathers::core::IHTMLTextControl_obj _hx_feathers_controls_TextCallout__hx_feathers_core_IHTMLTextControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextCallout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextCallout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextCallout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextCallout_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextCallout_obj::set_enabled,
	( ::String (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_toolTip,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::set_toolTip,
	( void (::hx::Object::*)())&::feathers::controls::TextCallout_obj::initializeNow,
	( void (::hx::Object::*)())&::feathers::controls::TextCallout_obj::dispose,
	( ::String (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_htmlText,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::set_htmlText,
};

static ::openfl::events::IEventDispatcher_obj _hx_feathers_controls_TextCallout__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextCallout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextCallout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextCallout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::willTrigger,
};

static ::feathers::core::ITextControl_obj _hx_feathers_controls_TextCallout__hx_feathers_core_ITextControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextCallout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextCallout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextCallout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextCallout_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextCallout_obj::set_enabled,
	( ::String (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_toolTip,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::set_toolTip,
	( void (::hx::Object::*)())&::feathers::controls::TextCallout_obj::initializeNow,
	( void (::hx::Object::*)())&::feathers::controls::TextCallout_obj::dispose,
	( ::String (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_text,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::set_text,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_baseline,
};

static ::feathers::core::IUIControl_obj _hx_feathers_controls_TextCallout__hx_feathers_core_IUIControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextCallout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextCallout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextCallout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextCallout_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextCallout_obj::set_enabled,
	( ::String (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_toolTip,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::set_toolTip,
	( void (::hx::Object::*)())&::feathers::controls::TextCallout_obj::initializeNow,
	( void (::hx::Object::*)())&::feathers::controls::TextCallout_obj::dispose,
};

static ::feathers::core::IDisplayObject_obj _hx_feathers_controls_TextCallout__hx_feathers_core_IDisplayObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextCallout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextCallout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextCallout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextCallout_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextCallout_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextCallout_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextCallout_obj::set_visible,
};

void *TextCallout_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x13e7e7eb: return &_hx_feathers_controls_TextCallout__hx_feathers_core_IHTMLTextControl;
		case (int)0x87530281: return &_hx_feathers_controls_TextCallout__hx_openfl_events_IEventDispatcher;
		case (int)0xfccd2876: return &_hx_feathers_controls_TextCallout__hx_feathers_core_ITextControl;
		case (int)0x2696a04f: return &_hx_feathers_controls_TextCallout__hx_feathers_core_IUIControl;
		case (int)0x3a979a67: return &_hx_feathers_controls_TextCallout__hx_feathers_core_IDisplayObject;
	}
	return super::_hx_getInterface(inHash);
}

::String TextCallout_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_127_get_text)
HXDLIN( 127)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,get_text,return )

::String TextCallout_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_130_set_text)
HXLINE( 131)		if ((this->_text == value)) {
HXLINE( 132)			return this->_text;
            		}
HXLINE( 134)		this->_text = value;
HXLINE( 135)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 136)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCallout_obj,set_text,return )

::String TextCallout_obj::get_htmlText(){
            	HX_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_160_get_htmlText)
HXDLIN( 160)		return this->_htmlText;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,get_htmlText,return )

::String TextCallout_obj::set_htmlText(::String value){
            	HX_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_163_set_htmlText)
HXLINE( 164)		if ((this->_htmlText == value)) {
HXLINE( 165)			return this->_htmlText;
            		}
HXLINE( 167)		this->_htmlText = value;
HXLINE( 168)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 169)		return this->_htmlText;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCallout_obj,set_htmlText,return )

Float TextCallout_obj::get_baseline(){
            	HX_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_177_get_baseline)
HXLINE( 178)		if (::hx::IsNull( this->label )) {
HXLINE( 179)			return ((Float)0.0);
            		}
HXLINE( 181)		Float _hx_tmp = this->label->get_y();
HXDLIN( 181)		return (_hx_tmp + this->label->get_baseline());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,get_baseline,return )

void TextCallout_obj::initializeTextCalloutTheme(){
            	HX_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_271_initializeTextCalloutTheme)
HXDLIN( 271)		::feathers::themes::steel::components::SteelTextCalloutStyles_obj::initialize(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,initializeTextCalloutTheme,(void))

void TextCallout_obj::initialize(){
            	HX_GC_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_275_initialize)
HXLINE( 276)		this->super::initialize();
HXLINE( 277)		if (::hx::IsNull( this->label )) {
HXLINE( 278)			this->label =  ::feathers::controls::Label_obj::__alloc( HX_CTX ,null());
HXLINE( 279)			this->addChild(this->label);
HXLINE( 280)			this->set_content(this->label);
            		}
            	}


void TextCallout_obj::update(){
            	HX_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_284_update)
HXLINE( 285)		bool dataInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 286)		bool stateInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::STATE_dyn());
HXLINE( 287)		bool stylesInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 289)		bool _hx_tmp;
HXDLIN( 289)		if (!(stylesInvalid)) {
HXLINE( 289)			_hx_tmp = stateInvalid;
            		}
            		else {
HXLINE( 289)			_hx_tmp = true;
            		}
HXDLIN( 289)		if (_hx_tmp) {
HXLINE( 290)			this->refreshTextStyles();
            		}
HXLINE( 293)		bool _hx_tmp1;
HXDLIN( 293)		bool _hx_tmp2;
HXDLIN( 293)		if (!(dataInvalid)) {
HXLINE( 293)			_hx_tmp2 = stylesInvalid;
            		}
            		else {
HXLINE( 293)			_hx_tmp2 = true;
            		}
HXDLIN( 293)		if (!(_hx_tmp2)) {
HXLINE( 293)			_hx_tmp1 = stateInvalid;
            		}
            		else {
HXLINE( 293)			_hx_tmp1 = true;
            		}
HXDLIN( 293)		if (_hx_tmp1) {
HXLINE( 294)			this->refreshText();
            		}
HXLINE( 297)		this->super::update();
            	}


void TextCallout_obj::refreshTextStyles(){
            	HX_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_300_refreshTextStyles)
HXLINE( 301)		 ::feathers::controls::Label _hx_tmp = this->label;
HXDLIN( 301)		_hx_tmp->set_wordWrap(this->get_wordWrap());
HXLINE( 302)		 ::feathers::controls::Label _hx_tmp1 = this->label;
HXDLIN( 302)		_hx_tmp1->set_textFormat(this->get_textFormat());
HXLINE( 303)		 ::feathers::controls::Label _hx_tmp2 = this->label;
HXDLIN( 303)		_hx_tmp2->set_disabledTextFormat(this->get_disabledTextFormat());
HXLINE( 304)		 ::feathers::controls::Label _hx_tmp3 = this->label;
HXDLIN( 304)		_hx_tmp3->set_embedFonts(this->get_embedFonts());
HXLINE( 306)		 ::feathers::controls::Label _hx_tmp4 = this->label;
HXDLIN( 306)		_hx_tmp4->set_styleSheet(this->get_styleSheet());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,refreshTextStyles,(void))

void TextCallout_obj::refreshText(){
            	HX_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_310_refreshText)
HXLINE( 311)		this->label->set_text(this->_text);
HXLINE( 312)		this->label->set_htmlText(this->_htmlText);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,refreshText,(void))

::hx::Class TextCallout_obj::get_styleContext(){
            	HX_STACKFRAME(&_hx_pos_b50823d7ec930472_42_get_styleContext)
HXDLIN(  42)		return ::hx::ClassOf< ::feathers::controls::TextCallout >();
            	}


 ::feathers::text::TextFormat TextCallout_obj::get_textFormat(){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_85_get_textFormat)
HXDLIN(  85)		return this->_hx___textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,get_textFormat,return )

 ::feathers::text::TextFormat TextCallout_obj::set_textFormat( ::feathers::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_99_set_textFormat)
HXLINE( 106)		if (!(this->setStyle(HX_("textFormat",c4,0f,7f,34),null()))) {
HXLINE( 107)			return this->_hx___textFormat;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___textFormat,value )) {
HXLINE( 110)			return this->_hx___textFormat;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_textFormat_dyn();
HXLINE( 116)		this->_hx___textFormat = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCallout_obj,set_textFormat,return )

 ::feathers::text::TextFormat TextCallout_obj::clearStyle_textFormat(){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_131_clearStyle_textFormat)
HXLINE( 132)		this->set_textFormat(null());
HXLINE( 133)		return this->get_textFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,clearStyle_textFormat,return )

 ::openfl::text::StyleSheet TextCallout_obj::get_styleSheet(){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_85_get_styleSheet)
HXDLIN(  85)		return this->_hx___styleSheet;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,get_styleSheet,return )

 ::openfl::text::StyleSheet TextCallout_obj::set_styleSheet( ::openfl::text::StyleSheet value){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_99_set_styleSheet)
HXLINE( 106)		if (!(this->setStyle(HX_("styleSheet",ae,3b,16,fc),null()))) {
HXLINE( 107)			return this->_hx___styleSheet;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___styleSheet,value )) {
HXLINE( 110)			return this->_hx___styleSheet;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_styleSheet_dyn();
HXLINE( 116)		this->_hx___styleSheet = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___styleSheet;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCallout_obj,set_styleSheet,return )

 ::openfl::text::StyleSheet TextCallout_obj::clearStyle_styleSheet(){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_131_clearStyle_styleSheet)
HXLINE( 132)		this->set_styleSheet(null());
HXLINE( 133)		return this->get_styleSheet();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,clearStyle_styleSheet,return )

bool TextCallout_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_85_get_embedFonts)
HXDLIN(  85)		return this->_hx___embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,get_embedFonts,return )

bool TextCallout_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_99_set_embedFonts)
HXLINE( 106)		if (!(this->setStyle(HX_("embedFonts",2b,c7,e1,8e),null()))) {
HXLINE( 107)			return this->_hx___embedFonts;
            		}
HXLINE( 109)		if ((this->_hx___embedFonts == value)) {
HXLINE( 110)			return this->_hx___embedFonts;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_embedFonts_dyn();
HXLINE( 116)		this->_hx___embedFonts = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCallout_obj,set_embedFonts,return )

bool TextCallout_obj::clearStyle_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_131_clearStyle_embedFonts)
HXLINE( 132)		this->set_embedFonts(false);
HXLINE( 133)		return this->get_embedFonts();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,clearStyle_embedFonts,return )

 ::feathers::text::TextFormat TextCallout_obj::get_disabledTextFormat(){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_85_get_disabledTextFormat)
HXDLIN(  85)		return this->_hx___disabledTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,get_disabledTextFormat,return )

 ::feathers::text::TextFormat TextCallout_obj::set_disabledTextFormat( ::feathers::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_99_set_disabledTextFormat)
HXLINE( 106)		if (!(this->setStyle(HX_("disabledTextFormat",60,88,2b,39),null()))) {
HXLINE( 107)			return this->_hx___disabledTextFormat;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___disabledTextFormat,value )) {
HXLINE( 110)			return this->_hx___disabledTextFormat;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_disabledTextFormat_dyn();
HXLINE( 116)		this->_hx___disabledTextFormat = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___disabledTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCallout_obj,set_disabledTextFormat,return )

 ::feathers::text::TextFormat TextCallout_obj::clearStyle_disabledTextFormat(){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_131_clearStyle_disabledTextFormat)
HXLINE( 132)		this->set_disabledTextFormat(null());
HXLINE( 133)		return this->get_disabledTextFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,clearStyle_disabledTextFormat,return )

bool TextCallout_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_85_get_wordWrap)
HXDLIN(  85)		return this->_hx___wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,get_wordWrap,return )

bool TextCallout_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_99_set_wordWrap)
HXLINE( 106)		if (!(this->setStyle(HX_("wordWrap",b4,14,db,00),null()))) {
HXLINE( 107)			return this->_hx___wordWrap;
            		}
HXLINE( 109)		if ((this->_hx___wordWrap == value)) {
HXLINE( 110)			return this->_hx___wordWrap;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_wordWrap_dyn();
HXLINE( 116)		this->_hx___wordWrap = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCallout_obj,set_wordWrap,return )

bool TextCallout_obj::clearStyle_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_3c2dba69de4fe8ed_131_clearStyle_wordWrap)
HXLINE( 132)		this->set_wordWrap(false);
HXLINE( 133)		return this->get_wordWrap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCallout_obj,clearStyle_wordWrap,return )

::String TextCallout_obj::VARIANT_DANGER;

 ::feathers::controls::TextCallout TextCallout_obj::show(::String text, ::openfl::display::DisplayObject origin,::Array< ::Dynamic> supportedPositions,::hx::Null< bool >  __o_modal){
            		bool modal = __o_modal.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_82_show)
HXLINE(  83)		 ::feathers::controls::TextCallout callout =  ::feathers::controls::TextCallout_obj::__alloc( HX_CTX ,text);
HXLINE(  84)		return ::hx::TCast<  ::feathers::controls::TextCallout >::cast(::feathers::controls::Callout_obj::showCallout(callout,origin,supportedPositions,modal,null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(TextCallout_obj,show,return )


::hx::ObjectPtr< TextCallout_obj > TextCallout_obj::__new(::String __o_text) {
	::hx::ObjectPtr< TextCallout_obj > __this = new TextCallout_obj();
	__this->__construct(__o_text);
	return __this;
}

::hx::ObjectPtr< TextCallout_obj > TextCallout_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_text) {
	TextCallout_obj *__this = (TextCallout_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextCallout_obj), true, "feathers.controls.TextCallout"));
	*(void **)__this = TextCallout_obj::_hx_vtable;
	__this->__construct(__o_text);
	return __this;
}

TextCallout_obj::TextCallout_obj()
{
}

void TextCallout_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextCallout);
	HX_MARK_MEMBER_NAME(label,"label");
	HX_MARK_MEMBER_NAME(_text,"_text");
	HX_MARK_MEMBER_NAME(_htmlText,"_htmlText");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___styleSheet,"__styleSheet");
	HX_MARK_MEMBER_NAME(_hx___embedFonts,"__embedFonts");
	HX_MARK_MEMBER_NAME(_hx___disabledTextFormat,"__disabledTextFormat");
	HX_MARK_MEMBER_NAME(_hx___wordWrap,"__wordWrap");
	 ::feathers::controls::Callout_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextCallout_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(label,"label");
	HX_VISIT_MEMBER_NAME(_text,"_text");
	HX_VISIT_MEMBER_NAME(_htmlText,"_htmlText");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___styleSheet,"__styleSheet");
	HX_VISIT_MEMBER_NAME(_hx___embedFonts,"__embedFonts");
	HX_VISIT_MEMBER_NAME(_hx___disabledTextFormat,"__disabledTextFormat");
	HX_VISIT_MEMBER_NAME(_hx___wordWrap,"__wordWrap");
	 ::feathers::controls::Callout_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TextCallout_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_text() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { return ::hx::Val( label ); }
		if (HX_FIELD_EQ(inName,"_text") ) { return ::hx::Val( _text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_text") ) { return ::hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_htmlText() ); }
		if (HX_FIELD_EQ(inName,"baseline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_baseline() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_wordWrap() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_htmlText") ) { return ::hx::Val( _htmlText ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textFormat() ); }
		if (HX_FIELD_EQ(inName,"styleSheet") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_styleSheet() ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_embedFonts() ); }
		if (HX_FIELD_EQ(inName,"initialize") ) { return ::hx::Val( initialize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__wordWrap") ) { return ::hx::Val( _hx___wordWrap ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"refreshText") ) { return ::hx::Val( refreshText_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_htmlText") ) { return ::hx::Val( get_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return ::hx::Val( set_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_baseline") ) { return ::hx::Val( get_baseline_dyn() ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return ::hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"__styleSheet") ) { return ::hx::Val( _hx___styleSheet ); }
		if (HX_FIELD_EQ(inName,"__embedFonts") ) { return ::hx::Val( _hx___embedFonts ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return ::hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return ::hx::Val( set_wordWrap_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_textFormat") ) { return ::hx::Val( get_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textFormat") ) { return ::hx::Val( set_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_styleSheet") ) { return ::hx::Val( get_styleSheet_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_styleSheet") ) { return ::hx::Val( set_styleSheet_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return ::hx::Val( get_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return ::hx::Val( set_embedFonts_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_styleContext") ) { return ::hx::Val( get_styleContext_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"refreshTextStyles") ) { return ::hx::Val( refreshTextStyles_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"disabledTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_disabledTextFormat() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"clearStyle_wordWrap") ) { return ::hx::Val( clearStyle_wordWrap_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__disabledTextFormat") ) { return ::hx::Val( _hx___disabledTextFormat ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"clearStyle_textFormat") ) { return ::hx::Val( clearStyle_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_styleSheet") ) { return ::hx::Val( clearStyle_styleSheet_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_embedFonts") ) { return ::hx::Val( clearStyle_embedFonts_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_disabledTextFormat") ) { return ::hx::Val( get_disabledTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_disabledTextFormat") ) { return ::hx::Val( set_disabledTextFormat_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"initializeTextCalloutTheme") ) { return ::hx::Val( initializeTextCalloutTheme_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"clearStyle_disabledTextFormat") ) { return ::hx::Val( clearStyle_disabledTextFormat_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextCallout_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"show") ) { outValue = show_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"VARIANT_DANGER") ) { outValue = ( VARIANT_DANGER ); return true; }
	}
	return false;
}

::hx::Val TextCallout_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { label=inValue.Cast<  ::feathers::controls::Label >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_text") ) { _text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_htmlText(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_htmlText") ) { _htmlText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textFormat(inValue.Cast<  ::feathers::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"styleSheet") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_styleSheet(inValue.Cast<  ::openfl::text::StyleSheet >()) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_embedFonts(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__wordWrap") ) { _hx___wordWrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__styleSheet") ) { _hx___styleSheet=inValue.Cast<  ::openfl::text::StyleSheet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__embedFonts") ) { _hx___embedFonts=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"disabledTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_disabledTextFormat(inValue.Cast<  ::feathers::text::TextFormat >()) ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__disabledTextFormat") ) { _hx___disabledTextFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextCallout_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"VARIANT_DANGER") ) { VARIANT_DANGER=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void TextCallout_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("label",f4,0d,af,6f));
	outFields->push(HX_("_text",8c,e8,0a,00));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("_htmlText",17,17,ce,57));
	outFields->push(HX_("htmlText",b8,1f,38,10));
	outFields->push(HX_("baseline",85,dc,27,11));
	outFields->push(HX_("textFormat",c4,0f,7f,34));
	outFields->push(HX_("styleSheet",ae,3b,16,fc));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("disabledTextFormat",60,88,2b,39));
	outFields->push(HX_("wordWrap",b4,14,db,00));
	outFields->push(HX_("__textFormat",e4,8a,12,6d));
	outFields->push(HX_("__styleSheet",ce,b6,a9,34));
	outFields->push(HX_("__embedFonts",4b,42,75,c7));
	outFields->push(HX_("__disabledTextFormat",80,23,5f,18));
	outFields->push(HX_("__wordWrap",d4,87,13,a4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextCallout_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::feathers::controls::Label */ ,(int)offsetof(TextCallout_obj,label),HX_("label",f4,0d,af,6f)},
	{::hx::fsString,(int)offsetof(TextCallout_obj,_text),HX_("_text",8c,e8,0a,00)},
	{::hx::fsString,(int)offsetof(TextCallout_obj,_htmlText),HX_("_htmlText",17,17,ce,57)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(TextCallout_obj,_hx___textFormat),HX_("__textFormat",e4,8a,12,6d)},
	{::hx::fsObject /*  ::openfl::text::StyleSheet */ ,(int)offsetof(TextCallout_obj,_hx___styleSheet),HX_("__styleSheet",ce,b6,a9,34)},
	{::hx::fsBool,(int)offsetof(TextCallout_obj,_hx___embedFonts),HX_("__embedFonts",4b,42,75,c7)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(TextCallout_obj,_hx___disabledTextFormat),HX_("__disabledTextFormat",80,23,5f,18)},
	{::hx::fsBool,(int)offsetof(TextCallout_obj,_hx___wordWrap),HX_("__wordWrap",d4,87,13,a4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TextCallout_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &TextCallout_obj::VARIANT_DANGER,HX_("VARIANT_DANGER",bd,82,67,07)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TextCallout_obj_sMemberFields[] = {
	HX_("label",f4,0d,af,6f),
	HX_("_text",8c,e8,0a,00),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("_htmlText",17,17,ce,57),
	HX_("get_htmlText",c1,d3,51,c5),
	HX_("set_htmlText",35,f7,4a,da),
	HX_("get_baseline",8e,90,41,c6),
	HX_("initializeTextCalloutTheme",f6,06,96,e2),
	HX_("initialize",50,31,bb,ec),
	HX_("update",09,86,05,87),
	HX_("refreshTextStyles",6a,44,c4,9f),
	HX_("refreshText",28,5c,95,41),
	HX_("get_styleContext",47,7d,20,4b),
	HX_("__textFormat",e4,8a,12,6d),
	HX_("get_textFormat",0d,98,74,aa),
	HX_("set_textFormat",81,80,94,ca),
	HX_("clearStyle_textFormat",ff,4a,aa,2d),
	HX_("__styleSheet",ce,b6,a9,34),
	HX_("get_styleSheet",f7,c3,0b,72),
	HX_("set_styleSheet",6b,ac,2b,92),
	HX_("clearStyle_styleSheet",e9,76,41,f5),
	HX_("__embedFonts",4b,42,75,c7),
	HX_("get_embedFonts",74,4f,d7,04),
	HX_("set_embedFonts",e8,37,f7,24),
	HX_("clearStyle_embedFonts",66,02,0d,88),
	HX_("__disabledTextFormat",80,23,5f,18),
	HX_("get_disabledTextFormat",a9,01,c0,92),
	HX_("set_disabledTextFormat",1d,7e,6b,c6),
	HX_("clearStyle_disabledTextFormat",9b,f6,2c,16),
	HX_("__wordWrap",d4,87,13,a4),
	HX_("get_wordWrap",bd,c8,f4,b5),
	HX_("set_wordWrap",31,ec,ed,ca),
	HX_("clearStyle_wordWrap",2f,7b,43,82),
	::String(null()) };

static void TextCallout_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextCallout_obj::VARIANT_DANGER,"VARIANT_DANGER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextCallout_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextCallout_obj::VARIANT_DANGER,"VARIANT_DANGER");
};

#endif

::hx::Class TextCallout_obj::__mClass;

static ::String TextCallout_obj_sStaticFields[] = {
	HX_("VARIANT_DANGER",bd,82,67,07),
	HX_("show",fd,d4,52,4c),
	::String(null())
};

void TextCallout_obj::__register()
{
	TextCallout_obj _hx_dummy;
	TextCallout_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.TextCallout",a9,b3,1c,96);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextCallout_obj::__GetStatic;
	__mClass->mSetStaticField = &TextCallout_obj::__SetStatic;
	__mClass->mMarkFunc = TextCallout_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextCallout_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextCallout_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextCallout_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextCallout_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextCallout_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextCallout_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextCallout_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_44_boot)
HXDLIN(  44)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("defaultXmlProperty",0b,06,d9,8a),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("text",ad,cc,f9,4c))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_ecc4387c0e0c834d_62_boot)
HXDLIN(  62)		VARIANT_DANGER = HX_("danger",e3,52,92,1e);
            	}
}

} // end namespace feathers
} // end namespace controls
