// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_controls_Callout
#include <feathers/controls/Callout.h>
#endif
#ifndef INCLUDED_feathers_controls_TextCallout
#include <feathers/controls/TextCallout.h>
#endif
#ifndef INCLUDED_feathers_controls_TextInput
#include <feathers/controls/TextInput.h>
#endif
#ifndef INCLUDED_feathers_controls_TextInputState
#include <feathers/controls/TextInputState.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusManagerAware
#include <feathers/core/IFocusManagerAware.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IHTMLTextControl
#include <feathers/core/IHTMLTextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStageFocusDelegate
#include <feathers/core/IStageFocusDelegate.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_core_IStateObserver
#include <feathers/core/IStateObserver.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_InvalidationFlag
#include <feathers/core/InvalidationFlag.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_PopUpManager
#include <feathers/core/PopUpManager.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_events_FeathersEvent
#include <feathers/events/FeathersEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalAlign
#include <feathers/layout/VerticalAlign.h>
#endif
#ifndef INCLUDED_feathers_skins_IProgrammaticSkin
#include <feathers/skins/IProgrammaticSkin.h>
#endif
#ifndef INCLUDED_feathers_style_IDarkModeTheme
#include <feathers/style/IDarkModeTheme.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_ITheme
#include <feathers/style/ITheme.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_text_TextFormat
#include <feathers/text/TextFormat.h>
#endif
#ifndef INCLUDED_feathers_themes_ClassVariantTheme
#include <feathers/themes/ClassVariantTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_BaseSteelTheme
#include <feathers/themes/steel/BaseSteelTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_components_SteelTextInputStyles
#include <feathers/themes/steel/components/SteelTextInputStyles.h>
#endif
#ifndef INCLUDED_feathers_utils_MeasurementsUtil
#include <feathers/utils/MeasurementsUtil.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5d64ccb50b85967a_62_new,"feathers.controls.TextInput","new",0xa8429735,"feathers.controls.TextInput.new","feathers/controls/TextInput.hx",62,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_140_get_editable,"feathers.controls.TextInput","get_editable",0x0bbdef38,"feathers.controls.TextInput.get_editable","feathers/controls/TextInput.hx",140,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_143_set_editable,"feathers.controls.TextInput","set_editable",0x20b712ac,"feathers.controls.TextInput.set_editable","feathers/controls/TextInput.hx",143,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_171_get_selectable,"feathers.controls.TextInput","get_selectable",0xa0016e2a,"feathers.controls.TextInput.get_selectable","feathers/controls/TextInput.hx",171,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_174_set_selectable,"feathers.controls.TextInput","set_selectable",0xc021569e,"feathers.controls.TextInput.set_selectable","feathers/controls/TextInput.hx",174,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_187_get_stageFocusTarget,"feathers.controls.TextInput","get_stageFocusTarget",0xc219a1bf,"feathers.controls.TextInput.get_stageFocusTarget","feathers/controls/TextInput.hx",187,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_204_get_currentState,"feathers.controls.TextInput","get_currentState",0x53ba1fac,"feathers.controls.TextInput.get_currentState","feathers/controls/TextInput.hx",204,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_207_set_enabled,"feathers.controls.TextInput","set_enabled",0x8e998f79,"feathers.controls.TextInput.set_enabled","feathers/controls/TextInput.hx",207,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_374_get_text,"feathers.controls.TextInput","get_text",0x797bdd41,"feathers.controls.TextInput.get_text","feathers/controls/TextInput.hx",374,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_377_set_text,"feathers.controls.TextInput","set_text",0x27d936b5,"feathers.controls.TextInput.set_text","feathers/controls/TextInput.hx",377,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_411_get_measureText,"feathers.controls.TextInput","get_measureText",0xd08ae517,"feathers.controls.TextInput.get_measureText","feathers/controls/TextInput.hx",411,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_414_set_measureText,"feathers.controls.TextInput","set_measureText",0xcc566223,"feathers.controls.TextInput.set_measureText","feathers/controls/TextInput.hx",414,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_428_get_baseline,"feathers.controls.TextInput","get_baseline",0x473fc719,"feathers.controls.TextInput.get_baseline","feathers/controls/TextInput.hx",428,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_465_get_prompt,"feathers.controls.TextInput","get_prompt",0x92eeaf38,"feathers.controls.TextInput.get_prompt","feathers/controls/TextInput.hx",465,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_468_set_prompt,"feathers.controls.TextInput","set_prompt",0x966c4dac,"feathers.controls.TextInput.set_prompt","feathers/controls/TextInput.hx",468,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_499_get_restrict,"feathers.controls.TextInput","get_restrict",0x27b6b5d0,"feathers.controls.TextInput.get_restrict","feathers/controls/TextInput.hx",499,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_502_set_restrict,"feathers.controls.TextInput","set_restrict",0x3cafd944,"feathers.controls.TextInput.set_restrict","feathers/controls/TextInput.hx",502,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_532_get_displayAsPassword,"feathers.controls.TextInput","get_displayAsPassword",0xf63eedfb,"feathers.controls.TextInput.get_displayAsPassword","feathers/controls/TextInput.hx",532,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_535_set_displayAsPassword,"feathers.controls.TextInput","set_displayAsPassword",0x4a47bc07,"feathers.controls.TextInput.set_displayAsPassword","feathers/controls/TextInput.hx",535,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_569_get_errorString,"feathers.controls.TextInput","get_errorString",0x7fa758a5,"feathers.controls.TextInput.get_errorString","feathers/controls/TextInput.hx",569,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_572_set_errorString,"feathers.controls.TextInput","set_errorString",0x7b72d5b1,"feathers.controls.TextInput.set_errorString","feathers/controls/TextInput.hx",572,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_593_get_errorStringCalloutOpen,"feathers.controls.TextInput","get_errorStringCalloutOpen",0x15ef6df5,"feathers.controls.TextInput.get_errorStringCalloutOpen","feathers/controls/TextInput.hx",593,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_778_get_scrollX,"feathers.controls.TextInput","get_scrollX",0x36d3b797,"feathers.controls.TextInput.get_scrollX","feathers/controls/TextInput.hx",778,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_781_set_scrollX,"feathers.controls.TextInput","set_scrollX",0x4140bea3,"feathers.controls.TextInput.set_scrollX","feathers/controls/TextInput.hx",781,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_808_get_selectionAnchorIndex,"feathers.controls.TextInput","get_selectionAnchorIndex",0x23d66c05,"feathers.controls.TextInput.get_selectionAnchorIndex","feathers/controls/TextInput.hx",808,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_836_get_selectionActiveIndex,"feathers.controls.TextInput","get_selectionActiveIndex",0x0c503f14,"feathers.controls.TextInput.get_selectionActiveIndex","feathers/controls/TextInput.hx",836,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_857_get_maxChars,"feathers.controls.TextInput","get_maxChars",0x25e8da2d,"feathers.controls.TextInput.get_maxChars","feathers/controls/TextInput.hx",857,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_860_set_maxChars,"feathers.controls.TextInput","set_maxChars",0x3ae1fda1,"feathers.controls.TextInput.set_maxChars","feathers/controls/TextInput.hx",860,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_920_getSkinForState,"feathers.controls.TextInput","getSkinForState",0x21cf9df0,"feathers.controls.TextInput.getSkinForState","feathers/controls/TextInput.hx",920,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_938_setSkinForState,"feathers.controls.TextInput","setSkinForState",0x1d9b1afc,"feathers.controls.TextInput.setSkinForState","feathers/controls/TextInput.hx",938,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_969_getTextFormatForState,"feathers.controls.TextInput","getTextFormatForState",0x3510d077,"feathers.controls.TextInput.getTextFormatForState","feathers/controls/TextInput.hx",969,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_987_setTextFormatForState,"feathers.controls.TextInput","setTextFormatForState",0x89199e83,"feathers.controls.TextInput.setTextFormatForState","feathers/controls/TextInput.hx",987,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1014_selectRange,"feathers.controls.TextInput","selectRange",0xbd8bccf6,"feathers.controls.TextInput.selectRange","feathers/controls/TextInput.hx",1014,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1032_selectAll,"feathers.controls.TextInput","selectAll",0x0f9fb01a,"feathers.controls.TextInput.selectAll","feathers/controls/TextInput.hx",1032,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1045_setPadding,"feathers.controls.TextInput","setPadding",0x106b6c1a,"feathers.controls.TextInput.setPadding","feathers/controls/TextInput.hx",1045,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1052_showFocus,"feathers.controls.TextInput","showFocus",0xb490da30,"feathers.controls.TextInput.showFocus","feathers/controls/TextInput.hx",1052,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1059_dispose,"feathers.controls.TextInput","dispose",0xed6fd5f4,"feathers.controls.TextInput.dispose","feathers/controls/TextInput.hx",1059,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1066_initializeTextInputTheme,"feathers.controls.TextInput","initializeTextInputTheme",0xf6f35d27,"feathers.controls.TextInput.initializeTextInputTheme","feathers/controls/TextInput.hx",1066,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1070_initialize,"feathers.controls.TextInput","initialize",0xd9ca1f1b,"feathers.controls.TextInput.initialize","feathers/controls/TextInput.hx",1070,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1084_update,"feathers.controls.TextInput","update",0x74e0f254,"feathers.controls.TextInput.update","feathers/controls/TextInput.hx",1084,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1147_refreshBackgroundSkin,"feathers.controls.TextInput","refreshBackgroundSkin",0xba8b5cdb,"feathers.controls.TextInput.refreshBackgroundSkin","feathers/controls/TextInput.hx",1147,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1157_getCurrentBackgroundSkin,"feathers.controls.TextInput","getCurrentBackgroundSkin",0x1dd7c639,"feathers.controls.TextInput.getCurrentBackgroundSkin","feathers/controls/TextInput.hx",1157,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1165_addCurrentBackgroundSkin,"feathers.controls.TextInput","addCurrentBackgroundSkin",0x4f5316ce,"feathers.controls.TextInput.addCurrentBackgroundSkin","feathers/controls/TextInput.hx",1165,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1187_removeCurrentBackgroundSkin,"feathers.controls.TextInput","removeCurrentBackgroundSkin",0x3f05da95,"feathers.controls.TextInput.removeCurrentBackgroundSkin","feathers/controls/TextInput.hx",1187,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1205_refreshLeftView,"feathers.controls.TextInput","refreshLeftView",0x11cb115c,"feathers.controls.TextInput.refreshLeftView","feathers/controls/TextInput.hx",1205,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1235_getCurrentLeftView,"feathers.controls.TextInput","getCurrentLeftView",0x4b14003a,"feathers.controls.TextInput.getCurrentLeftView","feathers/controls/TextInput.hx",1235,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1238_removeCurrentLeftView,"feathers.controls.TextInput","removeCurrentLeftView",0xad742796,"feathers.controls.TextInput.removeCurrentLeftView","feathers/controls/TextInput.hx",1238,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1257_refreshRightView,"feathers.controls.TextInput","refreshRightView",0xed1cd311,"feathers.controls.TextInput.refreshRightView","feathers/controls/TextInput.hx",1257,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1287_getCurrentRightView,"feathers.controls.TextInput","getCurrentRightView",0xd3a4e673,"feathers.controls.TextInput.getCurrentRightView","feathers/controls/TextInput.hx",1287,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1290_removeCurrentRightView,"feathers.controls.TextInput","removeCurrentRightView",0x85672f97,"feathers.controls.TextInput.removeCurrentRightView","feathers/controls/TextInput.hx",1290,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1309_measure,"feathers.controls.TextInput","measure",0x6f0d50b3,"feathers.controls.TextInput.measure","feathers/controls/TextInput.hx",1309,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1481_refreshTextFieldType,"feathers.controls.TextInput","refreshTextFieldType",0xdce490d7,"feathers.controls.TextInput.refreshTextFieldType","feathers/controls/TextInput.hx",1481,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1488_refreshTextStyles,"feathers.controls.TextInput","refreshTextStyles",0x9f1d75ff,"feathers.controls.TextInput.refreshTextStyles","feathers/controls/TextInput.hx",1488,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1516_refreshPrompt,"feathers.controls.TextInput","refreshPrompt",0x110478f4,"feathers.controls.TextInput.refreshPrompt","feathers/controls/TextInput.hx",1516,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1535_refreshPromptText,"feathers.controls.TextInput","refreshPromptText",0xae38fbc1,"feathers.controls.TextInput.refreshPromptText","feathers/controls/TextInput.hx",1535,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1558_refreshPromptStyles,"feathers.controls.TextInput","refreshPromptStyles",0xa88b0236,"feathers.controls.TextInput.refreshPromptStyles","feathers/controls/TextInput.hx",1558,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1584_getCurrentPromptTextFormat,"feathers.controls.TextInput","getCurrentPromptTextFormat",0x5db8c2b6,"feathers.controls.TextInput.getCurrentPromptTextFormat","feathers/controls/TextInput.hx",1584,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1592_refreshText,"feathers.controls.TextInput","refreshText",0xc1967ffd,"feathers.controls.TextInput.refreshText","feathers/controls/TextInput.hx",1592,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1633_refreshSelection,"feathers.controls.TextInput","refreshSelection",0xc22242fc,"feathers.controls.TextInput.refreshSelection","feathers/controls/TextInput.hx",1633,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1645_refreshScrollPosition,"feathers.controls.TextInput","refreshScrollPosition",0xf1078126,"feathers.controls.TextInput.refreshScrollPosition","feathers/controls/TextInput.hx",1645,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1648_getCurrentTextFormat,"feathers.controls.TextInput","getCurrentTextFormat",0x57620172,"feathers.controls.TextInput.getCurrentTextFormat","feathers/controls/TextInput.hx",1648,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1659_layoutContent,"feathers.controls.TextInput","layoutContent",0x379312c4,"feathers.controls.TextInput.layoutContent","feathers/controls/TextInput.hx",1659,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1718_alignTextField,"feathers.controls.TextInput","alignTextField",0x43175c93,"feathers.controls.TextInput.alignTextField","feathers/controls/TextInput.hx",1718,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1730_layoutBackgroundSkin,"feathers.controls.TextInput","layoutBackgroundSkin",0x0f627760,"feathers.controls.TextInput.layoutBackgroundSkin","feathers/controls/TextInput.hx",1730,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1751_refreshErrorString,"feathers.controls.TextInput","refreshErrorString",0xbc10c569,"feathers.controls.TextInput.refreshErrorString","feathers/controls/TextInput.hx",1751,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1764_createErrorCallout,"feathers.controls.TextInput","createErrorCallout",0x6e6991af,"feathers.controls.TextInput.createErrorCallout","feathers/controls/TextInput.hx",1764,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1777_destroyErrorCallout,"feathers.controls.TextInput","destroyErrorCallout",0x43f6acb7,"feathers.controls.TextInput.destroyErrorCallout","feathers/controls/TextInput.hx",1777,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1787_changeState,"feathers.controls.TextInput","changeState",0x29d24256,"feathers.controls.TextInput.changeState","feathers/controls/TextInput.hx",1787,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1800_refreshState,"feathers.controls.TextInput","refreshState",0x188ba8c1,"feathers.controls.TextInput.refreshState","feathers/controls/TextInput.hx",1800,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1817_textField_changeHandler,"feathers.controls.TextInput","textField_changeHandler",0xc605655d,"feathers.controls.TextInput.textField_changeHandler","feathers/controls/TextInput.hx",1817,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1852_textField_scrollHandler,"feathers.controls.TextInput","textField_scrollHandler",0xd777dc60,"feathers.controls.TextInput.textField_scrollHandler","feathers/controls/TextInput.hx",1852,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1859_textInput_focusInHandler,"feathers.controls.TextInput","textInput_focusInHandler",0xc5f62f9a,"feathers.controls.TextInput.textInput_focusInHandler","feathers/controls/TextInput.hx",1859,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1868_textInput_focusOutHandler,"feathers.controls.TextInput","textInput_focusOutHandler",0x06f8d607,"feathers.controls.TextInput.textInput_focusOutHandler","feathers/controls/TextInput.hx",1868,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1872_textInput_textFormat_changeHandler,"feathers.controls.TextInput","textInput_textFormat_changeHandler",0xd08035ac,"feathers.controls.TextInput.textInput_textFormat_changeHandler","feathers/controls/TextInput.hx",1872,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1876_textInput_promptTextFormat_changeHandler,"feathers.controls.TextInput","textInput_promptTextFormat_changeHandler",0x2ab65f30,"feathers.controls.TextInput.textInput_promptTextFormat_changeHandler","feathers/controls/TextInput.hx",1876,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1879_textInput_leftView_resizeHandler,"feathers.controls.TextInput","textInput_leftView_resizeHandler",0xf3a2b4b0,"feathers.controls.TextInput.textInput_leftView_resizeHandler","feathers/controls/TextInput.hx",1879,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_1886_textInput_rightView_resizeHandler,"feathers.controls.TextInput","textInput_rightView_resizeHandler",0xf46efecb,"feathers.controls.TextInput.textInput_rightView_resizeHandler","feathers/controls/TextInput.hx",1886,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_backgroundSkin,"feathers.controls.TextInput","get_backgroundSkin",0x2abb771f,"feathers.controls.TextInput.get_backgroundSkin","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_backgroundSkin,"feathers.controls.TextInput","set_backgroundSkin",0x076aa993,"feathers.controls.TextInput.set_backgroundSkin","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_backgroundSkin,"feathers.controls.TextInput","clearStyle_backgroundSkin",0xa3eca8db,"feathers.controls.TextInput.clearStyle_backgroundSkin","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_showPromptWhenEmptyAndFocused,"feathers.controls.TextInput","get_showPromptWhenEmptyAndFocused",0x7731825e,"feathers.controls.TextInput.get_showPromptWhenEmptyAndFocused","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_showPromptWhenEmptyAndFocused,"feathers.controls.TextInput","set_showPromptWhenEmptyAndFocused",0xe13d326a,"feathers.controls.TextInput.set_showPromptWhenEmptyAndFocused","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_showPromptWhenEmptyAndFocused,"feathers.controls.TextInput","clearStyle_showPromptWhenEmptyAndFocused",0x7c5da422,"feathers.controls.TextInput.clearStyle_showPromptWhenEmptyAndFocused","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_leftView,"feathers.controls.TextInput","get_leftView",0x8b6260a0,"feathers.controls.TextInput.get_leftView","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_leftView,"feathers.controls.TextInput","set_leftView",0xa05b8414,"feathers.controls.TextInput.set_leftView","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_leftView,"feathers.controls.TextInput","clearStyle_leftView",0x43eb5d5c,"feathers.controls.TextInput.clearStyle_leftView","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_leftViewGap,"feathers.controls.TextInput","get_leftViewGap",0x1c51f856,"feathers.controls.TextInput.get_leftViewGap","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_leftViewGap,"feathers.controls.TextInput","set_leftViewGap",0x181d7562,"feathers.controls.TextInput.set_leftViewGap","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_leftViewGap,"feathers.controls.TextInput","clearStyle_leftViewGap",0x76d2991a,"feathers.controls.TextInput.clearStyle_leftViewGap","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_rightView,"feathers.controls.TextInput","get_rightView",0xd7eadf4d,"feathers.controls.TextInput.get_rightView","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_rightView,"feathers.controls.TextInput","set_rightView",0x1cf0c159,"feathers.controls.TextInput.set_rightView","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_rightView,"feathers.controls.TextInput","clearStyle_rightView",0x973f0711,"feathers.controls.TextInput.clearStyle_rightView","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_rightViewGap,"feathers.controls.TextInput","get_rightViewGap",0x100623c9,"feathers.controls.TextInput.get_rightViewGap","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_rightViewGap,"feathers.controls.TextInput","set_rightViewGap",0x6648113d,"feathers.controls.TextInput.set_rightViewGap","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_rightViewGap,"feathers.controls.TextInput","clearStyle_rightViewGap",0xe6122e85,"feathers.controls.TextInput.clearStyle_rightViewGap","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_textFormat,"feathers.controls.TextInput","get_textFormat",0x1055c758,"feathers.controls.TextInput.get_textFormat","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_textFormat,"feathers.controls.TextInput","set_textFormat",0x3075afcc,"feathers.controls.TextInput.set_textFormat","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_textFormat,"feathers.controls.TextInput","clearStyle_textFormat",0xbaa46b14,"feathers.controls.TextInput.clearStyle_textFormat","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_disabledTextFormat,"feathers.controls.TextInput","get_disabledTextFormat",0x60a1f3f4,"feathers.controls.TextInput.get_disabledTextFormat","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_disabledTextFormat,"feathers.controls.TextInput","set_disabledTextFormat",0x944d7068,"feathers.controls.TextInput.set_disabledTextFormat","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_disabledTextFormat,"feathers.controls.TextInput","clearStyle_disabledTextFormat",0xa814b3b0,"feathers.controls.TextInput.clearStyle_disabledTextFormat","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_promptTextFormat,"feathers.controls.TextInput","get_promptTextFormat",0x2f96f91c,"feathers.controls.TextInput.get_promptTextFormat","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_promptTextFormat,"feathers.controls.TextInput","set_promptTextFormat",0xfc4eb090,"feathers.controls.TextInput.set_promptTextFormat","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_promptTextFormat,"feathers.controls.TextInput","clearStyle_promptTextFormat",0x3cc511d8,"feathers.controls.TextInput.clearStyle_promptTextFormat","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_embedFonts,"feathers.controls.TextInput","get_embedFonts",0x6ab87ebf,"feathers.controls.TextInput.get_embedFonts","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_embedFonts,"feathers.controls.TextInput","set_embedFonts",0x8ad86733,"feathers.controls.TextInput.set_embedFonts","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_embedFonts,"feathers.controls.TextInput","clearStyle_embedFonts",0x1507227b,"feathers.controls.TextInput.clearStyle_embedFonts","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_paddingTop,"feathers.controls.TextInput","get_paddingTop",0x15dcb4d8,"feathers.controls.TextInput.get_paddingTop","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_paddingTop,"feathers.controls.TextInput","set_paddingTop",0x35fc9d4c,"feathers.controls.TextInput.set_paddingTop","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_paddingTop,"feathers.controls.TextInput","clearStyle_paddingTop",0xc02b5894,"feathers.controls.TextInput.clearStyle_paddingTop","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_paddingRight,"feathers.controls.TextInput","get_paddingRight",0xa34ab0df,"feathers.controls.TextInput.get_paddingRight","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_paddingRight,"feathers.controls.TextInput","set_paddingRight",0xf98c9e53,"feathers.controls.TextInput.set_paddingRight","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_paddingRight,"feathers.controls.TextInput","clearStyle_paddingRight",0x7956bb9b,"feathers.controls.TextInput.clearStyle_paddingRight","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_paddingBottom,"feathers.controls.TextInput","get_paddingBottom",0x5562a488,"feathers.controls.TextInput.get_paddingBottom","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_paddingBottom,"feathers.controls.TextInput","set_paddingBottom",0x78d07c94,"feathers.controls.TextInput.set_paddingBottom","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_paddingBottom,"feathers.controls.TextInput","clearStyle_paddingBottom",0xc9dffe4c,"feathers.controls.TextInput.clearStyle_paddingBottom","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_paddingLeft,"feathers.controls.TextInput","get_paddingLeft",0x05f03464,"feathers.controls.TextInput.get_paddingLeft","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_paddingLeft,"feathers.controls.TextInput","set_paddingLeft",0x01bbb170,"feathers.controls.TextInput.set_paddingLeft","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_paddingLeft,"feathers.controls.TextInput","clearStyle_paddingLeft",0x6070d528,"feathers.controls.TextInput.clearStyle_paddingLeft","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_verticalAlign,"feathers.controls.TextInput","get_verticalAlign",0xea455b5b,"feathers.controls.TextInput.get_verticalAlign","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_verticalAlign,"feathers.controls.TextInput","set_verticalAlign",0x0db33367,"feathers.controls.TextInput.set_verticalAlign","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_verticalAlign,"feathers.controls.TextInput","clearStyle_verticalAlign",0x5ec2b51f,"feathers.controls.TextInput.clearStyle_verticalAlign","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_autoSizeWidth,"feathers.controls.TextInput","get_autoSizeWidth",0xb0148102,"feathers.controls.TextInput.get_autoSizeWidth","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_autoSizeWidth,"feathers.controls.TextInput","set_autoSizeWidth",0xd382590e,"feathers.controls.TextInput.set_autoSizeWidth","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_autoSizeWidth,"feathers.controls.TextInput","clearStyle_autoSizeWidth",0x2491dac6,"feathers.controls.TextInput.clearStyle_autoSizeWidth","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_85_get_customErrorCalloutVariant,"feathers.controls.TextInput","get_customErrorCalloutVariant",0xc955df58,"feathers.controls.TextInput.get_customErrorCalloutVariant","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_99_set_customErrorCalloutVariant,"feathers.controls.TextInput","set_customErrorCalloutVariant",0x8b2d9964,"feathers.controls.TextInput.set_customErrorCalloutVariant","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_447a8d73bcab6462_131_clearStyle_customErrorCalloutVariant,"feathers.controls.TextInput","clearStyle_customErrorCalloutVariant",0xd854cf1c,"feathers.controls.TextInput.clearStyle_customErrorCalloutVariant","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_5924568a4aeee60f_42_get_styleContext,"feathers.controls.TextInput","get_styleContext",0xcf245552,"feathers.controls.TextInput.get_styleContext","feathers/macros/StyleContextMacro.hx",42,0xea61cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_62_boot,"feathers.controls.TextInput","boot",0x8a1ab7bd,"feathers.controls.TextInput.boot","feathers/controls/TextInput.hx",62,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_63_boot,"feathers.controls.TextInput","boot",0x8a1ab7bd,"feathers.controls.TextInput.boot","feathers/controls/TextInput.hx",63,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_82_boot,"feathers.controls.TextInput","boot",0x8a1ab7bd,"feathers.controls.TextInput.boot","feathers/controls/TextInput.hx",82,0x8bf5cdbb)
HX_LOCAL_STACK_FRAME(_hx_pos_5d64ccb50b85967a_97_boot,"feathers.controls.TextInput","boot",0x8a1ab7bd,"feathers.controls.TextInput.boot","feathers/controls/TextInput.hx",97,0x8bf5cdbb)
namespace feathers{
namespace controls{

void TextInput_obj::__construct(::String __o_text,::String prompt, ::Dynamic changeListener){
            		::String text = __o_text;
            		if (::hx::IsNull(__o_text)) text = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_5d64ccb50b85967a_62_new)
HXLINE( 899)		this->_hx___customErrorCalloutVariant = null();
HXLINE( 882)		this->_hx___autoSizeWidth = false;
HXLINE( 758)		this->_hx___verticalAlign = ::feathers::layout::VerticalAlign_obj::MIDDLE_dyn();
HXLINE( 738)		this->_hx___paddingLeft = ((Float)0.0);
HXLINE( 720)		this->_hx___paddingBottom = ((Float)0.0);
HXLINE( 702)		this->_hx___paddingRight = ((Float)0.0);
HXLINE( 684)		this->_hx___paddingTop = ((Float)0.0);
HXLINE( 664)		this->_hx___embedFonts = false;
HXLINE( 648)		this->_hx___promptTextFormat = null();
HXLINE( 632)		this->_hx___disabledTextFormat = null();
HXLINE( 613)		this->_hx___textFormat = null();
HXLINE( 331)		this->_hx___rightViewGap = ((Float)0.0);
HXLINE( 315)		this->_hx___rightView = null();
HXLINE( 292)		this->_hx___leftViewGap = ((Float)0.0);
HXLINE( 276)		this->_hx___leftView = null();
HXLINE( 253)		this->_hx___showPromptWhenEmptyAndFocused = true;
HXLINE( 235)		this->_hx___backgroundSkin = null();
HXLINE( 884)		this->_previousCustomErrorCalloutVariant = null();
HXLINE( 844)		this->_maxChars = 0;
HXLINE( 819)		this->_pendingSelectionActiveIndex = -1;
HXLINE( 791)		this->_pendingSelectionAnchorIndex = -1;
HXLINE( 760)		this->_scrollX = ((Float)0.0);
HXLINE( 666)		this->_stateToTextFormat =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 544)		this->_errorString = null();
HXLINE( 511)		this->_displayAsPassword = false;
HXLINE( 395)		this->_measureText = null();
HXLINE( 347)		this->_updatedPromptStyles = false;
HXLINE( 346)		this->_updatedTextStyles = false;
HXLINE( 344)		this->_previousPromptTextFormat = null();
HXLINE( 342)		this->_previousTextFormat = null();
HXLINE( 341)		this->_previousPrompt = null();
HXLINE( 340)		this->_previousMeasureText = null();
HXLINE( 339)		this->_previousText = null();
HXLINE( 333)		this->_stateToSkin =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 296)		this->_ignoreRightViewResize = false;
HXLINE( 257)		this->_ignoreLeftViewResize = false;
HXLINE( 214)		this->_currentBackgroundSkin = null();
HXLINE( 213)		this->_backgroundSkinMeasurements = null();
HXLINE( 190)		this->_currentState = ::feathers::controls::TextInputState_obj::ENABLED_dyn();
HXLINE( 152)		this->_selectable = true;
HXLINE( 124)		this->_editable = true;
HXLINE( 105)		this->initializeTextInputTheme();
HXLINE( 107)		super::__construct();
HXLINE( 109)		this->set_text(text);
HXLINE( 110)		this->set_prompt(prompt);
HXLINE( 112)		this->set_tabEnabled(true);
HXLINE( 113)		this->set_tabChildren(false);
HXLINE( 114)		this->focusRect = null();
HXLINE( 116)		this->addEventListener(HX_("focusIn",dd,45,83,41),this->textInput_focusInHandler_dyn(),null(),null(),null());
HXLINE( 117)		this->addEventListener(HX_("focusOut",96,6f,5e,11),this->textInput_focusOutHandler_dyn(),null(),null(),null());
HXLINE( 119)		if (::hx::IsNotNull( changeListener )) {
HXLINE( 120)			this->addEventListener(HX_("change",70,91,72,b7),changeListener,null(),null(),null());
            		}
            	}

Dynamic TextInput_obj::__CreateEmpty() { return new TextInput_obj; }

void *TextInput_obj::_hx_vtable = 0;

Dynamic TextInput_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextInput_obj > _hx_result = new TextInput_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TextInput_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2d42ea17) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x2d42ea17;
		}
	} else {
		if (inClassId<=(int)0x58123034) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x4033f4be || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x58123034;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

static ::feathers::core::IStageFocusDelegate_obj _hx_feathers_controls_TextInput__hx_feathers_core_IStageFocusDelegate= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextInput_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_focusEnabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_focusEnabled,
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_focusOwner,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::TextInput_obj::set_focusOwner,
	( void (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::showFocus,
	(  ::openfl::display::InteractiveObject (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_stageFocusTarget,
};

static ::feathers::core::IStateContext_obj _hx_feathers_controls_TextInput__hx_feathers_core_IStateContext= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextInput_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::willTrigger,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_currentState_2aa2127b,
};

static ::openfl::events::IEventDispatcher_obj _hx_feathers_controls_TextInput__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextInput_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::willTrigger,
};

static ::feathers::core::ITextControl_obj _hx_feathers_controls_TextInput__hx_feathers_core_ITextControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextInput_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_enabled,
	( ::String (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_toolTip,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::set_toolTip,
	( void (::hx::Object::*)())&::feathers::controls::TextInput_obj::initializeNow,
	( void (::hx::Object::*)())&::feathers::controls::TextInput_obj::dispose,
	( ::String (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_text,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::set_text,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_baseline,
};

static ::feathers::core::IFocusObject_obj _hx_feathers_controls_TextInput__hx_feathers_core_IFocusObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextInput_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_focusEnabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_focusEnabled,
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_focusOwner,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::TextInput_obj::set_focusOwner,
	( void (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::showFocus,
};

static ::feathers::core::IFocusManagerAware_obj _hx_feathers_controls_TextInput__hx_feathers_core_IFocusManagerAware= {
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_focusManager,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::TextInput_obj::set_focusManager,
};

static ::feathers::core::IUIControl_obj _hx_feathers_controls_TextInput__hx_feathers_core_IUIControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextInput_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_enabled,
	( ::String (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_toolTip,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::set_toolTip,
	( void (::hx::Object::*)())&::feathers::controls::TextInput_obj::initializeNow,
	( void (::hx::Object::*)())&::feathers::controls::TextInput_obj::dispose,
};

static ::feathers::core::IDisplayObject_obj _hx_feathers_controls_TextInput__hx_feathers_core_IDisplayObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::TextInput_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::TextInput_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::TextInput_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::TextInput_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::TextInput_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::TextInput_obj::set_visible,
};

 ::Dynamic TextInput_obj::get_currentState_2aa2127b() {
			return get_currentState();
}
void *TextInput_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x4afbe419: return &_hx_feathers_controls_TextInput__hx_feathers_core_IStageFocusDelegate;
		case (int)0xa18fd6d8: return &_hx_feathers_controls_TextInput__hx_feathers_core_IStateContext;
		case (int)0x87530281: return &_hx_feathers_controls_TextInput__hx_openfl_events_IEventDispatcher;
		case (int)0xfccd2876: return &_hx_feathers_controls_TextInput__hx_feathers_core_ITextControl;
		case (int)0x701686fd: return &_hx_feathers_controls_TextInput__hx_feathers_core_IFocusObject;
		case (int)0x7031642f: return &_hx_feathers_controls_TextInput__hx_feathers_core_IFocusManagerAware;
		case (int)0x2696a04f: return &_hx_feathers_controls_TextInput__hx_feathers_core_IUIControl;
		case (int)0x3a979a67: return &_hx_feathers_controls_TextInput__hx_feathers_core_IDisplayObject;
	}
	return super::_hx_getInterface(inHash);
}

bool TextInput_obj::get_editable(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_140_get_editable)
HXDLIN( 140)		return this->_editable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_editable,return )

bool TextInput_obj::set_editable(bool value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_143_set_editable)
HXLINE( 144)		if ((this->_editable == value)) {
HXLINE( 145)			return this->_editable;
            		}
HXLINE( 147)		this->_editable = value;
HXLINE( 148)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STATE_dyn());
HXLINE( 149)		return this->_editable;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_editable,return )

bool TextInput_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_171_get_selectable)
HXDLIN( 171)		return this->_selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_selectable,return )

bool TextInput_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_174_set_selectable)
HXLINE( 175)		if ((this->_selectable == value)) {
HXLINE( 176)			return this->_selectable;
            		}
HXLINE( 178)		this->_selectable = value;
HXLINE( 179)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STATE_dyn());
HXLINE( 180)		return this->_selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_selectable,return )

 ::openfl::display::InteractiveObject TextInput_obj::get_stageFocusTarget(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_187_get_stageFocusTarget)
HXDLIN( 187)		return this->textField;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_stageFocusTarget,return )

 ::feathers::controls::TextInputState TextInput_obj::get_currentState(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_204_get_currentState)
HXDLIN( 204)		return this->_currentState;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_currentState,return )

bool TextInput_obj::set_enabled(bool value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_207_set_enabled)
HXLINE( 208)		this->super::set_enabled(value);
HXLINE( 209)		this->refreshState();
HXLINE( 210)		return this->_enabled;
            	}


::String TextInput_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_374_get_text)
HXDLIN( 374)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_text,return )

::String TextInput_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_377_set_text)
HXLINE( 378)		if (::hx::IsNull( value )) {
HXLINE( 380)			if ((this->_text.length == 0)) {
HXLINE( 382)				return this->_text;
            			}
HXLINE( 384)			value = HX_("",00,00,00,00);
            		}
HXLINE( 386)		if ((this->_text == value)) {
HXLINE( 387)			return this->_text;
            		}
HXLINE( 389)		this->_text = value;
HXLINE( 390)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 391)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 392)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_text,return )

::String TextInput_obj::get_measureText(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_411_get_measureText)
HXDLIN( 411)		return this->_measureText;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_measureText,return )

::String TextInput_obj::set_measureText(::String value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_414_set_measureText)
HXLINE( 415)		if ((this->_measureText == value)) {
HXLINE( 416)			return this->_measureText;
            		}
HXLINE( 418)		this->_measureText = value;
HXLINE( 419)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 420)		return this->_measureText;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_measureText,return )

Float TextInput_obj::get_baseline(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_428_get_baseline)
HXLINE( 429)		if (::hx::IsNull( this->textField )) {
HXLINE( 430)			return ((Float)0.0);
            		}
HXLINE( 434)		bool hasText;
HXDLIN( 434)		if (::hx::IsNotNull( this->_text )) {
HXLINE( 434)			hasText = (this->_text.length > 0);
            		}
            		else {
HXLINE( 434)			hasText = false;
            		}
HXLINE( 435)		if (!(hasText)) {
HXLINE( 436)			this->textField->set_text(HX_W(u"\u200b",ed6d,00ab));
HXLINE( 437)			Float result = this->textField->get_y();
HXDLIN( 437)			Float result1 = (result + this->textField->getLineMetrics(0)->ascent);
HXLINE( 438)			this->textField->set_text(HX_("",00,00,00,00));
HXLINE( 439)			return result1;
            		}
HXLINE( 441)		Float _hx_tmp = this->textField->get_y();
HXDLIN( 441)		return (_hx_tmp + this->textField->getLineMetrics(0)->ascent);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_baseline,return )

::String TextInput_obj::get_prompt(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_465_get_prompt)
HXDLIN( 465)		return this->_prompt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_prompt,return )

::String TextInput_obj::set_prompt(::String value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_468_set_prompt)
HXLINE( 469)		if ((this->_prompt == value)) {
HXLINE( 470)			return this->_prompt;
            		}
HXLINE( 472)		this->_prompt = value;
HXLINE( 473)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 474)		return this->_prompt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_prompt,return )

::String TextInput_obj::get_restrict(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_499_get_restrict)
HXDLIN( 499)		return this->_hx___restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_restrict,return )

::String TextInput_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_502_set_restrict)
HXLINE( 503)		if ((this->_hx___restrict == value)) {
HXLINE( 504)			return this->_hx___restrict;
            		}
HXLINE( 506)		this->_hx___restrict = value;
HXLINE( 507)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 508)		return this->_hx___restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_restrict,return )

bool TextInput_obj::get_displayAsPassword(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_532_get_displayAsPassword)
HXDLIN( 532)		return this->_displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_displayAsPassword,return )

bool TextInput_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_535_set_displayAsPassword)
HXLINE( 536)		if ((this->_displayAsPassword == value)) {
HXLINE( 537)			return this->_displayAsPassword;
            		}
HXLINE( 539)		this->_displayAsPassword = value;
HXLINE( 540)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 541)		return this->_displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_displayAsPassword,return )

::String TextInput_obj::get_errorString(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_569_get_errorString)
HXDLIN( 569)		return this->_errorString;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_errorString,return )

::String TextInput_obj::set_errorString(::String value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_572_set_errorString)
HXLINE( 573)		if ((this->_errorString == value)) {
HXLINE( 574)			return this->_errorString;
            		}
HXLINE( 576)		this->_errorString = value;
HXLINE( 577)		this->refreshState();
HXLINE( 578)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 579)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_errorString,return )

bool TextInput_obj::get_errorStringCalloutOpen(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_593_get_errorStringCalloutOpen)
HXDLIN( 593)		if (::hx::IsNotNull( this->errorStringCallout )) {
HXDLIN( 593)			return ::hx::IsNotNull( this->errorStringCallout->parent );
            		}
            		else {
HXDLIN( 593)			return false;
            		}
HXDLIN( 593)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_errorStringCalloutOpen,return )

Float TextInput_obj::get_scrollX(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_778_get_scrollX)
HXDLIN( 778)		return this->_scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_scrollX,return )

Float TextInput_obj::set_scrollX(Float value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_781_set_scrollX)
HXLINE( 782)		if ((this->_scrollX == value)) {
HXLINE( 783)			return this->_scrollX;
            		}
HXLINE( 785)		this->_scrollX = value;
HXLINE( 786)		this->setInvalid(::feathers::core::InvalidationFlag_obj::SCROLL_dyn());
HXLINE( 787)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scroll",0d,d8,64,47),null(),null());
HXLINE( 788)		return this->_scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_scrollX,return )

int TextInput_obj::get_selectionAnchorIndex(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_808_get_selectionAnchorIndex)
HXLINE( 809)		bool _hx_tmp;
HXDLIN( 809)		if (::hx::IsNotNull( this->textField )) {
HXLINE( 809)			_hx_tmp = (this->_pendingSelectionAnchorIndex == -1);
            		}
            		else {
HXLINE( 809)			_hx_tmp = false;
            		}
HXDLIN( 809)		if (_hx_tmp) {
HXLINE( 811)			int _hx_tmp1 = this->textField->get_caretIndex();
HXDLIN( 811)			if ((_hx_tmp1 == this->textField->get_selectionBeginIndex())) {
HXLINE( 812)				return this->textField->get_selectionEndIndex();
            			}
HXLINE( 814)			return this->textField->get_selectionBeginIndex();
            		}
HXLINE( 816)		return this->_pendingSelectionAnchorIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_selectionAnchorIndex,return )

int TextInput_obj::get_selectionActiveIndex(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_836_get_selectionActiveIndex)
HXLINE( 837)		bool _hx_tmp;
HXDLIN( 837)		if (::hx::IsNotNull( this->textField )) {
HXLINE( 837)			_hx_tmp = (this->_pendingSelectionActiveIndex == -1);
            		}
            		else {
HXLINE( 837)			_hx_tmp = false;
            		}
HXDLIN( 837)		if (_hx_tmp) {
HXLINE( 839)			return this->textField->get_caretIndex();
            		}
HXLINE( 841)		return this->_pendingSelectionActiveIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_selectionActiveIndex,return )

int TextInput_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_857_get_maxChars)
HXDLIN( 857)		return this->_maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_maxChars,return )

int TextInput_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_860_set_maxChars)
HXLINE( 861)		if ((this->_maxChars == value)) {
HXLINE( 862)			return this->_maxChars;
            		}
HXLINE( 864)		this->_maxChars = value;
HXLINE( 865)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 866)		return this->_maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_maxChars,return )

 ::openfl::display::DisplayObject TextInput_obj::getSkinForState( ::feathers::controls::TextInputState state){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_920_getSkinForState)
HXDLIN( 920)		return this->_stateToSkin->get(state).StaticCast<  ::openfl::display::DisplayObject >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,getSkinForState,return )

void TextInput_obj::setSkinForState( ::feathers::controls::TextInputState state, ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_938_setSkinForState)
HXLINE( 939)		if (!(this->setStyle(HX_("setSkinForState",a7,e8,72,5e),state))) {
HXLINE( 940)			return;
            		}
HXLINE( 942)		 ::openfl::display::DisplayObject oldSkin = this->_stateToSkin->get(state).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 943)		bool _hx_tmp;
HXDLIN( 943)		if (::hx::IsNotNull( oldSkin )) {
HXLINE( 943)			_hx_tmp = ::hx::IsInstanceEq( oldSkin,this->_currentBackgroundSkin );
            		}
            		else {
HXLINE( 943)			_hx_tmp = false;
            		}
HXDLIN( 943)		if (_hx_tmp) {
HXLINE( 944)			this->removeCurrentBackgroundSkin(oldSkin);
HXLINE( 945)			this->_currentBackgroundSkin = null();
            		}
HXLINE( 947)		if (::hx::IsNull( skin )) {
HXLINE( 948)			this->_stateToSkin->remove(state);
            		}
            		else {
HXLINE( 950)			this->_stateToSkin->set(state,skin);
            		}
HXLINE( 952)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextInput_obj,setSkinForState,(void))

 ::feathers::text::TextFormat TextInput_obj::getTextFormatForState( ::feathers::controls::TextInputState state){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_969_getTextFormatForState)
HXDLIN( 969)		return this->_stateToTextFormat->get(state).StaticCast<  ::feathers::text::TextFormat >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,getTextFormatForState,return )

void TextInput_obj::setTextFormatForState( ::feathers::controls::TextInputState state, ::feathers::text::TextFormat textFormat){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_987_setTextFormatForState)
HXLINE( 988)		if (!(this->setStyle(HX_("setTextFormatForState",6e,7e,1f,fc),state))) {
HXLINE( 989)			return;
            		}
HXLINE( 991)		if (::hx::IsNull( textFormat )) {
HXLINE( 992)			this->_stateToTextFormat->remove(state);
            		}
            		else {
HXLINE( 994)			this->_stateToTextFormat->set(state,textFormat);
            		}
HXLINE( 996)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextInput_obj,setTextFormatForState,(void))

void TextInput_obj::selectRange(int anchorIndex,int activeIndex){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1014_selectRange)
HXLINE(1017)		this->_pendingSelectionAnchorIndex = anchorIndex;
HXLINE(1018)		this->_pendingSelectionActiveIndex = activeIndex;
HXLINE(1019)		this->setInvalid(::feathers::core::InvalidationFlag_obj::SELECTION_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextInput_obj,selectRange,(void))

void TextInput_obj::selectAll(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1032_selectAll)
HXDLIN(1032)		this->selectRange(0,this->_text.length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,selectAll,(void))

void TextInput_obj::setPadding(Float value){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1045_setPadding)
HXLINE(1046)		this->set_paddingTop(value);
HXLINE(1047)		this->set_paddingRight(value);
HXLINE(1048)		this->set_paddingBottom(value);
HXLINE(1049)		this->set_paddingLeft(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,setPadding,(void))

void TextInput_obj::showFocus(bool show){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1052_showFocus)
HXLINE(1053)		this->super::showFocus(show);
HXLINE(1054)		if (show) {
HXLINE(1055)			this->selectRange(this->_text.length,0);
            		}
            	}


void TextInput_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1059_dispose)
HXLINE(1060)		this->destroyErrorCallout();
HXLINE(1061)		this->super::dispose();
            	}


void TextInput_obj::initializeTextInputTheme(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1066_initializeTextInputTheme)
HXDLIN(1066)		::feathers::themes::steel::components::SteelTextInputStyles_obj::initialize(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,initializeTextInputTheme,(void))

void TextInput_obj::initialize(){
            	HX_GC_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1070_initialize)
HXLINE(1071)		this->super::initialize();
HXLINE(1072)		if (::hx::IsNull( this->textField )) {
HXLINE(1073)			this->textField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(1074)			this->textField->set_tabEnabled(false);
HXLINE(1077)			this->refreshTextFieldType();
HXLINE(1078)			this->textField->addEventListener(HX_("change",70,91,72,b7),this->textField_changeHandler_dyn(),null(),null(),null());
HXLINE(1079)			this->textField->addEventListener(HX_("scroll",0d,d8,64,47),this->textField_scrollHandler_dyn(),null(),null(),null());
HXLINE(1080)			this->addChild(this->textField);
            		}
            	}


void TextInput_obj::update(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1084_update)
HXLINE(1085)		bool dataInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE(1086)		bool scrollInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::SCROLL_dyn());
HXLINE(1087)		bool selectionInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::SELECTION_dyn());
HXLINE(1088)		bool sizeInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
HXLINE(1089)		bool stateInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::STATE_dyn());
HXLINE(1090)		bool stylesInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE(1091)		::String _hx_tmp = this->_previousCustomErrorCalloutVariant;
HXDLIN(1091)		if ((_hx_tmp != this->get_customErrorCalloutVariant())) {
HXLINE(1092)			this->setInvalidationFlag(::feathers::controls::TextInput_obj::INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY);
            		}
HXLINE(1094)		bool errorCalloutFactoryInvalid = this->isInvalid(::feathers::controls::TextInput_obj::INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY);
HXLINE(1096)		this->_updatedTextStyles = false;
HXLINE(1097)		this->_updatedPromptStyles = false;
HXLINE(1101)		bool _hx_tmp1;
HXDLIN(1101)		if (!(errorCalloutFactoryInvalid)) {
HXLINE(1101)			_hx_tmp1 = dataInvalid;
            		}
            		else {
HXLINE(1101)			_hx_tmp1 = true;
            		}
HXDLIN(1101)		if (_hx_tmp1) {
HXLINE(1102)			this->createErrorCallout();
            		}
HXLINE(1105)		bool _hx_tmp2;
HXDLIN(1105)		if (!(stylesInvalid)) {
HXLINE(1105)			_hx_tmp2 = stateInvalid;
            		}
            		else {
HXLINE(1105)			_hx_tmp2 = true;
            		}
HXDLIN(1105)		if (_hx_tmp2) {
HXLINE(1106)			this->refreshBackgroundSkin();
HXLINE(1107)			this->refreshLeftView();
HXLINE(1108)			this->refreshRightView();
            		}
HXLINE(1111)		bool _hx_tmp3;
HXDLIN(1111)		if (!(dataInvalid)) {
HXLINE(1111)			_hx_tmp3 = stateInvalid;
            		}
            		else {
HXLINE(1111)			_hx_tmp3 = true;
            		}
HXDLIN(1111)		if (_hx_tmp3) {
HXLINE(1112)			this->refreshPrompt();
            		}
HXLINE(1115)		bool _hx_tmp4;
HXDLIN(1115)		if (!(stylesInvalid)) {
HXLINE(1115)			_hx_tmp4 = stateInvalid;
            		}
            		else {
HXLINE(1115)			_hx_tmp4 = true;
            		}
HXDLIN(1115)		if (_hx_tmp4) {
HXLINE(1116)			this->refreshTextStyles();
HXLINE(1117)			this->refreshPromptStyles();
            		}
HXLINE(1120)		bool _hx_tmp5;
HXDLIN(1120)		bool _hx_tmp6;
HXDLIN(1120)		bool _hx_tmp7;
HXDLIN(1120)		if (!(dataInvalid)) {
HXLINE(1120)			_hx_tmp7 = stylesInvalid;
            		}
            		else {
HXLINE(1120)			_hx_tmp7 = true;
            		}
HXDLIN(1120)		if (!(_hx_tmp7)) {
HXLINE(1120)			_hx_tmp6 = stateInvalid;
            		}
            		else {
HXLINE(1120)			_hx_tmp6 = true;
            		}
HXDLIN(1120)		if (!(_hx_tmp6)) {
HXLINE(1120)			_hx_tmp5 = sizeInvalid;
            		}
            		else {
HXLINE(1120)			_hx_tmp5 = true;
            		}
HXDLIN(1120)		if (_hx_tmp5) {
HXLINE(1121)			this->refreshText(sizeInvalid);
            		}
HXLINE(1124)		bool _hx_tmp8;
HXDLIN(1124)		bool _hx_tmp9;
HXDLIN(1124)		if (!(dataInvalid)) {
HXLINE(1124)			_hx_tmp9 = stylesInvalid;
            		}
            		else {
HXLINE(1124)			_hx_tmp9 = true;
            		}
HXDLIN(1124)		if (!(_hx_tmp9)) {
HXLINE(1124)			_hx_tmp8 = sizeInvalid;
            		}
            		else {
HXLINE(1124)			_hx_tmp8 = true;
            		}
HXDLIN(1124)		if (_hx_tmp8) {
HXLINE(1125)			this->refreshPromptText(sizeInvalid);
            		}
HXLINE(1128)		if (selectionInvalid) {
HXLINE(1129)			this->refreshSelection();
            		}
HXLINE(1132)		if (scrollInvalid) {
HXLINE(1133)			this->refreshScrollPosition();
            		}
HXLINE(1136)		this->measure();
HXLINE(1137)		this->layoutContent();
HXLINE(1141)		bool _hx_tmp10;
HXDLIN(1141)		bool _hx_tmp11;
HXDLIN(1141)		if (!(errorCalloutFactoryInvalid)) {
HXLINE(1141)			_hx_tmp11 = stateInvalid;
            		}
            		else {
HXLINE(1141)			_hx_tmp11 = true;
            		}
HXDLIN(1141)		if (!(_hx_tmp11)) {
HXLINE(1141)			_hx_tmp10 = dataInvalid;
            		}
            		else {
HXLINE(1141)			_hx_tmp10 = true;
            		}
HXDLIN(1141)		if (_hx_tmp10) {
HXLINE(1142)			this->refreshErrorString();
            		}
HXLINE(1144)		this->_previousCustomErrorCalloutVariant = this->get_customErrorCalloutVariant();
            	}


void TextInput_obj::refreshBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1147_refreshBackgroundSkin)
HXLINE(1148)		 ::openfl::display::DisplayObject oldSkin = this->_currentBackgroundSkin;
HXLINE(1149)		this->_currentBackgroundSkin = this->getCurrentBackgroundSkin();
HXLINE(1150)		if (::hx::IsInstanceEq( this->_currentBackgroundSkin,oldSkin )) {
HXLINE(1151)			return;
            		}
HXLINE(1153)		this->removeCurrentBackgroundSkin(oldSkin);
HXLINE(1154)		this->addCurrentBackgroundSkin(this->_currentBackgroundSkin);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshBackgroundSkin,(void))

 ::openfl::display::DisplayObject TextInput_obj::getCurrentBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1157_getCurrentBackgroundSkin)
HXLINE(1158)		 ::openfl::display::DisplayObject result = this->_stateToSkin->get(this->_currentState).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE(1159)		if (::hx::IsNotNull( result )) {
HXLINE(1160)			return result;
            		}
HXLINE(1162)		return this->get_backgroundSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,getCurrentBackgroundSkin,return )

void TextInput_obj::addCurrentBackgroundSkin( ::openfl::display::DisplayObject skin){
            	HX_GC_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1165_addCurrentBackgroundSkin)
HXLINE(1166)		if (::hx::IsNull( skin )) {
HXLINE(1167)			this->_backgroundSkinMeasurements = null();
HXLINE(1168)			return;
            		}
HXLINE(1170)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::core::IUIControl >())) {
HXLINE(1171)			::feathers::core::IUIControl_obj::initializeNow( ::hx::interface_check(skin,0x2696a04f));
            		}
HXLINE(1173)		if (::hx::IsNull( this->_backgroundSkinMeasurements )) {
HXLINE(1174)			this->_backgroundSkinMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,skin);
            		}
            		else {
HXLINE(1176)			this->_backgroundSkinMeasurements->save(skin);
            		}
HXLINE(1178)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE(1179)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(skin,0x32a0d8d6),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1181)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::core::IStateObserver >())) {
HXLINE(1182)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(skin,0xb36ec70d),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1184)		this->addChildAt(skin,0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,addCurrentBackgroundSkin,(void))

void TextInput_obj::removeCurrentBackgroundSkin( ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1187_removeCurrentBackgroundSkin)
HXLINE(1188)		if (::hx::IsNull( skin )) {
HXLINE(1189)			return;
            		}
HXLINE(1191)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE(1192)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(skin,0x32a0d8d6),null());
            		}
HXLINE(1194)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::core::IStateObserver >())) {
HXLINE(1195)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(skin,0xb36ec70d),null());
            		}
HXLINE(1199)		this->_backgroundSkinMeasurements->restore(skin);
HXLINE(1200)		if (::hx::IsInstanceEq( skin->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1201)			this->removeChild(skin);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,removeCurrentBackgroundSkin,(void))

void TextInput_obj::refreshLeftView(){
            	HX_GC_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1205_refreshLeftView)
HXLINE(1206)		 ::openfl::display::DisplayObject oldView = this->_currentLeftView;
HXLINE(1207)		this->_currentLeftView = this->getCurrentLeftView();
HXLINE(1208)		if (::hx::IsInstanceEq( this->_currentLeftView,oldView )) {
HXLINE(1209)			return;
            		}
HXLINE(1211)		this->removeCurrentLeftView(oldView);
HXLINE(1212)		if (::hx::IsNull( this->_currentLeftView )) {
HXLINE(1213)			this->_leftViewMeasurements = null();
HXLINE(1214)			return;
            		}
HXLINE(1216)		if (::Std_obj::isOfType(this->_currentLeftView,::hx::ClassOf< ::feathers::core::IUIControl >())) {
HXLINE(1217)			::feathers::core::IUIControl_obj::initializeNow( ::hx::interface_check(this->_currentLeftView,0x2696a04f));
            		}
HXLINE(1219)		if (::hx::IsNull( this->_leftViewMeasurements )) {
HXLINE(1220)			this->_leftViewMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,this->_currentLeftView);
            		}
            		else {
HXLINE(1222)			this->_leftViewMeasurements->save(this->_currentLeftView);
            		}
HXLINE(1224)		if (::Std_obj::isOfType(this->_currentLeftView,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE(1225)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(this->_currentLeftView,0x32a0d8d6),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1227)		if (::Std_obj::isOfType(this->_currentLeftView,::hx::ClassOf< ::feathers::core::IStateObserver >())) {
HXLINE(1228)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(this->_currentLeftView,0xb36ec70d),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1230)		this->_currentLeftView->addEventListener(HX_("resize",f4,59,7b,08),this->textInput_leftView_resizeHandler_dyn(),false,0,true);
HXLINE(1231)		this->addChild(this->_currentLeftView);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshLeftView,(void))

 ::openfl::display::DisplayObject TextInput_obj::getCurrentLeftView(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1235_getCurrentLeftView)
HXDLIN(1235)		return this->get_leftView();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,getCurrentLeftView,return )

void TextInput_obj::removeCurrentLeftView( ::openfl::display::DisplayObject view){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1238_removeCurrentLeftView)
HXLINE(1239)		if (::hx::IsNull( view )) {
HXLINE(1240)			return;
            		}
HXLINE(1242)		view->removeEventListener(HX_("resize",f4,59,7b,08),this->textInput_leftView_resizeHandler_dyn(),null());
HXLINE(1243)		if (::Std_obj::isOfType(view,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE(1244)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(view,0x32a0d8d6),null());
            		}
HXLINE(1246)		if (::Std_obj::isOfType(view,::hx::ClassOf< ::feathers::core::IStateObserver >())) {
HXLINE(1247)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(view,0xb36ec70d),null());
            		}
HXLINE(1251)		this->_leftViewMeasurements->restore(view);
HXLINE(1252)		if (::hx::IsInstanceEq( view->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1253)			this->removeChild(view);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,removeCurrentLeftView,(void))

void TextInput_obj::refreshRightView(){
            	HX_GC_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1257_refreshRightView)
HXLINE(1258)		 ::openfl::display::DisplayObject oldView = this->_currentRightView;
HXLINE(1259)		this->_currentRightView = this->getCurrentRightView();
HXLINE(1260)		if (::hx::IsInstanceEq( this->_currentRightView,oldView )) {
HXLINE(1261)			return;
            		}
HXLINE(1263)		this->removeCurrentRightView(oldView);
HXLINE(1264)		if (::hx::IsNull( this->_currentRightView )) {
HXLINE(1265)			this->_rightViewMeasurements = null();
HXLINE(1266)			return;
            		}
HXLINE(1268)		if (::Std_obj::isOfType(this->_currentRightView,::hx::ClassOf< ::feathers::core::IUIControl >())) {
HXLINE(1269)			::feathers::core::IUIControl_obj::initializeNow( ::hx::interface_check(this->_currentRightView,0x2696a04f));
            		}
HXLINE(1271)		if (::hx::IsNull( this->_rightViewMeasurements )) {
HXLINE(1272)			this->_rightViewMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,this->_currentRightView);
            		}
            		else {
HXLINE(1274)			this->_rightViewMeasurements->save(this->_currentRightView);
            		}
HXLINE(1276)		if (::Std_obj::isOfType(this->_currentRightView,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE(1277)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(this->_currentRightView,0x32a0d8d6),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1279)		if (::Std_obj::isOfType(this->_currentRightView,::hx::ClassOf< ::feathers::core::IStateObserver >())) {
HXLINE(1280)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(this->_currentRightView,0xb36ec70d),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1282)		this->_currentRightView->addEventListener(HX_("resize",f4,59,7b,08),this->textInput_rightView_resizeHandler_dyn(),false,0,true);
HXLINE(1283)		this->addChild(this->_currentRightView);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshRightView,(void))

 ::openfl::display::DisplayObject TextInput_obj::getCurrentRightView(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1287_getCurrentRightView)
HXDLIN(1287)		return this->get_rightView();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,getCurrentRightView,return )

void TextInput_obj::removeCurrentRightView( ::openfl::display::DisplayObject view){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1290_removeCurrentRightView)
HXLINE(1291)		if (::hx::IsNull( view )) {
HXLINE(1292)			return;
            		}
HXLINE(1294)		view->removeEventListener(HX_("resize",f4,59,7b,08),this->textInput_rightView_resizeHandler_dyn(),null());
HXLINE(1295)		if (::Std_obj::isOfType(view,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE(1296)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(view,0x32a0d8d6),null());
            		}
HXLINE(1298)		if (::Std_obj::isOfType(view,::hx::ClassOf< ::feathers::core::IStateObserver >())) {
HXLINE(1299)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(view,0xb36ec70d),null());
            		}
HXLINE(1303)		this->_rightViewMeasurements->restore(view);
HXLINE(1304)		if (::hx::IsInstanceEq( view->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1305)			this->removeChild(view);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,removeCurrentRightView,(void))

bool TextInput_obj::measure(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1309_measure)
HXLINE(1310)		bool needsWidth = ::hx::IsNull( this->get_explicitWidth() );
HXLINE(1311)		bool needsHeight = ::hx::IsNull( this->get_explicitHeight() );
HXLINE(1312)		bool needsMinWidth = ::hx::IsNull( this->get_explicitMinWidth() );
HXLINE(1313)		bool needsMinHeight = ::hx::IsNull( this->get_explicitMinHeight() );
HXLINE(1314)		bool needsMaxWidth = ::hx::IsNull( this->get_explicitMaxWidth() );
HXLINE(1315)		bool needsMaxHeight = ::hx::IsNull( this->get_explicitMaxHeight() );
HXLINE(1316)		bool _hx_tmp;
HXDLIN(1316)		bool _hx_tmp1;
HXDLIN(1316)		bool _hx_tmp2;
HXDLIN(1316)		bool _hx_tmp3;
HXDLIN(1316)		bool _hx_tmp4;
HXDLIN(1316)		if (!(needsWidth)) {
HXLINE(1316)			_hx_tmp4 = !(needsHeight);
            		}
            		else {
HXLINE(1316)			_hx_tmp4 = false;
            		}
HXDLIN(1316)		if (_hx_tmp4) {
HXLINE(1316)			_hx_tmp3 = !(needsMinWidth);
            		}
            		else {
HXLINE(1316)			_hx_tmp3 = false;
            		}
HXDLIN(1316)		if (_hx_tmp3) {
HXLINE(1316)			_hx_tmp2 = !(needsMinHeight);
            		}
            		else {
HXLINE(1316)			_hx_tmp2 = false;
            		}
HXDLIN(1316)		if (_hx_tmp2) {
HXLINE(1316)			_hx_tmp1 = !(needsMaxWidth);
            		}
            		else {
HXLINE(1316)			_hx_tmp1 = false;
            		}
HXDLIN(1316)		if (_hx_tmp1) {
HXLINE(1316)			_hx_tmp = !(needsMaxHeight);
            		}
            		else {
HXLINE(1316)			_hx_tmp = false;
            		}
HXDLIN(1316)		if (_hx_tmp) {
HXLINE(1317)			return false;
            		}
HXLINE(1320)		if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE(1321)			::feathers::utils::MeasurementsUtil_obj::resetFluidlyWithParent(this->_backgroundSkinMeasurements,this->_currentBackgroundSkin,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1324)		::Dynamic measureSkin = null();
HXLINE(1325)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,::hx::ClassOf< ::feathers::core::IMeasureObject >())) {
HXLINE(1326)			measureSkin =  ::hx::interface_check(this->_currentBackgroundSkin,0xcfc32883);
            		}
HXLINE(1328)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE(1329)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentBackgroundSkin,0x64d4b3cd));
            		}
HXLINE(1332)		bool oldIgnoreLeftViewResize = this->_ignoreLeftViewResize;
HXLINE(1333)		this->_ignoreLeftViewResize = true;
HXLINE(1334)		bool oldIgnoreRightViewResize = this->_ignoreRightViewResize;
HXLINE(1335)		this->_ignoreRightViewResize = true;
HXLINE(1337)		::Dynamic measureLeftView = null();
HXLINE(1338)		if (::Std_obj::isOfType(this->_currentLeftView,::hx::ClassOf< ::feathers::core::IMeasureObject >())) {
HXLINE(1339)			measureLeftView =  ::hx::interface_check(this->_currentLeftView,0xcfc32883);
            		}
HXLINE(1341)		if (::Std_obj::isOfType(this->_currentLeftView,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE(1342)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentLeftView,0x64d4b3cd));
            		}
HXLINE(1345)		::Dynamic measureRightView = null();
HXLINE(1346)		if (::Std_obj::isOfType(this->_currentRightView,::hx::ClassOf< ::feathers::core::IMeasureObject >())) {
HXLINE(1347)			measureRightView =  ::hx::interface_check(this->_currentRightView,0xcfc32883);
            		}
HXLINE(1349)		if (::Std_obj::isOfType(this->_currentRightView,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE(1350)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentRightView,0x64d4b3cd));
            		}
HXLINE(1353)		this->_ignoreLeftViewResize = oldIgnoreLeftViewResize;
HXLINE(1354)		this->_ignoreRightViewResize = oldIgnoreRightViewResize;
HXLINE(1356)		 ::Dynamic newWidth = this->get_explicitWidth();
HXLINE(1357)		if (needsWidth) {
HXLINE(1358)			bool _hx_tmp5;
HXDLIN(1358)			if (!(this->get_autoSizeWidth())) {
HXLINE(1358)				_hx_tmp5 = ::hx::IsNotNull( this->_measureText );
            			}
            			else {
HXLINE(1358)				_hx_tmp5 = true;
            			}
HXDLIN(1358)			if (_hx_tmp5) {
HXLINE(1359)				newWidth = this->_textMeasuredWidth;
            			}
            			else {
HXLINE(1361)				newWidth = ((Float)0.0);
            			}
HXLINE(1363)			if (::hx::IsNotNull( this->_prompt )) {
HXLINE(1364)				newWidth = ::Math_obj::max(( (Float)(newWidth) ),this->_promptTextMeasuredWidth);
            			}
HXLINE(1366)			if (::hx::IsNotNull( measureLeftView )) {
HXLINE(1367)				Float newWidth1 = ::feathers::core::IDisplayObject_obj::get_width(measureLeftView);
HXDLIN(1367)				newWidth = (newWidth + (newWidth1 + this->get_leftViewGap()));
            			}
            			else {
HXLINE(1368)				if (::hx::IsNotNull( this->_leftViewMeasurements )) {
HXLINE(1369)					 ::Dynamic newWidth2 = this->_leftViewMeasurements->width;
HXDLIN(1369)					newWidth = (newWidth + (newWidth2 + this->get_leftViewGap()));
            				}
            			}
HXLINE(1371)			if (::hx::IsNotNull( measureRightView )) {
HXLINE(1372)				Float newWidth3 = ::feathers::core::IDisplayObject_obj::get_width(measureRightView);
HXDLIN(1372)				newWidth = (newWidth + (newWidth3 + this->get_rightViewGap()));
            			}
            			else {
HXLINE(1373)				if (::hx::IsNotNull( this->_rightViewMeasurements )) {
HXLINE(1374)					 ::Dynamic newWidth4 = this->_rightViewMeasurements->width;
HXDLIN(1374)					newWidth = (newWidth + (newWidth4 + this->get_rightViewGap()));
            				}
            			}
HXLINE(1376)			Float newWidth5 = this->get_paddingLeft();
HXDLIN(1376)			newWidth = (newWidth + (newWidth5 + this->get_paddingRight()));
HXLINE(1377)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE(1378)				newWidth = ::Math_obj::max(this->_currentBackgroundSkin->get_width(),( (Float)(newWidth) ));
            			}
            		}
HXLINE(1382)		 ::Dynamic newHeight = this->get_explicitHeight();
HXLINE(1383)		if (needsHeight) {
HXLINE(1384)			newHeight = this->_textMeasuredHeight;
HXLINE(1385)			if (::hx::IsNotNull( this->_prompt )) {
HXLINE(1386)				newHeight = ::Math_obj::max(( (Float)(newHeight) ),this->_promptTextMeasuredHeight);
            			}
HXLINE(1388)			bool _hx_tmp6;
HXDLIN(1388)			if (::hx::IsNotNull( measureLeftView )) {
HXLINE(1388)				_hx_tmp6 = ::hx::IsLess( newHeight,::feathers::core::IDisplayObject_obj::get_height(measureLeftView) );
            			}
            			else {
HXLINE(1388)				_hx_tmp6 = false;
            			}
HXDLIN(1388)			if (_hx_tmp6) {
HXLINE(1389)				newHeight = ::feathers::core::IDisplayObject_obj::get_height(measureLeftView);
            			}
            			else {
HXLINE(1390)				bool _hx_tmp7;
HXDLIN(1390)				if (::hx::IsNotNull( this->_leftViewMeasurements )) {
HXLINE(1390)					_hx_tmp7 = ::hx::IsLess( newHeight,this->_leftViewMeasurements->height );
            				}
            				else {
HXLINE(1390)					_hx_tmp7 = false;
            				}
HXDLIN(1390)				if (_hx_tmp7) {
HXLINE(1391)					newHeight = this->_leftViewMeasurements->height;
            				}
            			}
HXLINE(1393)			bool _hx_tmp8;
HXDLIN(1393)			if (::hx::IsNotNull( measureRightView )) {
HXLINE(1393)				_hx_tmp8 = ::hx::IsLess( newHeight,::feathers::core::IDisplayObject_obj::get_height(measureRightView) );
            			}
            			else {
HXLINE(1393)				_hx_tmp8 = false;
            			}
HXDLIN(1393)			if (_hx_tmp8) {
HXLINE(1394)				newHeight = ::feathers::core::IDisplayObject_obj::get_height(measureRightView);
            			}
            			else {
HXLINE(1395)				bool _hx_tmp9;
HXDLIN(1395)				if (::hx::IsNotNull( this->_rightViewMeasurements )) {
HXLINE(1395)					_hx_tmp9 = ::hx::IsLess( newHeight,this->_rightViewMeasurements->height );
            				}
            				else {
HXLINE(1395)					_hx_tmp9 = false;
            				}
HXDLIN(1395)				if (_hx_tmp9) {
HXLINE(1396)					newHeight = this->_rightViewMeasurements->height;
            				}
            			}
HXLINE(1398)			Float newHeight1 = this->get_paddingTop();
HXDLIN(1398)			newHeight = (newHeight + (newHeight1 + this->get_paddingBottom()));
HXLINE(1399)			if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE(1400)				newHeight = ::Math_obj::max(this->_currentBackgroundSkin->get_height(),( (Float)(newHeight) ));
            			}
            		}
HXLINE(1404)		 ::Dynamic newMinWidth = this->get_explicitMinWidth();
HXLINE(1405)		if (needsMinWidth) {
HXLINE(1406)			bool _hx_tmp10;
HXDLIN(1406)			if (!(this->get_autoSizeWidth())) {
HXLINE(1406)				_hx_tmp10 = ::hx::IsNotNull( this->_measureText );
            			}
            			else {
HXLINE(1406)				_hx_tmp10 = true;
            			}
HXDLIN(1406)			if (_hx_tmp10) {
HXLINE(1407)				newMinWidth = this->_textMeasuredWidth;
            			}
            			else {
HXLINE(1409)				newMinWidth = ((Float)0.0);
            			}
HXLINE(1411)			if (::hx::IsNotNull( this->_prompt )) {
HXLINE(1412)				newMinWidth = ::Math_obj::max(( (Float)(newMinWidth) ),this->_promptTextMeasuredWidth);
            			}
HXLINE(1414)			if (::hx::IsNotNull( measureLeftView )) {
HXLINE(1415)				Float newMinWidth1 = ::feathers::core::IMeasureObject_obj::get_minWidth(measureLeftView);
HXDLIN(1415)				newMinWidth = (newMinWidth + (newMinWidth1 + this->get_leftViewGap()));
            			}
            			else {
HXLINE(1416)				if (::hx::IsNotNull( this->_leftViewMeasurements )) {
HXLINE(1417)					 ::Dynamic newMinWidth2 = this->_leftViewMeasurements->minWidth;
HXDLIN(1417)					newMinWidth = (newMinWidth + (newMinWidth2 + this->get_leftViewGap()));
            				}
            			}
HXLINE(1419)			if (::hx::IsNotNull( measureRightView )) {
HXLINE(1420)				Float newMinWidth3 = ::feathers::core::IMeasureObject_obj::get_minWidth(measureRightView);
HXDLIN(1420)				newMinWidth = (newMinWidth + (newMinWidth3 + this->get_rightViewGap()));
            			}
            			else {
HXLINE(1421)				if (::hx::IsNotNull( this->_rightViewMeasurements )) {
HXLINE(1422)					 ::Dynamic newMinWidth4 = this->_rightViewMeasurements->minWidth;
HXDLIN(1422)					newMinWidth = (newMinWidth + (newMinWidth4 + this->get_rightViewGap()));
            				}
            			}
HXLINE(1424)			Float newMinWidth5 = this->get_paddingLeft();
HXDLIN(1424)			newMinWidth = (newMinWidth + (newMinWidth5 + this->get_paddingRight()));
HXLINE(1425)			if (::hx::IsNotNull( measureSkin )) {
HXLINE(1426)				newMinWidth = ::Math_obj::max(::feathers::core::IMeasureObject_obj::get_minWidth(measureSkin),( (Float)(newMinWidth) ));
            			}
            			else {
HXLINE(1427)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE(1428)					newMinWidth = ::Math_obj::max(( (Float)(this->_backgroundSkinMeasurements->minWidth) ),( (Float)(newMinWidth) ));
            				}
            			}
            		}
HXLINE(1432)		 ::Dynamic newMinHeight = this->get_explicitMinHeight();
HXLINE(1433)		if (needsMinHeight) {
HXLINE(1434)			newMinHeight = this->_textMeasuredHeight;
HXLINE(1435)			if (::hx::IsNotNull( this->_prompt )) {
HXLINE(1436)				newMinHeight = ::Math_obj::max(( (Float)(newMinHeight) ),this->_promptTextMeasuredHeight);
            			}
HXLINE(1438)			bool _hx_tmp11;
HXDLIN(1438)			if (::hx::IsNotNull( measureLeftView )) {
HXLINE(1438)				_hx_tmp11 = ::hx::IsLess( newMinHeight,::feathers::core::IMeasureObject_obj::get_minHeight(measureLeftView) );
            			}
            			else {
HXLINE(1438)				_hx_tmp11 = false;
            			}
HXDLIN(1438)			if (_hx_tmp11) {
HXLINE(1439)				newMinHeight = ::feathers::core::IMeasureObject_obj::get_minHeight(measureLeftView);
            			}
            			else {
HXLINE(1440)				bool _hx_tmp12;
HXDLIN(1440)				if (::hx::IsNotNull( this->_leftViewMeasurements )) {
HXLINE(1440)					_hx_tmp12 = ::hx::IsLess( newMinHeight,this->_leftViewMeasurements->minHeight );
            				}
            				else {
HXLINE(1440)					_hx_tmp12 = false;
            				}
HXDLIN(1440)				if (_hx_tmp12) {
HXLINE(1441)					newMinHeight = this->_leftViewMeasurements->minHeight;
            				}
            			}
HXLINE(1443)			bool _hx_tmp13;
HXDLIN(1443)			if (::hx::IsNotNull( measureRightView )) {
HXLINE(1443)				_hx_tmp13 = ::hx::IsLess( newMinHeight,::feathers::core::IMeasureObject_obj::get_minHeight(measureRightView) );
            			}
            			else {
HXLINE(1443)				_hx_tmp13 = false;
            			}
HXDLIN(1443)			if (_hx_tmp13) {
HXLINE(1444)				newMinHeight = ::feathers::core::IMeasureObject_obj::get_minHeight(measureRightView);
            			}
            			else {
HXLINE(1445)				bool _hx_tmp14;
HXDLIN(1445)				if (::hx::IsNotNull( this->_rightViewMeasurements )) {
HXLINE(1445)					_hx_tmp14 = ::hx::IsLess( newMinHeight,this->_rightViewMeasurements->minHeight );
            				}
            				else {
HXLINE(1445)					_hx_tmp14 = false;
            				}
HXDLIN(1445)				if (_hx_tmp14) {
HXLINE(1446)					newMinHeight = this->_rightViewMeasurements->minHeight;
            				}
            			}
HXLINE(1448)			Float newMinHeight1 = this->get_paddingTop();
HXDLIN(1448)			newMinHeight = (newMinHeight + (newMinHeight1 + this->get_paddingBottom()));
HXLINE(1449)			if (::hx::IsNotNull( measureSkin )) {
HXLINE(1450)				newMinHeight = ::Math_obj::max(::feathers::core::IMeasureObject_obj::get_minHeight(measureSkin),( (Float)(newMinHeight) ));
            			}
            			else {
HXLINE(1451)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE(1452)					newMinHeight = ::Math_obj::max(( (Float)(this->_backgroundSkinMeasurements->minHeight) ),( (Float)(newMinHeight) ));
            				}
            			}
            		}
HXLINE(1455)		 ::Dynamic newMaxWidth = this->get_explicitMaxWidth();
HXLINE(1456)		if (needsMaxWidth) {
HXLINE(1457)			if (::hx::IsNotNull( measureSkin )) {
HXLINE(1458)				newMaxWidth = ::feathers::core::IMeasureObject_obj::get_maxWidth(measureSkin);
            			}
            			else {
HXLINE(1459)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE(1460)					newMaxWidth = this->_backgroundSkinMeasurements->maxWidth;
            				}
            				else {
HXLINE(1462)					newMaxWidth = ::hx::DivByZero(((Float)1.0));
            				}
            			}
            		}
HXLINE(1466)		 ::Dynamic newMaxHeight = this->get_explicitMaxHeight();
HXLINE(1467)		if (needsMaxHeight) {
HXLINE(1468)			if (::hx::IsNotNull( measureSkin )) {
HXLINE(1469)				newMaxHeight = ::feathers::core::IMeasureObject_obj::get_maxHeight(measureSkin);
            			}
            			else {
HXLINE(1470)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE(1471)					newMaxHeight = this->_backgroundSkinMeasurements->maxHeight;
            				}
            				else {
HXLINE(1473)					newMaxHeight = ::hx::DivByZero(((Float)1.0));
            				}
            			}
            		}
HXLINE(1477)		return this->saveMeasurements(( (Float)(newWidth) ),( (Float)(newHeight) ),newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,measure,return )

void TextInput_obj::refreshTextFieldType(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1481_refreshTextFieldType)
HXDLIN(1481)		bool _hx_tmp;
HXDLIN(1481)		bool _hx_tmp1;
HXDLIN(1481)		if (this->_enabled) {
HXDLIN(1481)			_hx_tmp1 = this->_editable;
            		}
            		else {
HXDLIN(1481)			_hx_tmp1 = false;
            		}
HXDLIN(1481)		if (_hx_tmp1) {
HXDLIN(1481)			_hx_tmp = ::hx::IsNotEq( this->textField->get_type(),1 );
            		}
            		else {
HXDLIN(1481)			_hx_tmp = false;
            		}
HXDLIN(1481)		if (_hx_tmp) {
HXLINE(1482)			this->textField->set_type(1);
            		}
            		else {
HXLINE(1483)			bool _hx_tmp2;
HXDLIN(1483)			bool _hx_tmp3;
HXDLIN(1483)			if (this->_enabled) {
HXLINE(1483)				_hx_tmp3 = !(this->_editable);
            			}
            			else {
HXLINE(1483)				_hx_tmp3 = true;
            			}
HXDLIN(1483)			if (_hx_tmp3) {
HXLINE(1483)				_hx_tmp2 = ::hx::IsEq( this->textField->get_type(),1 );
            			}
            			else {
HXLINE(1483)				_hx_tmp2 = false;
            			}
HXDLIN(1483)			if (_hx_tmp2) {
HXLINE(1484)				this->textField->set_type(0);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshTextFieldType,(void))

void TextInput_obj::refreshTextStyles(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1488_refreshTextStyles)
HXLINE(1489)		this->refreshTextFieldType();
HXLINE(1490)		bool _hx_tmp = this->textField->get_embedFonts();
HXDLIN(1490)		if ((_hx_tmp != this->get_embedFonts())) {
HXLINE(1491)			 ::openfl::text::TextField _hx_tmp1 = this->textField;
HXDLIN(1491)			_hx_tmp1->set_embedFonts(this->get_embedFonts());
HXLINE(1492)			this->_updatedTextStyles = true;
            		}
HXLINE(1494)		bool _hx_tmp2 = this->textField->get_displayAsPassword();
HXDLIN(1494)		if ((_hx_tmp2 != this->_displayAsPassword)) {
HXLINE(1495)			this->textField->set_displayAsPassword(this->_displayAsPassword);
HXLINE(1496)			this->_updatedTextStyles = true;
            		}
HXLINE(1498)		 ::feathers::text::TextFormat textFormat = this->getCurrentTextFormat();
HXLINE(1499)		 ::openfl::text::TextFormat simpleTextFormat;
HXDLIN(1499)		if (::hx::IsNotNull( textFormat )) {
HXLINE(1499)			simpleTextFormat = textFormat->toSimpleTextFormat();
            		}
            		else {
HXLINE(1499)			simpleTextFormat = null();
            		}
HXLINE(1500)		if (::hx::IsInstanceEq( simpleTextFormat,this->_previousSimpleTextFormat )) {
HXLINE(1502)			return;
            		}
HXLINE(1504)		if (::hx::IsNotNull( this->_previousTextFormat )) {
HXLINE(1505)			this->_previousTextFormat->removeEventListener(HX_("change",70,91,72,b7),this->textInput_textFormat_changeHandler_dyn(),null());
            		}
HXLINE(1507)		if (::hx::IsNotNull( textFormat )) {
HXLINE(1508)			textFormat->addEventListener(HX_("change",70,91,72,b7),this->textInput_textFormat_changeHandler_dyn(),false,0,true);
HXLINE(1509)			this->textField->set_defaultTextFormat(simpleTextFormat);
HXLINE(1510)			this->_updatedTextStyles = true;
            		}
HXLINE(1512)		this->_previousTextFormat = textFormat;
HXLINE(1513)		this->_previousSimpleTextFormat = simpleTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshTextStyles,(void))

void TextInput_obj::refreshPrompt(){
            	HX_GC_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1516_refreshPrompt)
HXLINE(1517)		if (::hx::IsNull( this->_prompt )) {
HXLINE(1518)			if (::hx::IsNotNull( this->promptTextField )) {
HXLINE(1519)				this->removeChild(this->promptTextField);
HXLINE(1520)				this->promptTextField = null();
            			}
HXLINE(1522)			return;
            		}
HXLINE(1524)		if (::hx::IsNull( this->promptTextField )) {
HXLINE(1525)			this->promptTextField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(1526)			 ::openfl::text::TextField _hx_tmp = this->promptTextField;
HXDLIN(1526)			this->addChildAt(_hx_tmp,this->getChildIndex(this->textField));
            		}
HXLINE(1528)		this->promptTextField->set_selectable(false);
HXLINE(1529)		this->promptTextField->set_mouseWheelEnabled(false);
HXLINE(1530)		this->promptTextField->mouseEnabled = false;
HXLINE(1531)		 ::openfl::text::TextField _hx_tmp1 = this->promptTextField;
HXDLIN(1531)		bool _hx_tmp2;
HXDLIN(1531)		if ((this->_text.length == 0)) {
HXLINE(1532)			if (::hx::IsPointerEq( this->get_currentState(),::feathers::controls::TextInputState_obj::FOCUSED_dyn() )) {
HXLINE(1531)				_hx_tmp2 = this->get_showPromptWhenEmptyAndFocused();
            			}
            			else {
HXLINE(1531)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE(1531)			_hx_tmp2 = false;
            		}
HXDLIN(1531)		_hx_tmp1->set_visible(_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshPrompt,(void))

void TextInput_obj::refreshPromptText(bool sizeInvalid){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1535_refreshPromptText)
HXLINE(1536)		bool _hx_tmp;
HXDLIN(1536)		if (::hx::IsNotNull( this->_prompt )) {
HXLINE(1536)			bool _hx_tmp1;
HXDLIN(1536)			if ((this->_prompt == this->_previousPrompt)) {
HXLINE(1536)				_hx_tmp1 = !(this->_updatedPromptStyles);
            			}
            			else {
HXLINE(1536)				_hx_tmp1 = false;
            			}
HXDLIN(1536)			if (_hx_tmp1) {
HXLINE(1536)				_hx_tmp = !(sizeInvalid);
            			}
            			else {
HXLINE(1536)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1536)			_hx_tmp = true;
            		}
HXDLIN(1536)		if (_hx_tmp) {
HXLINE(1538)			return;
            		}
HXLINE(1542)		this->promptTextField->set_autoSize(1);
HXLINE(1543)		bool hasPromptText = (this->_prompt.length > 0);
HXLINE(1544)		if (hasPromptText) {
HXLINE(1545)			this->promptTextField->set_text(this->_prompt);
            		}
            		else {
HXLINE(1547)			this->promptTextField->set_text(HX_W(u"\u200b",ed6d,00ab));
            		}
HXLINE(1549)		this->_promptTextMeasuredWidth = this->promptTextField->get_width();
HXLINE(1550)		this->_promptTextMeasuredHeight = this->promptTextField->get_height();
HXLINE(1551)		this->promptTextField->set_autoSize(2);
HXLINE(1552)		if (!(hasPromptText)) {
HXLINE(1553)			this->promptTextField->set_text(HX_("",00,00,00,00));
            		}
HXLINE(1555)		this->_previousPrompt = this->_prompt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,refreshPromptText,(void))

void TextInput_obj::refreshPromptStyles(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1558_refreshPromptStyles)
HXLINE(1559)		if (::hx::IsNull( this->_prompt )) {
HXLINE(1560)			return;
            		}
HXLINE(1562)		bool _hx_tmp = this->promptTextField->get_embedFonts();
HXDLIN(1562)		if ((_hx_tmp != this->get_embedFonts())) {
HXLINE(1563)			 ::openfl::text::TextField _hx_tmp1 = this->promptTextField;
HXDLIN(1563)			_hx_tmp1->set_embedFonts(this->get_embedFonts());
HXLINE(1564)			this->_updatedPromptStyles = true;
            		}
HXLINE(1566)		 ::feathers::text::TextFormat textFormat = this->getCurrentPromptTextFormat();
HXLINE(1567)		 ::openfl::text::TextFormat simpleTextFormat;
HXDLIN(1567)		if (::hx::IsNotNull( textFormat )) {
HXLINE(1567)			simpleTextFormat = textFormat->toSimpleTextFormat();
            		}
            		else {
HXLINE(1567)			simpleTextFormat = null();
            		}
HXLINE(1568)		if (::hx::IsInstanceEq( simpleTextFormat,this->_previousPromptSimpleTextFormat )) {
HXLINE(1570)			return;
            		}
HXLINE(1572)		if (::hx::IsNotNull( this->_previousPromptTextFormat )) {
HXLINE(1573)			this->_previousPromptTextFormat->removeEventListener(HX_("change",70,91,72,b7),this->textInput_promptTextFormat_changeHandler_dyn(),null());
            		}
HXLINE(1575)		if (::hx::IsNotNull( textFormat )) {
HXLINE(1576)			textFormat->addEventListener(HX_("change",70,91,72,b7),this->textInput_textFormat_changeHandler_dyn(),false,0,true);
HXLINE(1577)			this->promptTextField->set_defaultTextFormat(simpleTextFormat);
HXLINE(1578)			this->_updatedPromptStyles = true;
            		}
HXLINE(1580)		this->_previousPromptTextFormat = textFormat;
HXLINE(1581)		this->_previousPromptSimpleTextFormat = simpleTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshPromptStyles,(void))

 ::feathers::text::TextFormat TextInput_obj::getCurrentPromptTextFormat(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1584_getCurrentPromptTextFormat)
HXLINE(1585)		 ::feathers::text::TextFormat textFormat = this->get_promptTextFormat();
HXLINE(1586)		if (::hx::IsNull( textFormat )) {
HXLINE(1587)			textFormat = this->get_textFormat();
            		}
HXLINE(1589)		return textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,getCurrentPromptTextFormat,return )

void TextInput_obj::refreshText(bool forceMeasurement){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1592_refreshText)
HXLINE(1593)		this->textField->set_restrict(this->_hx___restrict);
HXLINE(1594)		this->textField->set_maxChars(this->_maxChars);
HXLINE(1595)		if (this->_editable) {
HXLINE(1596)			this->textField->set_selectable(this->_enabled);
            		}
            		else {
HXLINE(1598)			bool _hx_tmp;
HXDLIN(1598)			if (this->_enabled) {
HXLINE(1598)				_hx_tmp = this->_selectable;
            			}
            			else {
HXLINE(1598)				_hx_tmp = false;
            			}
HXDLIN(1598)			this->textField->set_selectable(_hx_tmp);
            		}
HXLINE(1600)		bool hasMeasureText = ::hx::IsNotNull( this->_measureText );
HXLINE(1601)		::String measureText;
HXDLIN(1601)		if (hasMeasureText) {
HXLINE(1601)			measureText = this->_measureText;
            		}
            		else {
HXLINE(1601)			measureText = this->_text;
            		}
HXLINE(1602)		bool _hx_tmp1;
HXDLIN(1602)		if (::hx::IsNotNull( measureText )) {
HXLINE(1602)			_hx_tmp1 = (measureText.length == 0);
            		}
            		else {
HXLINE(1602)			_hx_tmp1 = true;
            		}
HXDLIN(1602)		if (_hx_tmp1) {
HXLINE(1603)			hasMeasureText = true;
HXLINE(1604)			measureText = HX_W(u"\u200b",ed6d,00ab);
            		}
HXLINE(1606)		bool _hx_tmp2;
HXDLIN(1606)		bool _hx_tmp3;
HXDLIN(1606)		bool _hx_tmp4;
HXDLIN(1606)		if ((this->_text == this->_previousText)) {
HXLINE(1606)			_hx_tmp4 = (measureText == this->_previousMeasureText);
            		}
            		else {
HXLINE(1606)			_hx_tmp4 = false;
            		}
HXDLIN(1606)		if (_hx_tmp4) {
HXLINE(1606)			_hx_tmp3 = !(this->_updatedTextStyles);
            		}
            		else {
HXLINE(1606)			_hx_tmp3 = false;
            		}
HXDLIN(1606)		if (_hx_tmp3) {
HXLINE(1606)			_hx_tmp2 = !(forceMeasurement);
            		}
            		else {
HXLINE(1606)			_hx_tmp2 = false;
            		}
HXDLIN(1606)		if (_hx_tmp2) {
HXLINE(1611)			return;
            		}
HXLINE(1615)		this->textField->set_autoSize(1);
HXLINE(1616)		this->textField->set_text(measureText);
HXLINE(1617)		this->_textMeasuredWidth = this->textField->get_width();
HXLINE(1618)		this->_textMeasuredHeight = this->textField->get_height();
HXLINE(1619)		this->textField->set_autoSize(2);
HXLINE(1620)		::String finalText = null();
HXLINE(1621)		bool _hx_tmp5;
HXDLIN(1621)		if (::hx::IsNotNull( this->_text )) {
HXLINE(1621)			_hx_tmp5 = (this->_text.length == 0);
            		}
            		else {
HXLINE(1621)			_hx_tmp5 = true;
            		}
HXDLIN(1621)		if (_hx_tmp5) {
HXLINE(1622)			finalText = HX_("",00,00,00,00);
            		}
            		else {
HXLINE(1623)			if (hasMeasureText) {
HXLINE(1624)				finalText = this->_text;
            			}
            		}
HXLINE(1626)		if (::hx::IsNotNull( finalText )) {
HXLINE(1627)			this->textField->set_text(finalText);
            		}
HXLINE(1629)		this->_previousText = this->_text;
HXLINE(1630)		this->_previousMeasureText = measureText;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,refreshText,(void))

void TextInput_obj::refreshSelection(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1633_refreshSelection)
HXLINE(1634)		bool _hx_tmp;
HXDLIN(1634)		if ((this->_pendingSelectionActiveIndex == -1)) {
HXLINE(1634)			_hx_tmp = (this->_pendingSelectionAnchorIndex == -1);
            		}
            		else {
HXLINE(1634)			_hx_tmp = false;
            		}
HXDLIN(1634)		if (_hx_tmp) {
HXLINE(1635)			return;
            		}
HXLINE(1637)		int anchorIndex = this->_pendingSelectionAnchorIndex;
HXLINE(1638)		int activeIndex = this->_pendingSelectionActiveIndex;
HXLINE(1639)		this->_pendingSelectionAnchorIndex = -1;
HXLINE(1640)		this->_pendingSelectionActiveIndex = -1;
HXLINE(1641)		this->textField->setSelection(anchorIndex,activeIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshSelection,(void))

void TextInput_obj::refreshScrollPosition(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1645_refreshScrollPosition)
HXDLIN(1645)		this->textField->set_scrollH(::Math_obj::round(this->_scrollX));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshScrollPosition,(void))

 ::feathers::text::TextFormat TextInput_obj::getCurrentTextFormat(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1648_getCurrentTextFormat)
HXLINE(1649)		 ::feathers::text::TextFormat result = this->_stateToTextFormat->get(this->_currentState).StaticCast<  ::feathers::text::TextFormat >();
HXLINE(1650)		if (::hx::IsNotNull( result )) {
HXLINE(1651)			return result;
            		}
HXLINE(1653)		bool _hx_tmp;
HXDLIN(1653)		if (!(this->_enabled)) {
HXLINE(1653)			_hx_tmp = ::hx::IsNotNull( this->get_disabledTextFormat() );
            		}
            		else {
HXLINE(1653)			_hx_tmp = false;
            		}
HXDLIN(1653)		if (_hx_tmp) {
HXLINE(1654)			return this->get_disabledTextFormat();
            		}
HXLINE(1656)		return this->get_textFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,getCurrentTextFormat,return )

void TextInput_obj::layoutContent(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1659_layoutContent)
HXLINE(1660)		bool oldIgnoreLeftViewResize = this->_ignoreLeftViewResize;
HXLINE(1661)		this->_ignoreLeftViewResize = true;
HXLINE(1662)		bool oldIgnoreRightViewResize = this->_ignoreRightViewResize;
HXLINE(1663)		this->_ignoreRightViewResize = true;
HXLINE(1665)		this->layoutBackgroundSkin();
HXLINE(1667)		Float textFieldHeight = this->_textMeasuredHeight;
HXLINE(1668)		Float maxHeight = this->actualHeight;
HXDLIN(1668)		Float maxHeight1 = (maxHeight - this->get_paddingTop());
HXDLIN(1668)		Float maxHeight2 = (maxHeight1 - this->get_paddingBottom());
HXLINE(1669)		bool _hx_tmp;
HXDLIN(1669)		if (!((textFieldHeight > maxHeight2))) {
HXLINE(1669)			_hx_tmp = ::hx::IsPointerEq( this->get_verticalAlign(),::feathers::layout::VerticalAlign_obj::JUSTIFY_dyn() );
            		}
            		else {
HXLINE(1669)			_hx_tmp = true;
            		}
HXDLIN(1669)		if (_hx_tmp) {
HXLINE(1670)			textFieldHeight = maxHeight2;
            		}
HXLINE(1672)		this->textField->set_height(textFieldHeight);
HXLINE(1674)		Float leftViewOffset = ((Float)0.0);
HXLINE(1675)		if (::hx::IsNotNull( this->_currentLeftView )) {
HXLINE(1676)			if (::Std_obj::isOfType(this->_currentLeftView,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE(1677)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentLeftView,0x64d4b3cd));
            			}
HXLINE(1679)			 ::openfl::display::DisplayObject _hx_tmp1 = this->_currentLeftView;
HXDLIN(1679)			_hx_tmp1->set_x(this->get_paddingLeft());
HXLINE(1680)			 ::openfl::display::DisplayObject _hx_tmp2 = this->_currentLeftView;
HXDLIN(1680)			Float _hx_tmp3 = this->get_paddingTop();
HXDLIN(1680)			Float _hx_tmp4 = this->get_paddingTop();
HXDLIN(1680)			_hx_tmp2->set_y(::Math_obj::max(_hx_tmp3,(_hx_tmp4 + ((maxHeight2 - this->_currentLeftView->get_height()) / ((Float)2.0)))));
HXLINE(1681)			Float leftViewOffset1 = this->_currentLeftView->get_width();
HXDLIN(1681)			leftViewOffset = (leftViewOffset1 + this->get_leftViewGap());
            		}
HXLINE(1683)		Float rightViewOffset = ((Float)0.0);
HXLINE(1684)		if (::hx::IsNotNull( this->_currentRightView )) {
HXLINE(1685)			if (::Std_obj::isOfType(this->_currentRightView,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE(1686)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentRightView,0x64d4b3cd));
            			}
HXLINE(1688)			 ::openfl::display::DisplayObject _hx_tmp5 = this->_currentRightView;
HXDLIN(1688)			Float _hx_tmp6 = this->actualWidth;
HXDLIN(1688)			Float _hx_tmp7 = (_hx_tmp6 - this->get_paddingRight());
HXDLIN(1688)			_hx_tmp5->set_x((_hx_tmp7 - this->_currentRightView->get_width()));
HXLINE(1689)			 ::openfl::display::DisplayObject _hx_tmp8 = this->_currentRightView;
HXDLIN(1689)			Float _hx_tmp9 = this->get_paddingTop();
HXDLIN(1689)			Float _hx_tmp10 = this->get_paddingTop();
HXDLIN(1689)			_hx_tmp8->set_y(::Math_obj::max(_hx_tmp9,(_hx_tmp10 + ((maxHeight2 - this->_currentRightView->get_height()) / ((Float)2.0)))));
HXLINE(1690)			Float rightViewOffset1 = this->_currentRightView->get_width();
HXDLIN(1690)			rightViewOffset = (rightViewOffset1 + this->get_rightViewGap());
            		}
HXLINE(1693)		Float textFieldWidth = this->actualWidth;
HXDLIN(1693)		Float textFieldWidth1 = (textFieldWidth - this->get_paddingLeft());
HXDLIN(1693)		Float textFieldWidth2 = (((textFieldWidth1 - this->get_paddingRight()) - leftViewOffset) - rightViewOffset);
HXLINE(1694)		this->textField->set_width(textFieldWidth2);
HXLINE(1696)		 ::openfl::text::TextField _hx_tmp11 = this->textField;
HXDLIN(1696)		_hx_tmp11->set_x((this->get_paddingLeft() + leftViewOffset));
HXLINE(1697)		{
HXLINE(1697)			 ::openfl::text::TextField textField = this->textField;
HXDLIN(1697)			switch((int)(this->get_verticalAlign()->_hx_getIndex())){
            				case (int)0: {
HXLINE(1697)					textField->set_y(this->get_paddingTop());
            				}
            				break;
            				case (int)2: {
HXLINE(1697)					Float _hx_tmp12 = this->actualHeight;
HXDLIN(1697)					textField->set_y(((_hx_tmp12 - this->get_paddingBottom()) - textFieldHeight));
            				}
            				break;
            				case (int)3: {
HXLINE(1697)					textField->set_y(this->get_paddingTop());
            				}
            				break;
            				default:{
HXLINE(1697)					textField->set_y((this->get_paddingTop() + ((maxHeight2 - textFieldHeight) / ((Float)2.0))));
            				}
            			}
            		}
HXLINE(1699)		if (::hx::IsNotNull( this->promptTextField )) {
HXLINE(1700)			this->promptTextField->set_width(textFieldWidth2);
HXLINE(1702)			Float textFieldHeight1 = this->_promptTextMeasuredHeight;
HXLINE(1703)			bool _hx_tmp13;
HXDLIN(1703)			if (!((textFieldHeight1 > maxHeight2))) {
HXLINE(1703)				_hx_tmp13 = ::hx::IsPointerEq( this->get_verticalAlign(),::feathers::layout::VerticalAlign_obj::JUSTIFY_dyn() );
            			}
            			else {
HXLINE(1703)				_hx_tmp13 = true;
            			}
HXDLIN(1703)			if (_hx_tmp13) {
HXLINE(1704)				textFieldHeight1 = maxHeight2;
            			}
HXLINE(1706)			this->promptTextField->set_height(textFieldHeight1);
HXLINE(1708)			 ::openfl::text::TextField _hx_tmp14 = this->promptTextField;
HXDLIN(1708)			_hx_tmp14->set_x((this->get_paddingLeft() + leftViewOffset));
HXLINE(1709)			{
HXLINE(1709)				 ::openfl::text::TextField textField1 = this->promptTextField;
HXDLIN(1709)				switch((int)(this->get_verticalAlign()->_hx_getIndex())){
            					case (int)0: {
HXLINE(1709)						textField1->set_y(this->get_paddingTop());
            					}
            					break;
            					case (int)2: {
HXLINE(1709)						Float _hx_tmp15 = this->actualHeight;
HXDLIN(1709)						textField1->set_y(((_hx_tmp15 - this->get_paddingBottom()) - textFieldHeight1));
            					}
            					break;
            					case (int)3: {
HXLINE(1709)						textField1->set_y(this->get_paddingTop());
            					}
            					break;
            					default:{
HXLINE(1709)						textField1->set_y((this->get_paddingTop() + ((maxHeight2 - textFieldHeight1) / ((Float)2.0))));
            					}
            				}
            			}
            		}
HXLINE(1711)		this->_ignoreLeftViewResize = oldIgnoreLeftViewResize;
HXLINE(1712)		this->_ignoreRightViewResize = oldIgnoreRightViewResize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,layoutContent,(void))

void TextInput_obj::alignTextField( ::openfl::text::TextField textField,Float textFieldHeight,Float maxHeight){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1718_alignTextField)
HXDLIN(1718)		switch((int)(this->get_verticalAlign()->_hx_getIndex())){
            			case (int)0: {
HXLINE(1720)				textField->set_y(this->get_paddingTop());
            			}
            			break;
            			case (int)2: {
HXLINE(1722)				Float _hx_tmp = this->actualHeight;
HXDLIN(1722)				textField->set_y(((_hx_tmp - this->get_paddingBottom()) - textFieldHeight));
            			}
            			break;
            			case (int)3: {
HXLINE(1724)				textField->set_y(this->get_paddingTop());
            			}
            			break;
            			default:{
HXLINE(1726)				textField->set_y((this->get_paddingTop() + ((maxHeight - textFieldHeight) / ((Float)2.0))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextInput_obj,alignTextField,(void))

void TextInput_obj::layoutBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1730_layoutBackgroundSkin)
HXLINE(1731)		if (::hx::IsNull( this->_currentBackgroundSkin )) {
HXLINE(1732)			return;
            		}
HXLINE(1734)		this->_currentBackgroundSkin->set_x(((Float)0.0));
HXLINE(1735)		this->_currentBackgroundSkin->set_y(((Float)0.0));
HXLINE(1740)		Float _hx_tmp = this->_currentBackgroundSkin->get_width();
HXDLIN(1740)		if ((_hx_tmp != this->actualWidth)) {
HXLINE(1741)			this->_currentBackgroundSkin->set_width(this->actualWidth);
            		}
HXLINE(1743)		Float _hx_tmp1 = this->_currentBackgroundSkin->get_height();
HXDLIN(1743)		if ((_hx_tmp1 != this->actualHeight)) {
HXLINE(1744)			this->_currentBackgroundSkin->set_height(this->actualHeight);
            		}
HXLINE(1746)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE(1747)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentBackgroundSkin,0x64d4b3cd));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,layoutBackgroundSkin,(void))

void TextInput_obj::refreshErrorString(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1751_refreshErrorString)
HXLINE(1752)		if (::hx::IsNull( this->errorStringCallout )) {
HXLINE(1753)			return;
            		}
HXLINE(1756)		this->errorStringCallout->set_text(this->_errorString);
HXLINE(1757)		bool _hx_tmp;
HXDLIN(1757)		if (::hx::IsPointerEq( this->_currentState,::feathers::controls::TextInputState_obj::FOCUSED_dyn() )) {
HXLINE(1757)			_hx_tmp = ::hx::IsNull( this->errorStringCallout->parent );
            		}
            		else {
HXLINE(1757)			_hx_tmp = false;
            		}
HXDLIN(1757)		if (_hx_tmp) {
HXLINE(1758)			::feathers::core::PopUpManager_obj::addPopUp(this->errorStringCallout,::hx::ObjectPtr<OBJ_>(this),false,false,null());
            		}
            		else {
HXLINE(1759)			bool _hx_tmp1;
HXDLIN(1759)			if (::hx::IsPointerNotEq( this->_currentState,::feathers::controls::TextInputState_obj::FOCUSED_dyn() )) {
HXLINE(1759)				_hx_tmp1 = ::hx::IsNotNull( this->errorStringCallout->parent );
            			}
            			else {
HXLINE(1759)				_hx_tmp1 = false;
            			}
HXDLIN(1759)			if (_hx_tmp1) {
HXLINE(1760)				this->errorStringCallout->parent->removeChild(this->errorStringCallout);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshErrorString,(void))

void TextInput_obj::createErrorCallout(){
            	HX_GC_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1764_createErrorCallout)
HXLINE(1765)		this->destroyErrorCallout();
HXLINE(1766)		bool _hx_tmp;
HXDLIN(1766)		if (::hx::IsNotNull( this->_errorString )) {
HXLINE(1766)			_hx_tmp = (this->_errorString.length == 0);
            		}
            		else {
HXLINE(1766)			_hx_tmp = true;
            		}
HXDLIN(1766)		if (_hx_tmp) {
HXLINE(1767)			return;
            		}
HXLINE(1769)		this->errorStringCallout =  ::feathers::controls::TextCallout_obj::__alloc( HX_CTX ,null());
HXLINE(1770)		if (::hx::IsNull( this->errorStringCallout->get_variant() )) {
HXLINE(1771)			 ::feathers::controls::TextCallout _hx_tmp1 = this->errorStringCallout;
HXDLIN(1771)			::String _hx_tmp2;
HXDLIN(1771)			if (::hx::IsNotNull( this->get_customErrorCalloutVariant() )) {
HXLINE(1771)				_hx_tmp2 = this->get_customErrorCalloutVariant();
            			}
            			else {
HXLINE(1771)				_hx_tmp2 = ::feathers::controls::TextInput_obj::CHILD_VARIANT_ERROR_CALLOUT;
            			}
HXDLIN(1771)			_hx_tmp1->set_variant(_hx_tmp2);
            		}
HXLINE(1773)		this->errorStringCallout->set_origin(::hx::ObjectPtr<OBJ_>(this));
HXLINE(1774)		this->errorStringCallout->closeOnPointerOutside = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,createErrorCallout,(void))

void TextInput_obj::destroyErrorCallout(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1777_destroyErrorCallout)
HXLINE(1778)		if (::hx::IsNull( this->errorStringCallout )) {
HXLINE(1779)			return;
            		}
HXLINE(1781)		if (::hx::IsNotNull( this->errorStringCallout->parent )) {
HXLINE(1782)			this->errorStringCallout->parent->removeChild(this->errorStringCallout);
            		}
HXLINE(1784)		this->errorStringCallout = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,destroyErrorCallout,(void))

void TextInput_obj::changeState( ::feathers::controls::TextInputState state){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1787_changeState)
HXLINE(1788)		if (!(this->_enabled)) {
HXLINE(1789)			state = ::feathers::controls::TextInputState_obj::DISABLED_dyn();
            		}
HXLINE(1791)		if (::hx::IsPointerEq( this->_currentState,state )) {
HXLINE(1792)			return;
            		}
HXLINE(1794)		this->_currentState = state;
HXLINE(1795)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STATE_dyn());
HXLINE(1796)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("stateChange",61,de,fb,31),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,changeState,(void))

void TextInput_obj::refreshState(){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1800_refreshState)
HXDLIN(1800)		if (this->_enabled) {
HXLINE(1805)			bool _hx_tmp;
HXDLIN(1805)			if (::hx::IsNotNull( this->stage )) {
HXLINE(1805)				 ::openfl::display::InteractiveObject _hx_tmp1 = this->stage->get_focus();
HXDLIN(1805)				_hx_tmp = ::hx::IsInstanceEq( _hx_tmp1,this->textField );
            			}
            			else {
HXLINE(1805)				_hx_tmp = false;
            			}
HXDLIN(1805)			if (_hx_tmp) {
HXLINE(1806)				this->changeState(::feathers::controls::TextInputState_obj::FOCUSED_dyn());
            			}
            			else {
HXLINE(1807)				if (::hx::IsNotNull( this->_errorString )) {
HXLINE(1808)					this->changeState(::feathers::controls::TextInputState_obj::ERROR_dyn());
            				}
            				else {
HXLINE(1810)					this->changeState(::feathers::controls::TextInputState_obj::ENABLED_dyn());
            				}
            			}
            		}
            		else {
HXLINE(1813)			this->changeState(::feathers::controls::TextInputState_obj::DISABLED_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,refreshState,(void))

void TextInput_obj::textField_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1817_textField_changeHandler)
HXLINE(1820)		event->stopPropagation();
HXLINE(1822)		::String oldText = this->_text;
HXLINE(1823)		::String newText = this->textField->get_text();
HXLINE(1826)		this->_text = newText;
HXLINE(1829)		bool hasMeasureText = ::hx::IsNotNull( this->_measureText );
HXLINE(1830)		::String measureText;
HXDLIN(1830)		if (hasMeasureText) {
HXLINE(1830)			measureText = this->_measureText;
            		}
            		else {
HXLINE(1830)			measureText = this->_text;
            		}
HXLINE(1831)		bool _hx_tmp;
HXDLIN(1831)		if (::hx::IsNotNull( measureText )) {
HXLINE(1831)			_hx_tmp = (measureText.length == 0);
            		}
            		else {
HXLINE(1831)			_hx_tmp = true;
            		}
HXDLIN(1831)		if (_hx_tmp) {
HXLINE(1832)			hasMeasureText = true;
HXLINE(1833)			measureText = HX_W(u"\u200b",ed6d,00ab);
            		}
HXLINE(1837)		bool hasText;
HXDLIN(1837)		if (::hx::IsNotNull( this->_text )) {
HXLINE(1837)			hasText = (this->_text.length > 0);
            		}
            		else {
HXLINE(1837)			hasText = false;
            		}
HXLINE(1838)		bool hasOldText;
HXDLIN(1838)		if (::hx::IsNotNull( oldText )) {
HXLINE(1838)			hasOldText = (oldText.length > 0);
            		}
            		else {
HXLINE(1838)			hasOldText = false;
            		}
HXLINE(1839)		bool hasPrompt;
HXDLIN(1839)		if (::hx::IsNotNull( this->_prompt )) {
HXLINE(1839)			hasPrompt = (this->_prompt.length > 0);
            		}
            		else {
HXLINE(1839)			hasPrompt = false;
            		}
HXLINE(1840)		bool _hx_tmp1;
HXDLIN(1840)		if (!(this->get_autoSizeWidth())) {
HXLINE(1840)			if (hasPrompt) {
HXLINE(1840)				bool _hx_tmp2;
HXDLIN(1840)				if (!(hasText)) {
HXLINE(1840)					_hx_tmp2 = hasOldText;
            				}
            				else {
HXLINE(1840)					_hx_tmp2 = false;
            				}
HXDLIN(1840)				if (!(_hx_tmp2)) {
HXLINE(1840)					if (hasText) {
HXLINE(1840)						_hx_tmp1 = !(hasOldText);
            					}
            					else {
HXLINE(1840)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE(1840)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE(1840)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(1840)			_hx_tmp1 = true;
            		}
HXDLIN(1840)		if (_hx_tmp1) {
HXLINE(1842)			this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
            		}
            		else {
HXLINE(1845)			this->_previousMeasureText = measureText;
HXLINE(1846)			this->_previousText = this->_text;
            		}
HXLINE(1849)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,textField_changeHandler,(void))

void TextInput_obj::textField_scrollHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1852_textField_scrollHandler)
HXLINE(1854)		this->_scrollX = ( (Float)(this->textField->get_scrollH()) );
HXLINE(1856)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scroll",0d,d8,64,47),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,textField_scrollHandler,(void))

void TextInput_obj::textInput_focusInHandler( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1859_textInput_focusInHandler)
HXLINE(1860)		bool _hx_tmp;
HXDLIN(1860)		if (::hx::IsNotNull( this->stage )) {
HXLINE(1860)			 ::openfl::display::InteractiveObject _hx_tmp1 = this->stage->get_focus();
HXDLIN(1860)			_hx_tmp = ::hx::IsInstanceNotEq( _hx_tmp1,this->textField );
            		}
            		else {
HXLINE(1860)			_hx_tmp = false;
            		}
HXDLIN(1860)		if (_hx_tmp) {
HXLINE(1861)			event->stopImmediatePropagation();
HXLINE(1862)			this->stage->set_focus(this->textField);
            		}
HXLINE(1864)		this->refreshState();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,textInput_focusInHandler,(void))

void TextInput_obj::textInput_focusOutHandler( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1868_textInput_focusOutHandler)
HXDLIN(1868)		this->refreshState();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,textInput_focusOutHandler,(void))

void TextInput_obj::textInput_textFormat_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1872_textInput_textFormat_changeHandler)
HXDLIN(1872)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,textInput_textFormat_changeHandler,(void))

void TextInput_obj::textInput_promptTextFormat_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1876_textInput_promptTextFormat_changeHandler)
HXDLIN(1876)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,textInput_promptTextFormat_changeHandler,(void))

void TextInput_obj::textInput_leftView_resizeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1879_textInput_leftView_resizeHandler)
HXLINE(1880)		if (this->_ignoreLeftViewResize) {
HXLINE(1881)			return;
            		}
HXLINE(1883)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,textInput_leftView_resizeHandler,(void))

void TextInput_obj::textInput_rightView_resizeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_1886_textInput_rightView_resizeHandler)
HXLINE(1887)		if (this->_ignoreRightViewResize) {
HXLINE(1888)			return;
            		}
HXLINE(1890)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,textInput_rightView_resizeHandler,(void))

 ::openfl::display::DisplayObject TextInput_obj::get_backgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_backgroundSkin)
HXDLIN(  85)		return this->_hx___backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_backgroundSkin,return )

 ::openfl::display::DisplayObject TextInput_obj::set_backgroundSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_backgroundSkin)
HXLINE( 106)		if (!(this->setStyle(HX_("backgroundSkin",8b,65,6f,20),null()))) {
HXLINE( 107)			return this->_hx___backgroundSkin;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___backgroundSkin,value )) {
HXLINE( 110)			return this->_hx___backgroundSkin;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_backgroundSkin_dyn();
HXLINE( 116)		this->_hx___backgroundSkin = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_backgroundSkin,return )

 ::openfl::display::DisplayObject TextInput_obj::clearStyle_backgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_backgroundSkin)
HXLINE( 132)		this->set_backgroundSkin(null());
HXLINE( 133)		return this->get_backgroundSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_backgroundSkin,return )

bool TextInput_obj::get_showPromptWhenEmptyAndFocused(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_showPromptWhenEmptyAndFocused)
HXDLIN(  85)		return this->_hx___showPromptWhenEmptyAndFocused;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_showPromptWhenEmptyAndFocused,return )

bool TextInput_obj::set_showPromptWhenEmptyAndFocused(bool value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_showPromptWhenEmptyAndFocused)
HXLINE( 106)		if (!(this->setStyle(HX_("showPromptWhenEmptyAndFocused",72,ad,6a,b1),null()))) {
HXLINE( 107)			return this->_hx___showPromptWhenEmptyAndFocused;
            		}
HXLINE( 109)		if ((this->_hx___showPromptWhenEmptyAndFocused == value)) {
HXLINE( 110)			return this->_hx___showPromptWhenEmptyAndFocused;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_showPromptWhenEmptyAndFocused_dyn();
HXLINE( 116)		this->_hx___showPromptWhenEmptyAndFocused = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___showPromptWhenEmptyAndFocused;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_showPromptWhenEmptyAndFocused,return )

bool TextInput_obj::clearStyle_showPromptWhenEmptyAndFocused(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_showPromptWhenEmptyAndFocused)
HXLINE( 132)		this->set_showPromptWhenEmptyAndFocused(true);
HXLINE( 133)		return this->get_showPromptWhenEmptyAndFocused();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_showPromptWhenEmptyAndFocused,return )

 ::openfl::display::DisplayObject TextInput_obj::get_leftView(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_leftView)
HXDLIN(  85)		return this->_hx___leftView;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_leftView,return )

 ::openfl::display::DisplayObject TextInput_obj::set_leftView( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_leftView)
HXLINE( 106)		if (!(this->setStyle(HX_("leftView",0c,76,4a,55),null()))) {
HXLINE( 107)			return this->_hx___leftView;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___leftView,value )) {
HXLINE( 110)			return this->_hx___leftView;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_leftView_dyn();
HXLINE( 116)		this->_hx___leftView = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___leftView;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_leftView,return )

 ::openfl::display::DisplayObject TextInput_obj::clearStyle_leftView(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_leftView)
HXLINE( 132)		this->set_leftView(null());
HXLINE( 133)		return this->get_leftView();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_leftView,return )

Float TextInput_obj::get_leftViewGap(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_leftViewGap)
HXDLIN(  85)		return this->_hx___leftViewGap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_leftViewGap,return )

Float TextInput_obj::set_leftViewGap(Float value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_leftViewGap)
HXLINE( 106)		if (!(this->setStyle(HX_("leftViewGap",6a,0e,48,9c),null()))) {
HXLINE( 107)			return this->_hx___leftViewGap;
            		}
HXLINE( 109)		if ((this->_hx___leftViewGap == value)) {
HXLINE( 110)			return this->_hx___leftViewGap;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_leftViewGap_dyn();
HXLINE( 116)		this->_hx___leftViewGap = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___leftViewGap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_leftViewGap,return )

Float TextInput_obj::clearStyle_leftViewGap(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_leftViewGap)
HXLINE( 132)		this->set_leftViewGap(((Float)0.0));
HXLINE( 133)		return this->get_leftViewGap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_leftViewGap,return )

 ::openfl::display::DisplayObject TextInput_obj::get_rightView(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_rightView)
HXDLIN(  85)		return this->_hx___rightView;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_rightView,return )

 ::openfl::display::DisplayObject TextInput_obj::set_rightView( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_rightView)
HXLINE( 106)		if (!(this->setStyle(HX_("rightView",61,88,15,b9),null()))) {
HXLINE( 107)			return this->_hx___rightView;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___rightView,value )) {
HXLINE( 110)			return this->_hx___rightView;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_rightView_dyn();
HXLINE( 116)		this->_hx___rightView = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___rightView;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_rightView,return )

 ::openfl::display::DisplayObject TextInput_obj::clearStyle_rightView(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_rightView)
HXLINE( 132)		this->set_rightView(null());
HXLINE( 133)		return this->get_rightView();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_rightView,return )

Float TextInput_obj::get_rightViewGap(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_rightViewGap)
HXDLIN(  85)		return this->_hx___rightViewGap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_rightViewGap,return )

Float TextInput_obj::set_rightViewGap(Float value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_rightViewGap)
HXLINE( 106)		if (!(this->setStyle(HX_("rightViewGap",35,5f,63,87),null()))) {
HXLINE( 107)			return this->_hx___rightViewGap;
            		}
HXLINE( 109)		if ((this->_hx___rightViewGap == value)) {
HXLINE( 110)			return this->_hx___rightViewGap;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_rightViewGap_dyn();
HXLINE( 116)		this->_hx___rightViewGap = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___rightViewGap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_rightViewGap,return )

Float TextInput_obj::clearStyle_rightViewGap(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_rightViewGap)
HXLINE( 132)		this->set_rightViewGap(((Float)0.0));
HXLINE( 133)		return this->get_rightViewGap();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_rightViewGap,return )

 ::feathers::text::TextFormat TextInput_obj::get_textFormat(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_textFormat)
HXDLIN(  85)		return this->_hx___textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_textFormat,return )

 ::feathers::text::TextFormat TextInput_obj::set_textFormat( ::feathers::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_textFormat)
HXLINE( 106)		if (!(this->setStyle(HX_("textFormat",c4,0f,7f,34),null()))) {
HXLINE( 107)			return this->_hx___textFormat;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___textFormat,value )) {
HXLINE( 110)			return this->_hx___textFormat;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_textFormat_dyn();
HXLINE( 116)		this->_hx___textFormat = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_textFormat,return )

 ::feathers::text::TextFormat TextInput_obj::clearStyle_textFormat(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_textFormat)
HXLINE( 132)		this->set_textFormat(null());
HXLINE( 133)		return this->get_textFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_textFormat,return )

 ::feathers::text::TextFormat TextInput_obj::get_disabledTextFormat(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_disabledTextFormat)
HXDLIN(  85)		return this->_hx___disabledTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_disabledTextFormat,return )

 ::feathers::text::TextFormat TextInput_obj::set_disabledTextFormat( ::feathers::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_disabledTextFormat)
HXLINE( 106)		if (!(this->setStyle(HX_("disabledTextFormat",60,88,2b,39),null()))) {
HXLINE( 107)			return this->_hx___disabledTextFormat;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___disabledTextFormat,value )) {
HXLINE( 110)			return this->_hx___disabledTextFormat;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_disabledTextFormat_dyn();
HXLINE( 116)		this->_hx___disabledTextFormat = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___disabledTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_disabledTextFormat,return )

 ::feathers::text::TextFormat TextInput_obj::clearStyle_disabledTextFormat(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_disabledTextFormat)
HXLINE( 132)		this->set_disabledTextFormat(null());
HXLINE( 133)		return this->get_disabledTextFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_disabledTextFormat,return )

 ::feathers::text::TextFormat TextInput_obj::get_promptTextFormat(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_promptTextFormat)
HXDLIN(  85)		return this->_hx___promptTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_promptTextFormat,return )

 ::feathers::text::TextFormat TextInput_obj::set_promptTextFormat( ::feathers::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_promptTextFormat)
HXLINE( 106)		if (!(this->setStyle(HX_("promptTextFormat",88,5a,f4,ec),null()))) {
HXLINE( 107)			return this->_hx___promptTextFormat;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___promptTextFormat,value )) {
HXLINE( 110)			return this->_hx___promptTextFormat;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_promptTextFormat_dyn();
HXLINE( 116)		this->_hx___promptTextFormat = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___promptTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_promptTextFormat,return )

 ::feathers::text::TextFormat TextInput_obj::clearStyle_promptTextFormat(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_promptTextFormat)
HXLINE( 132)		this->set_promptTextFormat(null());
HXLINE( 133)		return this->get_promptTextFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_promptTextFormat,return )

bool TextInput_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_embedFonts)
HXDLIN(  85)		return this->_hx___embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_embedFonts,return )

bool TextInput_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_embedFonts)
HXLINE( 106)		if (!(this->setStyle(HX_("embedFonts",2b,c7,e1,8e),null()))) {
HXLINE( 107)			return this->_hx___embedFonts;
            		}
HXLINE( 109)		if ((this->_hx___embedFonts == value)) {
HXLINE( 110)			return this->_hx___embedFonts;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_embedFonts_dyn();
HXLINE( 116)		this->_hx___embedFonts = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_embedFonts,return )

bool TextInput_obj::clearStyle_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_embedFonts)
HXLINE( 132)		this->set_embedFonts(false);
HXLINE( 133)		return this->get_embedFonts();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_embedFonts,return )

Float TextInput_obj::get_paddingTop(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_paddingTop)
HXDLIN(  85)		return this->_hx___paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_paddingTop,return )

Float TextInput_obj::set_paddingTop(Float value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_paddingTop)
HXLINE( 106)		if (!(this->setStyle(HX_("paddingTop",44,fd,05,3a),null()))) {
HXLINE( 107)			return this->_hx___paddingTop;
            		}
HXLINE( 109)		if ((this->_hx___paddingTop == value)) {
HXLINE( 110)			return this->_hx___paddingTop;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_paddingTop_dyn();
HXLINE( 116)		this->_hx___paddingTop = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_paddingTop,return )

Float TextInput_obj::clearStyle_paddingTop(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_paddingTop)
HXLINE( 132)		this->set_paddingTop(((Float)0.0));
HXLINE( 133)		return this->get_paddingTop();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_paddingTop,return )

Float TextInput_obj::get_paddingRight(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_paddingRight)
HXDLIN(  85)		return this->_hx___paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_paddingRight,return )

Float TextInput_obj::set_paddingRight(Float value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_paddingRight)
HXLINE( 106)		if (!(this->setStyle(HX_("paddingRight",4b,ec,a7,1a),null()))) {
HXLINE( 107)			return this->_hx___paddingRight;
            		}
HXLINE( 109)		if ((this->_hx___paddingRight == value)) {
HXLINE( 110)			return this->_hx___paddingRight;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_paddingRight_dyn();
HXLINE( 116)		this->_hx___paddingRight = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_paddingRight,return )

Float TextInput_obj::clearStyle_paddingRight(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_paddingRight)
HXLINE( 132)		this->set_paddingRight(((Float)0.0));
HXLINE( 133)		return this->get_paddingRight();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_paddingRight,return )

Float TextInput_obj::get_paddingBottom(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_paddingBottom)
HXDLIN(  85)		return this->_hx___paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_paddingBottom,return )

Float TextInput_obj::set_paddingBottom(Float value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_paddingBottom)
HXLINE( 106)		if (!(this->setStyle(HX_("paddingBottom",9c,67,99,4f),null()))) {
HXLINE( 107)			return this->_hx___paddingBottom;
            		}
HXLINE( 109)		if ((this->_hx___paddingBottom == value)) {
HXLINE( 110)			return this->_hx___paddingBottom;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_paddingBottom_dyn();
HXLINE( 116)		this->_hx___paddingBottom = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_paddingBottom,return )

Float TextInput_obj::clearStyle_paddingBottom(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_paddingBottom)
HXLINE( 132)		this->set_paddingBottom(((Float)0.0));
HXLINE( 133)		return this->get_paddingBottom();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_paddingBottom,return )

Float TextInput_obj::get_paddingLeft(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_paddingLeft)
HXDLIN(  85)		return this->_hx___paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_paddingLeft,return )

Float TextInput_obj::set_paddingLeft(Float value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_paddingLeft)
HXLINE( 106)		if (!(this->setStyle(HX_("paddingLeft",78,4a,e6,85),null()))) {
HXLINE( 107)			return this->_hx___paddingLeft;
            		}
HXLINE( 109)		if ((this->_hx___paddingLeft == value)) {
HXLINE( 110)			return this->_hx___paddingLeft;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_paddingLeft_dyn();
HXLINE( 116)		this->_hx___paddingLeft = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_paddingLeft,return )

Float TextInput_obj::clearStyle_paddingLeft(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_paddingLeft)
HXLINE( 132)		this->set_paddingLeft(((Float)0.0));
HXLINE( 133)		return this->get_paddingLeft();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_paddingLeft,return )

 ::feathers::layout::VerticalAlign TextInput_obj::get_verticalAlign(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_verticalAlign)
HXDLIN(  85)		return this->_hx___verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_verticalAlign,return )

 ::feathers::layout::VerticalAlign TextInput_obj::set_verticalAlign( ::feathers::layout::VerticalAlign value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_verticalAlign)
HXLINE( 106)		if (!(this->setStyle(HX_("verticalAlign",6f,1e,7c,e4),null()))) {
HXLINE( 107)			return this->_hx___verticalAlign;
            		}
HXLINE( 109)		if (::hx::IsPointerEq( this->_hx___verticalAlign,value )) {
HXLINE( 110)			return this->_hx___verticalAlign;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_verticalAlign_dyn();
HXLINE( 116)		this->_hx___verticalAlign = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_verticalAlign,return )

 ::feathers::layout::VerticalAlign TextInput_obj::clearStyle_verticalAlign(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_verticalAlign)
HXLINE( 132)		this->set_verticalAlign(::feathers::layout::VerticalAlign_obj::MIDDLE_dyn());
HXLINE( 133)		return this->get_verticalAlign();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_verticalAlign,return )

bool TextInput_obj::get_autoSizeWidth(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_autoSizeWidth)
HXDLIN(  85)		return this->_hx___autoSizeWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_autoSizeWidth,return )

bool TextInput_obj::set_autoSizeWidth(bool value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_autoSizeWidth)
HXLINE( 106)		if (!(this->setStyle(HX_("autoSizeWidth",16,44,4b,aa),null()))) {
HXLINE( 107)			return this->_hx___autoSizeWidth;
            		}
HXLINE( 109)		if ((this->_hx___autoSizeWidth == value)) {
HXLINE( 110)			return this->_hx___autoSizeWidth;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_autoSizeWidth_dyn();
HXLINE( 116)		this->_hx___autoSizeWidth = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___autoSizeWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_autoSizeWidth,return )

bool TextInput_obj::clearStyle_autoSizeWidth(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_autoSizeWidth)
HXLINE( 132)		this->set_autoSizeWidth(false);
HXLINE( 133)		return this->get_autoSizeWidth();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_autoSizeWidth,return )

::String TextInput_obj::get_customErrorCalloutVariant(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_85_get_customErrorCalloutVariant)
HXDLIN(  85)		return this->_hx___customErrorCalloutVariant;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,get_customErrorCalloutVariant,return )

::String TextInput_obj::set_customErrorCalloutVariant(::String value){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_99_set_customErrorCalloutVariant)
HXLINE( 106)		if (!(this->setStyle(HX_("customErrorCalloutVariant",6c,f0,2e,4f),null()))) {
HXLINE( 107)			return this->_hx___customErrorCalloutVariant;
            		}
HXLINE( 109)		if ((this->_hx___customErrorCalloutVariant == value)) {
HXLINE( 110)			return this->_hx___customErrorCalloutVariant;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_customErrorCalloutVariant_dyn();
HXLINE( 116)		this->_hx___customErrorCalloutVariant = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___customErrorCalloutVariant;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextInput_obj,set_customErrorCalloutVariant,return )

::String TextInput_obj::clearStyle_customErrorCalloutVariant(){
            	HX_STACKFRAME(&_hx_pos_447a8d73bcab6462_131_clearStyle_customErrorCalloutVariant)
HXLINE( 132)		this->set_customErrorCalloutVariant(null());
HXLINE( 133)		return this->get_customErrorCalloutVariant();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextInput_obj,clearStyle_customErrorCalloutVariant,return )

::hx::Class TextInput_obj::get_styleContext(){
            	HX_STACKFRAME(&_hx_pos_5924568a4aeee60f_42_get_styleContext)
HXDLIN(  42)		return ::hx::ClassOf< ::feathers::controls::TextInput >();
            	}


 ::feathers::core::InvalidationFlag TextInput_obj::INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY;

::String TextInput_obj::VARIANT_SEARCH;

::String TextInput_obj::CHILD_VARIANT_ERROR_CALLOUT;


::hx::ObjectPtr< TextInput_obj > TextInput_obj::__new(::String __o_text,::String prompt, ::Dynamic changeListener) {
	::hx::ObjectPtr< TextInput_obj > __this = new TextInput_obj();
	__this->__construct(__o_text,prompt,changeListener);
	return __this;
}

::hx::ObjectPtr< TextInput_obj > TextInput_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_text,::String prompt, ::Dynamic changeListener) {
	TextInput_obj *__this = (TextInput_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextInput_obj), true, "feathers.controls.TextInput"));
	*(void **)__this = TextInput_obj::_hx_vtable;
	__this->__construct(__o_text,prompt,changeListener);
	return __this;
}

TextInput_obj::TextInput_obj()
{
}

void TextInput_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextInput);
	HX_MARK_MEMBER_NAME(_editable,"_editable");
	HX_MARK_MEMBER_NAME(_selectable,"_selectable");
	HX_MARK_MEMBER_NAME(_currentState,"_currentState");
	HX_MARK_MEMBER_NAME(_backgroundSkinMeasurements,"_backgroundSkinMeasurements");
	HX_MARK_MEMBER_NAME(_currentBackgroundSkin,"_currentBackgroundSkin");
	HX_MARK_MEMBER_NAME(_currentLeftView,"_currentLeftView");
	HX_MARK_MEMBER_NAME(_leftViewMeasurements,"_leftViewMeasurements");
	HX_MARK_MEMBER_NAME(_ignoreLeftViewResize,"_ignoreLeftViewResize");
	HX_MARK_MEMBER_NAME(_currentRightView,"_currentRightView");
	HX_MARK_MEMBER_NAME(_rightViewMeasurements,"_rightViewMeasurements");
	HX_MARK_MEMBER_NAME(_ignoreRightViewResize,"_ignoreRightViewResize");
	HX_MARK_MEMBER_NAME(_stateToSkin,"_stateToSkin");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(promptTextField,"promptTextField");
	HX_MARK_MEMBER_NAME(errorStringCallout,"errorStringCallout");
	HX_MARK_MEMBER_NAME(_previousText,"_previousText");
	HX_MARK_MEMBER_NAME(_previousMeasureText,"_previousMeasureText");
	HX_MARK_MEMBER_NAME(_previousPrompt,"_previousPrompt");
	HX_MARK_MEMBER_NAME(_previousTextFormat,"_previousTextFormat");
	HX_MARK_MEMBER_NAME(_previousSimpleTextFormat,"_previousSimpleTextFormat");
	HX_MARK_MEMBER_NAME(_previousPromptTextFormat,"_previousPromptTextFormat");
	HX_MARK_MEMBER_NAME(_previousPromptSimpleTextFormat,"_previousPromptSimpleTextFormat");
	HX_MARK_MEMBER_NAME(_updatedTextStyles,"_updatedTextStyles");
	HX_MARK_MEMBER_NAME(_updatedPromptStyles,"_updatedPromptStyles");
	HX_MARK_MEMBER_NAME(_text,"_text");
	HX_MARK_MEMBER_NAME(_measureText,"_measureText");
	HX_MARK_MEMBER_NAME(_prompt,"_prompt");
	HX_MARK_MEMBER_NAME(_hx___restrict,"__restrict");
	HX_MARK_MEMBER_NAME(_displayAsPassword,"_displayAsPassword");
	HX_MARK_MEMBER_NAME(_errorString,"_errorString");
	HX_MARK_MEMBER_NAME(_stateToTextFormat,"_stateToTextFormat");
	HX_MARK_MEMBER_NAME(_scrollX,"_scrollX");
	HX_MARK_MEMBER_NAME(_pendingSelectionAnchorIndex,"_pendingSelectionAnchorIndex");
	HX_MARK_MEMBER_NAME(_pendingSelectionActiveIndex,"_pendingSelectionActiveIndex");
	HX_MARK_MEMBER_NAME(_maxChars,"_maxChars");
	HX_MARK_MEMBER_NAME(_previousCustomErrorCalloutVariant,"_previousCustomErrorCalloutVariant");
	HX_MARK_MEMBER_NAME(_textMeasuredWidth,"_textMeasuredWidth");
	HX_MARK_MEMBER_NAME(_textMeasuredHeight,"_textMeasuredHeight");
	HX_MARK_MEMBER_NAME(_promptTextMeasuredWidth,"_promptTextMeasuredWidth");
	HX_MARK_MEMBER_NAME(_promptTextMeasuredHeight,"_promptTextMeasuredHeight");
	HX_MARK_MEMBER_NAME(_hx___backgroundSkin,"__backgroundSkin");
	HX_MARK_MEMBER_NAME(_hx___showPromptWhenEmptyAndFocused,"__showPromptWhenEmptyAndFocused");
	HX_MARK_MEMBER_NAME(_hx___leftView,"__leftView");
	HX_MARK_MEMBER_NAME(_hx___leftViewGap,"__leftViewGap");
	HX_MARK_MEMBER_NAME(_hx___rightView,"__rightView");
	HX_MARK_MEMBER_NAME(_hx___rightViewGap,"__rightViewGap");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___disabledTextFormat,"__disabledTextFormat");
	HX_MARK_MEMBER_NAME(_hx___promptTextFormat,"__promptTextFormat");
	HX_MARK_MEMBER_NAME(_hx___embedFonts,"__embedFonts");
	HX_MARK_MEMBER_NAME(_hx___paddingTop,"__paddingTop");
	HX_MARK_MEMBER_NAME(_hx___paddingRight,"__paddingRight");
	HX_MARK_MEMBER_NAME(_hx___paddingBottom,"__paddingBottom");
	HX_MARK_MEMBER_NAME(_hx___paddingLeft,"__paddingLeft");
	HX_MARK_MEMBER_NAME(_hx___verticalAlign,"__verticalAlign");
	HX_MARK_MEMBER_NAME(_hx___autoSizeWidth,"__autoSizeWidth");
	HX_MARK_MEMBER_NAME(_hx___customErrorCalloutVariant,"__customErrorCalloutVariant");
	 ::feathers::core::FeathersControl_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextInput_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_editable,"_editable");
	HX_VISIT_MEMBER_NAME(_selectable,"_selectable");
	HX_VISIT_MEMBER_NAME(_currentState,"_currentState");
	HX_VISIT_MEMBER_NAME(_backgroundSkinMeasurements,"_backgroundSkinMeasurements");
	HX_VISIT_MEMBER_NAME(_currentBackgroundSkin,"_currentBackgroundSkin");
	HX_VISIT_MEMBER_NAME(_currentLeftView,"_currentLeftView");
	HX_VISIT_MEMBER_NAME(_leftViewMeasurements,"_leftViewMeasurements");
	HX_VISIT_MEMBER_NAME(_ignoreLeftViewResize,"_ignoreLeftViewResize");
	HX_VISIT_MEMBER_NAME(_currentRightView,"_currentRightView");
	HX_VISIT_MEMBER_NAME(_rightViewMeasurements,"_rightViewMeasurements");
	HX_VISIT_MEMBER_NAME(_ignoreRightViewResize,"_ignoreRightViewResize");
	HX_VISIT_MEMBER_NAME(_stateToSkin,"_stateToSkin");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(promptTextField,"promptTextField");
	HX_VISIT_MEMBER_NAME(errorStringCallout,"errorStringCallout");
	HX_VISIT_MEMBER_NAME(_previousText,"_previousText");
	HX_VISIT_MEMBER_NAME(_previousMeasureText,"_previousMeasureText");
	HX_VISIT_MEMBER_NAME(_previousPrompt,"_previousPrompt");
	HX_VISIT_MEMBER_NAME(_previousTextFormat,"_previousTextFormat");
	HX_VISIT_MEMBER_NAME(_previousSimpleTextFormat,"_previousSimpleTextFormat");
	HX_VISIT_MEMBER_NAME(_previousPromptTextFormat,"_previousPromptTextFormat");
	HX_VISIT_MEMBER_NAME(_previousPromptSimpleTextFormat,"_previousPromptSimpleTextFormat");
	HX_VISIT_MEMBER_NAME(_updatedTextStyles,"_updatedTextStyles");
	HX_VISIT_MEMBER_NAME(_updatedPromptStyles,"_updatedPromptStyles");
	HX_VISIT_MEMBER_NAME(_text,"_text");
	HX_VISIT_MEMBER_NAME(_measureText,"_measureText");
	HX_VISIT_MEMBER_NAME(_prompt,"_prompt");
	HX_VISIT_MEMBER_NAME(_hx___restrict,"__restrict");
	HX_VISIT_MEMBER_NAME(_displayAsPassword,"_displayAsPassword");
	HX_VISIT_MEMBER_NAME(_errorString,"_errorString");
	HX_VISIT_MEMBER_NAME(_stateToTextFormat,"_stateToTextFormat");
	HX_VISIT_MEMBER_NAME(_scrollX,"_scrollX");
	HX_VISIT_MEMBER_NAME(_pendingSelectionAnchorIndex,"_pendingSelectionAnchorIndex");
	HX_VISIT_MEMBER_NAME(_pendingSelectionActiveIndex,"_pendingSelectionActiveIndex");
	HX_VISIT_MEMBER_NAME(_maxChars,"_maxChars");
	HX_VISIT_MEMBER_NAME(_previousCustomErrorCalloutVariant,"_previousCustomErrorCalloutVariant");
	HX_VISIT_MEMBER_NAME(_textMeasuredWidth,"_textMeasuredWidth");
	HX_VISIT_MEMBER_NAME(_textMeasuredHeight,"_textMeasuredHeight");
	HX_VISIT_MEMBER_NAME(_promptTextMeasuredWidth,"_promptTextMeasuredWidth");
	HX_VISIT_MEMBER_NAME(_promptTextMeasuredHeight,"_promptTextMeasuredHeight");
	HX_VISIT_MEMBER_NAME(_hx___backgroundSkin,"__backgroundSkin");
	HX_VISIT_MEMBER_NAME(_hx___showPromptWhenEmptyAndFocused,"__showPromptWhenEmptyAndFocused");
	HX_VISIT_MEMBER_NAME(_hx___leftView,"__leftView");
	HX_VISIT_MEMBER_NAME(_hx___leftViewGap,"__leftViewGap");
	HX_VISIT_MEMBER_NAME(_hx___rightView,"__rightView");
	HX_VISIT_MEMBER_NAME(_hx___rightViewGap,"__rightViewGap");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___disabledTextFormat,"__disabledTextFormat");
	HX_VISIT_MEMBER_NAME(_hx___promptTextFormat,"__promptTextFormat");
	HX_VISIT_MEMBER_NAME(_hx___embedFonts,"__embedFonts");
	HX_VISIT_MEMBER_NAME(_hx___paddingTop,"__paddingTop");
	HX_VISIT_MEMBER_NAME(_hx___paddingRight,"__paddingRight");
	HX_VISIT_MEMBER_NAME(_hx___paddingBottom,"__paddingBottom");
	HX_VISIT_MEMBER_NAME(_hx___paddingLeft,"__paddingLeft");
	HX_VISIT_MEMBER_NAME(_hx___verticalAlign,"__verticalAlign");
	HX_VISIT_MEMBER_NAME(_hx___autoSizeWidth,"__autoSizeWidth");
	HX_VISIT_MEMBER_NAME(_hx___customErrorCalloutVariant,"__customErrorCalloutVariant");
	 ::feathers::core::FeathersControl_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TextInput_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_text() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { return ::hx::Val( _text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"prompt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_prompt() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_prompt") ) { return ::hx::Val( _prompt ); }
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollX() ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return ::hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"measure") ) { return ::hx::Val( measure_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"editable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_editable() ); }
		if (HX_FIELD_EQ(inName,"leftView") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_leftView() ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return ::hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"baseline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_baseline() ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_restrict() ); }
		if (HX_FIELD_EQ(inName,"_scrollX") ) { return ::hx::Val( _scrollX ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxChars() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_editable") ) { return ::hx::Val( _editable ); }
		if (HX_FIELD_EQ(inName,"rightView") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_rightView() ); }
		if (HX_FIELD_EQ(inName,"textField") ) { return ::hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"_maxChars") ) { return ::hx::Val( _maxChars ); }
		if (HX_FIELD_EQ(inName,"selectAll") ) { return ::hx::Val( selectAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"showFocus") ) { return ::hx::Val( showFocus_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectable() ); }
		if (HX_FIELD_EQ(inName,"get_prompt") ) { return ::hx::Val( get_prompt_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_prompt") ) { return ::hx::Val( set_prompt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__restrict") ) { return ::hx::Val( _hx___restrict ); }
		if (HX_FIELD_EQ(inName,"textFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textFormat() ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_embedFonts() ); }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingTop() ); }
		if (HX_FIELD_EQ(inName,"setPadding") ) { return ::hx::Val( setPadding_dyn() ); }
		if (HX_FIELD_EQ(inName,"initialize") ) { return ::hx::Val( initialize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__leftView") ) { return ::hx::Val( _hx___leftView ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_selectable") ) { return ::hx::Val( _selectable ); }
		if (HX_FIELD_EQ(inName,"set_enabled") ) { return ::hx::Val( set_enabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"leftViewGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_leftViewGap() ); }
		if (HX_FIELD_EQ(inName,"measureText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_measureText() ); }
		if (HX_FIELD_EQ(inName,"errorString") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_errorString() ); }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingLeft() ); }
		if (HX_FIELD_EQ(inName,"get_scrollX") ) { return ::hx::Val( get_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollX") ) { return ::hx::Val( set_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectRange") ) { return ::hx::Val( selectRange_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshText") ) { return ::hx::Val( refreshText_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeState") ) { return ::hx::Val( changeState_dyn() ); }
		if (HX_FIELD_EQ(inName,"__rightView") ) { return ::hx::Val( _hx___rightView ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_editable") ) { return ::hx::Val( get_editable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_editable") ) { return ::hx::Val( set_editable_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentState") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_currentState() ); }
		if (HX_FIELD_EQ(inName,"rightViewGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_rightViewGap() ); }
		if (HX_FIELD_EQ(inName,"_stateToSkin") ) { return ::hx::Val( _stateToSkin ); }
		if (HX_FIELD_EQ(inName,"_measureText") ) { return ::hx::Val( _measureText ); }
		if (HX_FIELD_EQ(inName,"get_baseline") ) { return ::hx::Val( get_baseline_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return ::hx::Val( get_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return ::hx::Val( set_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"_errorString") ) { return ::hx::Val( _errorString ); }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingRight() ); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return ::hx::Val( get_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return ::hx::Val( set_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshState") ) { return ::hx::Val( refreshState_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_leftView") ) { return ::hx::Val( get_leftView_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_leftView") ) { return ::hx::Val( set_leftView_dyn() ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return ::hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"__embedFonts") ) { return ::hx::Val( _hx___embedFonts ); }
		if (HX_FIELD_EQ(inName,"__paddingTop") ) { return ::hx::Val( _hx___paddingTop ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_currentState") ) { return ::hx::Val( _currentState ); }
		if (HX_FIELD_EQ(inName,"_previousText") ) { return ::hx::Val( _previousText ); }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingBottom() ); }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_verticalAlign() ); }
		if (HX_FIELD_EQ(inName,"autoSizeWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_autoSizeWidth() ); }
		if (HX_FIELD_EQ(inName,"refreshPrompt") ) { return ::hx::Val( refreshPrompt_dyn() ); }
		if (HX_FIELD_EQ(inName,"layoutContent") ) { return ::hx::Val( layoutContent_dyn() ); }
		if (HX_FIELD_EQ(inName,"__leftViewGap") ) { return ::hx::Val( _hx___leftViewGap ); }
		if (HX_FIELD_EQ(inName,"get_rightView") ) { return ::hx::Val( get_rightView_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rightView") ) { return ::hx::Val( set_rightView_dyn() ); }
		if (HX_FIELD_EQ(inName,"__paddingLeft") ) { return ::hx::Val( _hx___paddingLeft ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return ::hx::Val( get_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return ::hx::Val( set_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"backgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_backgroundSkin() ); }
		if (HX_FIELD_EQ(inName,"alignTextField") ) { return ::hx::Val( alignTextField_dyn() ); }
		if (HX_FIELD_EQ(inName,"__rightViewGap") ) { return ::hx::Val( _hx___rightViewGap ); }
		if (HX_FIELD_EQ(inName,"get_textFormat") ) { return ::hx::Val( get_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textFormat") ) { return ::hx::Val( set_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return ::hx::Val( get_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return ::hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_paddingTop") ) { return ::hx::Val( get_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingTop") ) { return ::hx::Val( set_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"__paddingRight") ) { return ::hx::Val( _hx___paddingRight ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"promptTextField") ) { return ::hx::Val( promptTextField ); }
		if (HX_FIELD_EQ(inName,"_previousPrompt") ) { return ::hx::Val( _previousPrompt ); }
		if (HX_FIELD_EQ(inName,"get_measureText") ) { return ::hx::Val( get_measureText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_measureText") ) { return ::hx::Val( set_measureText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_errorString") ) { return ::hx::Val( get_errorString_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_errorString") ) { return ::hx::Val( set_errorString_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSkinForState") ) { return ::hx::Val( getSkinForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSkinForState") ) { return ::hx::Val( setSkinForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshLeftView") ) { return ::hx::Val( refreshLeftView_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_leftViewGap") ) { return ::hx::Val( get_leftViewGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_leftViewGap") ) { return ::hx::Val( set_leftViewGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"__paddingBottom") ) { return ::hx::Val( _hx___paddingBottom ); }
		if (HX_FIELD_EQ(inName,"get_paddingLeft") ) { return ::hx::Val( get_paddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingLeft") ) { return ::hx::Val( set_paddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"__verticalAlign") ) { return ::hx::Val( _hx___verticalAlign ); }
		if (HX_FIELD_EQ(inName,"__autoSizeWidth") ) { return ::hx::Val( _hx___autoSizeWidth ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"stageFocusTarget") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_stageFocusTarget() ); }
		if (HX_FIELD_EQ(inName,"get_currentState") ) { return ::hx::Val( get_currentState_dyn() ); }
		if (HX_FIELD_EQ(inName,"_currentLeftView") ) { return ::hx::Val( _currentLeftView ); }
		if (HX_FIELD_EQ(inName,"promptTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_promptTextFormat() ); }
		if (HX_FIELD_EQ(inName,"refreshRightView") ) { return ::hx::Val( refreshRightView_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshSelection") ) { return ::hx::Val( refreshSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"__backgroundSkin") ) { return ::hx::Val( _hx___backgroundSkin ); }
		if (HX_FIELD_EQ(inName,"get_rightViewGap") ) { return ::hx::Val( get_rightViewGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rightViewGap") ) { return ::hx::Val( set_rightViewGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_paddingRight") ) { return ::hx::Val( get_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingRight") ) { return ::hx::Val( set_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_styleContext") ) { return ::hx::Val( get_styleContext_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_currentRightView") ) { return ::hx::Val( _currentRightView ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_displayAsPassword() ); }
		if (HX_FIELD_EQ(inName,"refreshTextStyles") ) { return ::hx::Val( refreshTextStyles_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshPromptText") ) { return ::hx::Val( refreshPromptText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_paddingBottom") ) { return ::hx::Val( get_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingBottom") ) { return ::hx::Val( set_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_verticalAlign") ) { return ::hx::Val( get_verticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_verticalAlign") ) { return ::hx::Val( set_verticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoSizeWidth") ) { return ::hx::Val( get_autoSizeWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSizeWidth") ) { return ::hx::Val( set_autoSizeWidth_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"errorStringCallout") ) { return ::hx::Val( errorStringCallout ); }
		if (HX_FIELD_EQ(inName,"_updatedTextStyles") ) { return ::hx::Val( _updatedTextStyles ); }
		if (HX_FIELD_EQ(inName,"_displayAsPassword") ) { return ::hx::Val( _displayAsPassword ); }
		if (HX_FIELD_EQ(inName,"disabledTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_disabledTextFormat() ); }
		if (HX_FIELD_EQ(inName,"_stateToTextFormat") ) { return ::hx::Val( _stateToTextFormat ); }
		if (HX_FIELD_EQ(inName,"_textMeasuredWidth") ) { return ::hx::Val( _textMeasuredWidth ); }
		if (HX_FIELD_EQ(inName,"getCurrentLeftView") ) { return ::hx::Val( getCurrentLeftView_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshErrorString") ) { return ::hx::Val( refreshErrorString_dyn() ); }
		if (HX_FIELD_EQ(inName,"createErrorCallout") ) { return ::hx::Val( createErrorCallout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_backgroundSkin") ) { return ::hx::Val( get_backgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundSkin") ) { return ::hx::Val( set_backgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"__promptTextFormat") ) { return ::hx::Val( _hx___promptTextFormat ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_previousTextFormat") ) { return ::hx::Val( _previousTextFormat ); }
		if (HX_FIELD_EQ(inName,"_textMeasuredHeight") ) { return ::hx::Val( _textMeasuredHeight ); }
		if (HX_FIELD_EQ(inName,"getCurrentRightView") ) { return ::hx::Val( getCurrentRightView_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshPromptStyles") ) { return ::hx::Val( refreshPromptStyles_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroyErrorCallout") ) { return ::hx::Val( destroyErrorCallout_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_leftView") ) { return ::hx::Val( clearStyle_leftView_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_stageFocusTarget") ) { return ::hx::Val( get_stageFocusTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"_previousMeasureText") ) { return ::hx::Val( _previousMeasureText ); }
		if (HX_FIELD_EQ(inName,"_updatedPromptStyles") ) { return ::hx::Val( _updatedPromptStyles ); }
		if (HX_FIELD_EQ(inName,"selectionAnchorIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionAnchorIndex() ); }
		if (HX_FIELD_EQ(inName,"selectionActiveIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionActiveIndex() ); }
		if (HX_FIELD_EQ(inName,"refreshTextFieldType") ) { return ::hx::Val( refreshTextFieldType_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentTextFormat") ) { return ::hx::Val( getCurrentTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"layoutBackgroundSkin") ) { return ::hx::Val( layoutBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_rightView") ) { return ::hx::Val( clearStyle_rightView_dyn() ); }
		if (HX_FIELD_EQ(inName,"__disabledTextFormat") ) { return ::hx::Val( _hx___disabledTextFormat ); }
		if (HX_FIELD_EQ(inName,"get_promptTextFormat") ) { return ::hx::Val( get_promptTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_promptTextFormat") ) { return ::hx::Val( set_promptTextFormat_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_leftViewMeasurements") ) { return ::hx::Val( _leftViewMeasurements ); }
		if (HX_FIELD_EQ(inName,"_ignoreLeftViewResize") ) { return ::hx::Val( _ignoreLeftViewResize ); }
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return ::hx::Val( get_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return ::hx::Val( set_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextFormatForState") ) { return ::hx::Val( getTextFormatForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormatForState") ) { return ::hx::Val( setTextFormatForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshBackgroundSkin") ) { return ::hx::Val( refreshBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeCurrentLeftView") ) { return ::hx::Val( removeCurrentLeftView_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshScrollPosition") ) { return ::hx::Val( refreshScrollPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_textFormat") ) { return ::hx::Val( clearStyle_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_embedFonts") ) { return ::hx::Val( clearStyle_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingTop") ) { return ::hx::Val( clearStyle_paddingTop_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_currentBackgroundSkin") ) { return ::hx::Val( _currentBackgroundSkin ); }
		if (HX_FIELD_EQ(inName,"_rightViewMeasurements") ) { return ::hx::Val( _rightViewMeasurements ); }
		if (HX_FIELD_EQ(inName,"_ignoreRightViewResize") ) { return ::hx::Val( _ignoreRightViewResize ); }
		if (HX_FIELD_EQ(inName,"errorStringCalloutOpen") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_errorStringCalloutOpen() ); }
		if (HX_FIELD_EQ(inName,"removeCurrentRightView") ) { return ::hx::Val( removeCurrentRightView_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_leftViewGap") ) { return ::hx::Val( clearStyle_leftViewGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_disabledTextFormat") ) { return ::hx::Val( get_disabledTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_disabledTextFormat") ) { return ::hx::Val( set_disabledTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingLeft") ) { return ::hx::Val( clearStyle_paddingLeft_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"textField_changeHandler") ) { return ::hx::Val( textField_changeHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"textField_scrollHandler") ) { return ::hx::Val( textField_scrollHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_rightViewGap") ) { return ::hx::Val( clearStyle_rightViewGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingRight") ) { return ::hx::Val( clearStyle_paddingRight_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"get_selectionAnchorIndex") ) { return ::hx::Val( get_selectionAnchorIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionActiveIndex") ) { return ::hx::Val( get_selectionActiveIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"_promptTextMeasuredWidth") ) { return ::hx::Val( _promptTextMeasuredWidth ); }
		if (HX_FIELD_EQ(inName,"initializeTextInputTheme") ) { return ::hx::Val( initializeTextInputTheme_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentBackgroundSkin") ) { return ::hx::Val( getCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"addCurrentBackgroundSkin") ) { return ::hx::Val( addCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"textInput_focusInHandler") ) { return ::hx::Val( textInput_focusInHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_paddingBottom") ) { return ::hx::Val( clearStyle_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_verticalAlign") ) { return ::hx::Val( clearStyle_verticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_autoSizeWidth") ) { return ::hx::Val( clearStyle_autoSizeWidth_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_previousSimpleTextFormat") ) { return ::hx::Val( _previousSimpleTextFormat ); }
		if (HX_FIELD_EQ(inName,"_previousPromptTextFormat") ) { return ::hx::Val( _previousPromptTextFormat ); }
		if (HX_FIELD_EQ(inName,"customErrorCalloutVariant") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_customErrorCalloutVariant() ); }
		if (HX_FIELD_EQ(inName,"_promptTextMeasuredHeight") ) { return ::hx::Val( _promptTextMeasuredHeight ); }
		if (HX_FIELD_EQ(inName,"textInput_focusOutHandler") ) { return ::hx::Val( textInput_focusOutHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_backgroundSkin") ) { return ::hx::Val( clearStyle_backgroundSkin_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"get_errorStringCalloutOpen") ) { return ::hx::Val( get_errorStringCalloutOpen_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentPromptTextFormat") ) { return ::hx::Val( getCurrentPromptTextFormat_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_backgroundSkinMeasurements") ) { return ::hx::Val( _backgroundSkinMeasurements ); }
		if (HX_FIELD_EQ(inName,"removeCurrentBackgroundSkin") ) { return ::hx::Val( removeCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_promptTextFormat") ) { return ::hx::Val( clearStyle_promptTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"__customErrorCalloutVariant") ) { return ::hx::Val( _hx___customErrorCalloutVariant ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"_pendingSelectionAnchorIndex") ) { return ::hx::Val( _pendingSelectionAnchorIndex ); }
		if (HX_FIELD_EQ(inName,"_pendingSelectionActiveIndex") ) { return ::hx::Val( _pendingSelectionActiveIndex ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"showPromptWhenEmptyAndFocused") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_showPromptWhenEmptyAndFocused() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_disabledTextFormat") ) { return ::hx::Val( clearStyle_disabledTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_customErrorCalloutVariant") ) { return ::hx::Val( get_customErrorCalloutVariant_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_customErrorCalloutVariant") ) { return ::hx::Val( set_customErrorCalloutVariant_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"_previousPromptSimpleTextFormat") ) { return ::hx::Val( _previousPromptSimpleTextFormat ); }
		if (HX_FIELD_EQ(inName,"__showPromptWhenEmptyAndFocused") ) { return ::hx::Val( _hx___showPromptWhenEmptyAndFocused ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"textInput_leftView_resizeHandler") ) { return ::hx::Val( textInput_leftView_resizeHandler_dyn() ); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"textInput_rightView_resizeHandler") ) { return ::hx::Val( textInput_rightView_resizeHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_showPromptWhenEmptyAndFocused") ) { return ::hx::Val( get_showPromptWhenEmptyAndFocused_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_showPromptWhenEmptyAndFocused") ) { return ::hx::Val( set_showPromptWhenEmptyAndFocused_dyn() ); }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"_previousCustomErrorCalloutVariant") ) { return ::hx::Val( _previousCustomErrorCalloutVariant ); }
		if (HX_FIELD_EQ(inName,"textInput_textFormat_changeHandler") ) { return ::hx::Val( textInput_textFormat_changeHandler_dyn() ); }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"clearStyle_customErrorCalloutVariant") ) { return ::hx::Val( clearStyle_customErrorCalloutVariant_dyn() ); }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"textInput_promptTextFormat_changeHandler") ) { return ::hx::Val( textInput_promptTextFormat_changeHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_showPromptWhenEmptyAndFocused") ) { return ::hx::Val( clearStyle_showPromptWhenEmptyAndFocused_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextInput_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"VARIANT_SEARCH") ) { outValue = ( VARIANT_SEARCH ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"CHILD_VARIANT_ERROR_CALLOUT") ) { outValue = ( CHILD_VARIANT_ERROR_CALLOUT ); return true; }
		break;
	case 39:
		if (HX_FIELD_EQ(inName,"INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY") ) { outValue = ( INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY ); return true; }
	}
	return false;
}

::hx::Val TextInput_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { _text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"prompt") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_prompt(inValue.Cast< ::String >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_prompt") ) { _prompt=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollX(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"editable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_editable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"leftView") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_leftView(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_restrict(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"_scrollX") ) { _scrollX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxChars(inValue.Cast< int >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_editable") ) { _editable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightView") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_rightView(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_maxChars") ) { _maxChars=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__restrict") ) { _hx___restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textFormat(inValue.Cast<  ::feathers::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_embedFonts(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingTop(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__leftView") ) { _hx___leftView=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_selectable") ) { _selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftViewGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_leftViewGap(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"measureText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_measureText(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"errorString") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_errorString(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingLeft(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__rightView") ) { _hx___rightView=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rightViewGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_rightViewGap(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_stateToSkin") ) { _stateToSkin=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_measureText") ) { _measureText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_errorString") ) { _errorString=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingRight(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__embedFonts") ) { _hx___embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__paddingTop") ) { _hx___paddingTop=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_currentState") ) { _currentState=inValue.Cast<  ::feathers::controls::TextInputState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_previousText") ) { _previousText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingBottom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_verticalAlign(inValue.Cast<  ::feathers::layout::VerticalAlign >()) ); }
		if (HX_FIELD_EQ(inName,"autoSizeWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_autoSizeWidth(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__leftViewGap") ) { _hx___leftViewGap=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__paddingLeft") ) { _hx___paddingLeft=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"backgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_backgroundSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"__rightViewGap") ) { _hx___rightViewGap=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__paddingRight") ) { _hx___paddingRight=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"promptTextField") ) { promptTextField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_previousPrompt") ) { _previousPrompt=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__paddingBottom") ) { _hx___paddingBottom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__verticalAlign") ) { _hx___verticalAlign=inValue.Cast<  ::feathers::layout::VerticalAlign >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__autoSizeWidth") ) { _hx___autoSizeWidth=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_currentLeftView") ) { _currentLeftView=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"promptTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_promptTextFormat(inValue.Cast<  ::feathers::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"__backgroundSkin") ) { _hx___backgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_currentRightView") ) { _currentRightView=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_displayAsPassword(inValue.Cast< bool >()) ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"errorStringCallout") ) { errorStringCallout=inValue.Cast<  ::feathers::controls::TextCallout >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_updatedTextStyles") ) { _updatedTextStyles=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_displayAsPassword") ) { _displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disabledTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_disabledTextFormat(inValue.Cast<  ::feathers::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"_stateToTextFormat") ) { _stateToTextFormat=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textMeasuredWidth") ) { _textMeasuredWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__promptTextFormat") ) { _hx___promptTextFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_previousTextFormat") ) { _previousTextFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textMeasuredHeight") ) { _textMeasuredHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_previousMeasureText") ) { _previousMeasureText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_updatedPromptStyles") ) { _updatedPromptStyles=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__disabledTextFormat") ) { _hx___disabledTextFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_leftViewMeasurements") ) { _leftViewMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ignoreLeftViewResize") ) { _ignoreLeftViewResize=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_currentBackgroundSkin") ) { _currentBackgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rightViewMeasurements") ) { _rightViewMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ignoreRightViewResize") ) { _ignoreRightViewResize=inValue.Cast< bool >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"_promptTextMeasuredWidth") ) { _promptTextMeasuredWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_previousSimpleTextFormat") ) { _previousSimpleTextFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_previousPromptTextFormat") ) { _previousPromptTextFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"customErrorCalloutVariant") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_customErrorCalloutVariant(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"_promptTextMeasuredHeight") ) { _promptTextMeasuredHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_backgroundSkinMeasurements") ) { _backgroundSkinMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__customErrorCalloutVariant") ) { _hx___customErrorCalloutVariant=inValue.Cast< ::String >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"_pendingSelectionAnchorIndex") ) { _pendingSelectionAnchorIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pendingSelectionActiveIndex") ) { _pendingSelectionActiveIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"showPromptWhenEmptyAndFocused") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_showPromptWhenEmptyAndFocused(inValue.Cast< bool >()) ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"_previousPromptSimpleTextFormat") ) { _previousPromptSimpleTextFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showPromptWhenEmptyAndFocused") ) { _hx___showPromptWhenEmptyAndFocused=inValue.Cast< bool >(); return inValue; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"_previousCustomErrorCalloutVariant") ) { _previousCustomErrorCalloutVariant=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextInput_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"VARIANT_SEARCH") ) { VARIANT_SEARCH=ioValue.Cast< ::String >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"CHILD_VARIANT_ERROR_CALLOUT") ) { CHILD_VARIANT_ERROR_CALLOUT=ioValue.Cast< ::String >(); return true; }
		break;
	case 39:
		if (HX_FIELD_EQ(inName,"INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY") ) { INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY=ioValue.Cast<  ::feathers::core::InvalidationFlag >(); return true; }
	}
	return false;
}

void TextInput_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_editable",03,fc,3b,1d));
	outFields->push(HX_("editable",a4,04,a6,d5));
	outFields->push(HX_("_selectable",b5,83,b4,96));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("stageFocusTarget",2b,03,77,7f));
	outFields->push(HX_("_currentState",f7,ed,85,ad));
	outFields->push(HX_("currentState",18,5b,17,cb));
	outFields->push(HX_("_backgroundSkinMeasurements",41,46,9b,f8));
	outFields->push(HX_("_currentBackgroundSkin",e5,c0,55,58));
	outFields->push(HX_("backgroundSkin",8b,65,6f,20));
	outFields->push(HX_("showPromptWhenEmptyAndFocused",72,ad,6a,b1));
	outFields->push(HX_("_currentLeftView",e6,71,7b,14));
	outFields->push(HX_("_leftViewMeasurements",02,63,2e,d7));
	outFields->push(HX_("_ignoreLeftViewResize",b1,a7,74,c7));
	outFields->push(HX_("leftView",0c,76,4a,55));
	outFields->push(HX_("leftViewGap",6a,0e,48,9c));
	outFields->push(HX_("_currentRightView",47,eb,c0,44));
	outFields->push(HX_("_rightViewMeasurements",39,b0,a8,db));
	outFields->push(HX_("_ignoreRightViewResize",84,41,89,f3));
	outFields->push(HX_("rightView",61,88,15,b9));
	outFields->push(HX_("rightViewGap",35,5f,63,87));
	outFields->push(HX_("_stateToSkin",8a,7c,a1,62));
	outFields->push(HX_("textField",cd,24,81,99));
	outFields->push(HX_("promptTextField",89,5e,9e,da));
	outFields->push(HX_("errorStringCallout",f7,30,3b,02));
	outFields->push(HX_("_previousText",63,2f,0a,d6));
	outFields->push(HX_("_previousMeasureText",35,fb,fd,02));
	outFields->push(HX_("_previousPrompt",da,4d,4f,ed));
	outFields->push(HX_("_previousTextFormat",fa,5e,47,b1));
	outFields->push(HX_("_previousSimpleTextFormat",4c,a6,81,e5));
	outFields->push(HX_("_previousPromptTextFormat",3e,f6,e8,14));
	outFields->push(HX_("_previousPromptSimpleTextFormat",90,08,a2,6c));
	outFields->push(HX_("_updatedTextStyles",8b,09,a3,ed));
	outFields->push(HX_("_updatedPromptStyles",c2,90,45,d2));
	outFields->push(HX_("_text",8c,e8,0a,00));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("_measureText",2c,a9,8a,b6));
	outFields->push(HX_("measureText",2b,fb,80,50));
	outFields->push(HX_("baseline",85,dc,27,11));
	outFields->push(HX_("_prompt",43,63,cf,23));
	outFields->push(HX_("prompt",a4,51,58,b5));
	outFields->push(HX_("__restrict",5c,3e,d7,94));
	outFields->push(HX_("restrict",3c,cb,9e,f1));
	outFields->push(HX_("_displayAsPassword",d0,6f,ac,bd));
	outFields->push(HX_("displayAsPassword",0f,cb,96,ea));
	outFields->push(HX_("_errorString",ba,1c,a7,65));
	outFields->push(HX_("errorString",b9,6e,9d,ff));
	outFields->push(HX_("errorStringCalloutOpen",61,a8,19,e4));
	outFields->push(HX_("textFormat",c4,0f,7f,34));
	outFields->push(HX_("disabledTextFormat",60,88,2b,39));
	outFields->push(HX_("promptTextFormat",88,5a,f4,ec));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("_stateToTextFormat",91,fd,b2,b5));
	outFields->push(HX_("paddingTop",44,fd,05,3a));
	outFields->push(HX_("paddingRight",4b,ec,a7,1a));
	outFields->push(HX_("paddingBottom",9c,67,99,4f));
	outFields->push(HX_("paddingLeft",78,4a,e6,85));
	outFields->push(HX_("verticalAlign",6f,1e,7c,e4));
	outFields->push(HX_("_scrollX",2c,8d,90,6a));
	outFields->push(HX_("scrollX",ab,33,d8,30));
	outFields->push(HX_("_pendingSelectionAnchorIndex",69,4d,6c,68));
	outFields->push(HX_("selectionAnchorIndex",71,f3,3e,61));
	outFields->push(HX_("_pendingSelectionActiveIndex",78,20,e6,50));
	outFields->push(HX_("selectionActiveIndex",80,c6,b8,49));
	outFields->push(HX_("_maxChars",f8,e6,66,37));
	outFields->push(HX_("maxChars",99,ef,d0,ef));
	outFields->push(HX_("autoSizeWidth",16,44,4b,aa));
	outFields->push(HX_("_previousCustomErrorCalloutVariant",f6,2d,40,54));
	outFields->push(HX_("customErrorCalloutVariant",6c,f0,2e,4f));
	outFields->push(HX_("_textMeasuredWidth",b4,10,38,8f));
	outFields->push(HX_("_textMeasuredHeight",79,05,26,78));
	outFields->push(HX_("_promptTextMeasuredWidth",30,ed,80,76));
	outFields->push(HX_("_promptTextMeasuredHeight",7d,15,9e,f0));
	outFields->push(HX_("__backgroundSkin",ab,f0,ae,54));
	outFields->push(HX_("__showPromptWhenEmptyAndFocused",52,a6,64,28));
	outFields->push(HX_("__leftView",2c,e9,82,f8));
	outFields->push(HX_("__leftViewGap",4a,4f,c0,e4));
	outFields->push(HX_("__rightView",41,d1,41,e7));
	outFields->push(HX_("__rightViewGap",55,e2,23,a8));
	outFields->push(HX_("__textFormat",e4,8a,12,6d));
	outFields->push(HX_("__disabledTextFormat",80,23,5f,18));
	outFields->push(HX_("__promptTextFormat",a8,ed,84,58));
	outFields->push(HX_("__embedFonts",4b,42,75,c7));
	outFields->push(HX_("__paddingTop",64,78,99,72));
	outFields->push(HX_("__paddingRight",6b,6f,68,3b));
	outFields->push(HX_("__paddingBottom",7c,a0,4b,d7));
	outFields->push(HX_("__paddingLeft",58,8b,5e,ce));
	outFields->push(HX_("__verticalAlign",4f,57,2e,6c));
	outFields->push(HX_("__autoSizeWidth",f6,7c,fd,31));
	outFields->push(HX_("__customErrorCalloutVariant",4c,f9,c2,bd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextInput_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(TextInput_obj,_editable),HX_("_editable",03,fc,3b,1d)},
	{::hx::fsBool,(int)offsetof(TextInput_obj,_selectable),HX_("_selectable",b5,83,b4,96)},
	{::hx::fsObject /*  ::feathers::controls::TextInputState */ ,(int)offsetof(TextInput_obj,_currentState),HX_("_currentState",f7,ed,85,ad)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(TextInput_obj,_backgroundSkinMeasurements),HX_("_backgroundSkinMeasurements",41,46,9b,f8)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(TextInput_obj,_currentBackgroundSkin),HX_("_currentBackgroundSkin",e5,c0,55,58)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(TextInput_obj,_currentLeftView),HX_("_currentLeftView",e6,71,7b,14)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(TextInput_obj,_leftViewMeasurements),HX_("_leftViewMeasurements",02,63,2e,d7)},
	{::hx::fsBool,(int)offsetof(TextInput_obj,_ignoreLeftViewResize),HX_("_ignoreLeftViewResize",b1,a7,74,c7)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(TextInput_obj,_currentRightView),HX_("_currentRightView",47,eb,c0,44)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(TextInput_obj,_rightViewMeasurements),HX_("_rightViewMeasurements",39,b0,a8,db)},
	{::hx::fsBool,(int)offsetof(TextInput_obj,_ignoreRightViewResize),HX_("_ignoreRightViewResize",84,41,89,f3)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(TextInput_obj,_stateToSkin),HX_("_stateToSkin",8a,7c,a1,62)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(TextInput_obj,textField),HX_("textField",cd,24,81,99)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(TextInput_obj,promptTextField),HX_("promptTextField",89,5e,9e,da)},
	{::hx::fsObject /*  ::feathers::controls::TextCallout */ ,(int)offsetof(TextInput_obj,errorStringCallout),HX_("errorStringCallout",f7,30,3b,02)},
	{::hx::fsString,(int)offsetof(TextInput_obj,_previousText),HX_("_previousText",63,2f,0a,d6)},
	{::hx::fsString,(int)offsetof(TextInput_obj,_previousMeasureText),HX_("_previousMeasureText",35,fb,fd,02)},
	{::hx::fsString,(int)offsetof(TextInput_obj,_previousPrompt),HX_("_previousPrompt",da,4d,4f,ed)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(TextInput_obj,_previousTextFormat),HX_("_previousTextFormat",fa,5e,47,b1)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextInput_obj,_previousSimpleTextFormat),HX_("_previousSimpleTextFormat",4c,a6,81,e5)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(TextInput_obj,_previousPromptTextFormat),HX_("_previousPromptTextFormat",3e,f6,e8,14)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextInput_obj,_previousPromptSimpleTextFormat),HX_("_previousPromptSimpleTextFormat",90,08,a2,6c)},
	{::hx::fsBool,(int)offsetof(TextInput_obj,_updatedTextStyles),HX_("_updatedTextStyles",8b,09,a3,ed)},
	{::hx::fsBool,(int)offsetof(TextInput_obj,_updatedPromptStyles),HX_("_updatedPromptStyles",c2,90,45,d2)},
	{::hx::fsString,(int)offsetof(TextInput_obj,_text),HX_("_text",8c,e8,0a,00)},
	{::hx::fsString,(int)offsetof(TextInput_obj,_measureText),HX_("_measureText",2c,a9,8a,b6)},
	{::hx::fsString,(int)offsetof(TextInput_obj,_prompt),HX_("_prompt",43,63,cf,23)},
	{::hx::fsString,(int)offsetof(TextInput_obj,_hx___restrict),HX_("__restrict",5c,3e,d7,94)},
	{::hx::fsBool,(int)offsetof(TextInput_obj,_displayAsPassword),HX_("_displayAsPassword",d0,6f,ac,bd)},
	{::hx::fsString,(int)offsetof(TextInput_obj,_errorString),HX_("_errorString",ba,1c,a7,65)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(TextInput_obj,_stateToTextFormat),HX_("_stateToTextFormat",91,fd,b2,b5)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,_scrollX),HX_("_scrollX",2c,8d,90,6a)},
	{::hx::fsInt,(int)offsetof(TextInput_obj,_pendingSelectionAnchorIndex),HX_("_pendingSelectionAnchorIndex",69,4d,6c,68)},
	{::hx::fsInt,(int)offsetof(TextInput_obj,_pendingSelectionActiveIndex),HX_("_pendingSelectionActiveIndex",78,20,e6,50)},
	{::hx::fsInt,(int)offsetof(TextInput_obj,_maxChars),HX_("_maxChars",f8,e6,66,37)},
	{::hx::fsString,(int)offsetof(TextInput_obj,_previousCustomErrorCalloutVariant),HX_("_previousCustomErrorCalloutVariant",f6,2d,40,54)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,_textMeasuredWidth),HX_("_textMeasuredWidth",b4,10,38,8f)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,_textMeasuredHeight),HX_("_textMeasuredHeight",79,05,26,78)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,_promptTextMeasuredWidth),HX_("_promptTextMeasuredWidth",30,ed,80,76)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,_promptTextMeasuredHeight),HX_("_promptTextMeasuredHeight",7d,15,9e,f0)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(TextInput_obj,_hx___backgroundSkin),HX_("__backgroundSkin",ab,f0,ae,54)},
	{::hx::fsBool,(int)offsetof(TextInput_obj,_hx___showPromptWhenEmptyAndFocused),HX_("__showPromptWhenEmptyAndFocused",52,a6,64,28)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(TextInput_obj,_hx___leftView),HX_("__leftView",2c,e9,82,f8)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,_hx___leftViewGap),HX_("__leftViewGap",4a,4f,c0,e4)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(TextInput_obj,_hx___rightView),HX_("__rightView",41,d1,41,e7)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,_hx___rightViewGap),HX_("__rightViewGap",55,e2,23,a8)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(TextInput_obj,_hx___textFormat),HX_("__textFormat",e4,8a,12,6d)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(TextInput_obj,_hx___disabledTextFormat),HX_("__disabledTextFormat",80,23,5f,18)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(TextInput_obj,_hx___promptTextFormat),HX_("__promptTextFormat",a8,ed,84,58)},
	{::hx::fsBool,(int)offsetof(TextInput_obj,_hx___embedFonts),HX_("__embedFonts",4b,42,75,c7)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,_hx___paddingTop),HX_("__paddingTop",64,78,99,72)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,_hx___paddingRight),HX_("__paddingRight",6b,6f,68,3b)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,_hx___paddingBottom),HX_("__paddingBottom",7c,a0,4b,d7)},
	{::hx::fsFloat,(int)offsetof(TextInput_obj,_hx___paddingLeft),HX_("__paddingLeft",58,8b,5e,ce)},
	{::hx::fsObject /*  ::feathers::layout::VerticalAlign */ ,(int)offsetof(TextInput_obj,_hx___verticalAlign),HX_("__verticalAlign",4f,57,2e,6c)},
	{::hx::fsBool,(int)offsetof(TextInput_obj,_hx___autoSizeWidth),HX_("__autoSizeWidth",f6,7c,fd,31)},
	{::hx::fsString,(int)offsetof(TextInput_obj,_hx___customErrorCalloutVariant),HX_("__customErrorCalloutVariant",4c,f9,c2,bd)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TextInput_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::feathers::core::InvalidationFlag */ ,(void *) &TextInput_obj::INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY,HX_("INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY",52,80,9e,2a)},
	{::hx::fsString,(void *) &TextInput_obj::VARIANT_SEARCH,HX_("VARIANT_SEARCH",42,cf,cc,4b)},
	{::hx::fsString,(void *) &TextInput_obj::CHILD_VARIANT_ERROR_CALLOUT,HX_("CHILD_VARIANT_ERROR_CALLOUT",dc,da,fd,c3)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TextInput_obj_sMemberFields[] = {
	HX_("_editable",03,fc,3b,1d),
	HX_("get_editable",ad,b8,bf,8a),
	HX_("set_editable",21,dc,b8,9f),
	HX_("_selectable",b5,83,b4,96),
	HX_("get_selectable",df,3e,20,3a),
	HX_("set_selectable",53,27,40,5a),
	HX_("get_stageFocusTarget",34,68,e1,9d),
	HX_("_currentState",f7,ed,85,ad),
	HX_("get_currentState",a1,47,b6,cf),
	HX_("set_enabled",a4,6b,98,0e),
	HX_("_backgroundSkinMeasurements",41,46,9b,f8),
	HX_("_currentBackgroundSkin",e5,c0,55,58),
	HX_("_currentLeftView",e6,71,7b,14),
	HX_("_leftViewMeasurements",02,63,2e,d7),
	HX_("_ignoreLeftViewResize",b1,a7,74,c7),
	HX_("_currentRightView",47,eb,c0,44),
	HX_("_rightViewMeasurements",39,b0,a8,db),
	HX_("_ignoreRightViewResize",84,41,89,f3),
	HX_("_stateToSkin",8a,7c,a1,62),
	HX_("textField",cd,24,81,99),
	HX_("promptTextField",89,5e,9e,da),
	HX_("errorStringCallout",f7,30,3b,02),
	HX_("_previousText",63,2f,0a,d6),
	HX_("_previousMeasureText",35,fb,fd,02),
	HX_("_previousPrompt",da,4d,4f,ed),
	HX_("_previousTextFormat",fa,5e,47,b1),
	HX_("_previousSimpleTextFormat",4c,a6,81,e5),
	HX_("_previousPromptTextFormat",3e,f6,e8,14),
	HX_("_previousPromptSimpleTextFormat",90,08,a2,6c),
	HX_("_updatedTextStyles",8b,09,a3,ed),
	HX_("_updatedPromptStyles",c2,90,45,d2),
	HX_("_text",8c,e8,0a,00),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("_measureText",2c,a9,8a,b6),
	HX_("get_measureText",c2,b2,62,11),
	HX_("set_measureText",ce,2f,2e,0d),
	HX_("get_baseline",8e,90,41,c6),
	HX_("_prompt",43,63,cf,23),
	HX_("get_prompt",6d,c1,df,a5),
	HX_("set_prompt",e1,5f,5d,a9),
	HX_("__restrict",5c,3e,d7,94),
	HX_("get_restrict",45,7f,b8,a6),
	HX_("set_restrict",b9,a2,b1,bb),
	HX_("_displayAsPassword",d0,6f,ac,bd),
	HX_("get_displayAsPassword",e6,cd,44,69),
	HX_("set_displayAsPassword",f2,9b,4d,bd),
	HX_("_errorString",ba,1c,a7,65),
	HX_("get_errorString",50,26,7f,c0),
	HX_("set_errorString",5c,a3,4a,bc),
	HX_("get_errorStringCalloutOpen",2a,fa,1e,1c),
	HX_("_stateToTextFormat",91,fd,b2,b5),
	HX_("_scrollX",2c,8d,90,6a),
	HX_("get_scrollX",c2,93,d2,b6),
	HX_("set_scrollX",ce,9a,3f,c1),
	HX_("_pendingSelectionAnchorIndex",69,4d,6c,68),
	HX_("get_selectionAnchorIndex",fa,10,db,a3),
	HX_("_pendingSelectionActiveIndex",78,20,e6,50),
	HX_("get_selectionActiveIndex",09,e4,54,8c),
	HX_("_maxChars",f8,e6,66,37),
	HX_("get_maxChars",a2,a3,ea,a4),
	HX_("set_maxChars",16,c7,e3,b9),
	HX_("_previousCustomErrorCalloutVariant",f6,2d,40,54),
	HX_("_textMeasuredWidth",b4,10,38,8f),
	HX_("_textMeasuredHeight",79,05,26,78),
	HX_("_promptTextMeasuredWidth",30,ed,80,76),
	HX_("_promptTextMeasuredHeight",7d,15,9e,f0),
	HX_("getSkinForState",9b,6b,a7,62),
	HX_("setSkinForState",a7,e8,72,5e),
	HX_("getTextFormatForState",62,b0,16,a8),
	HX_("setTextFormatForState",6e,7e,1f,fc),
	HX_("selectRange",21,a9,8a,3d),
	HX_("selectAll",85,9b,fc,8d),
	HX_("setPadding",4f,7e,5c,23),
	HX_("showFocus",9b,c5,ed,32),
	HX_("dispose",9f,80,4c,bb),
	HX_("initializeTextInputTheme",1c,02,f8,76),
	HX_("initialize",50,31,bb,ec),
	HX_("update",09,86,05,87),
	HX_("refreshBackgroundSkin",c6,3c,91,2d),
	HX_("getCurrentBackgroundSkin",2e,6b,dc,9d),
	HX_("addCurrentBackgroundSkin",c3,bb,57,cf),
	HX_("removeCurrentBackgroundSkin",c0,fc,70,a2),
	HX_("refreshLeftView",07,df,a2,52),
	HX_("getCurrentLeftView",6f,cf,61,dc),
	HX_("removeCurrentLeftView",81,07,7a,20),
	HX_("refreshRightView",06,fb,18,69),
	HX_("getCurrentRightView",9e,65,6c,66),
	HX_("removeCurrentRightView",4c,3d,85,b7),
	HX_("measure",5e,fb,e9,3c),
	HX_("refreshTextFieldType",4c,57,ac,b8),
	HX_("refreshTextStyles",6a,44,c4,9f),
	HX_("refreshPrompt",df,f5,92,b3),
	HX_("refreshPromptText",2c,ca,df,ae),
	HX_("refreshPromptStyles",61,81,52,3b),
	HX_("getCurrentPromptTextFormat",eb,4e,e8,63),
	HX_("refreshText",28,5c,95,41),
	HX_("refreshSelection",f1,6a,1e,3e),
	HX_("refreshScrollPosition",11,61,0d,64),
	HX_("getCurrentTextFormat",e7,c7,29,33),
	HX_("layoutContent",af,8f,21,da),
	HX_("alignTextField",48,2d,36,dd),
	HX_("layoutBackgroundSkin",d5,3d,2a,eb),
	HX_("refreshErrorString",9e,94,5e,4d),
	HX_("createErrorCallout",e4,60,b7,ff),
	HX_("destroyErrorCallout",e2,2b,be,d6),
	HX_("changeState",81,1e,d1,a9),
	HX_("refreshState",36,72,8d,97),
	HX_("textField_changeHandler",08,56,33,6e),
	HX_("textField_scrollHandler",0b,cd,a5,7f),
	HX_("textInput_focusInHandler",8f,d4,fa,45),
	HX_("textInput_focusOutHandler",72,87,04,8b),
	HX_("textInput_textFormat_changeHandler",e1,7e,16,cf),
	HX_("textInput_promptTextFormat_changeHandler",25,fe,9a,78),
	HX_("textInput_leftView_resizeHandler",a5,d6,f4,9f),
	HX_("textInput_rightView_resizeHandler",36,93,fa,0f),
	HX_("__backgroundSkin",ab,f0,ae,54),
	HX_("get_backgroundSkin",54,46,09,bc),
	HX_("set_backgroundSkin",c8,78,b8,98),
	HX_("clearStyle_backgroundSkin",46,5a,f8,27),
	HX_("__showPromptWhenEmptyAndFocused",52,a6,64,28),
	HX_("get_showPromptWhenEmptyAndFocused",c9,16,bd,92),
	HX_("set_showPromptWhenEmptyAndFocused",d5,c6,c8,fc),
	HX_("clearStyle_showPromptWhenEmptyAndFocused",17,43,42,ca),
	HX_("__leftView",2c,e9,82,f8),
	HX_("get_leftView",15,2a,64,0a),
	HX_("set_leftView",89,4d,5d,1f),
	HX_("clearStyle_leftView",87,dc,b2,d6),
	HX_("__leftViewGap",4a,4f,c0,e4),
	HX_("get_leftViewGap",01,c6,29,5d),
	HX_("set_leftViewGap",0d,43,f5,58),
	HX_("clearStyle_leftViewGap",cf,a6,f0,a8),
	HX_("__rightView",41,d1,41,e7),
	HX_("get_rightView",38,5c,79,7a),
	HX_("set_rightView",44,3e,7f,bf),
	HX_("clearStyle_rightView",86,cd,06,73),
	HX_("__rightViewGap",55,e2,23,a8),
	HX_("get_rightViewGap",be,4b,02,8c),
	HX_("set_rightViewGap",32,39,44,e2),
	HX_("clearStyle_rightViewGap",30,1f,40,8e),
	HX_("__textFormat",e4,8a,12,6d),
	HX_("get_textFormat",0d,98,74,aa),
	HX_("set_textFormat",81,80,94,ca),
	HX_("clearStyle_textFormat",ff,4a,aa,2d),
	HX_("__disabledTextFormat",80,23,5f,18),
	HX_("get_disabledTextFormat",a9,01,c0,92),
	HX_("set_disabledTextFormat",1d,7e,6b,c6),
	HX_("clearStyle_disabledTextFormat",9b,f6,2c,16),
	HX_("__promptTextFormat",a8,ed,84,58),
	HX_("get_promptTextFormat",91,bf,5e,0b),
	HX_("set_promptTextFormat",05,77,16,d8),
	HX_("clearStyle_promptTextFormat",03,34,30,a0),
	HX_("__embedFonts",4b,42,75,c7),
	HX_("get_embedFonts",74,4f,d7,04),
	HX_("set_embedFonts",e8,37,f7,24),
	HX_("clearStyle_embedFonts",66,02,0d,88),
	HX_("__paddingTop",64,78,99,72),
	HX_("get_paddingTop",8d,85,fb,af),
	HX_("set_paddingTop",01,6e,1b,d0),
	HX_("clearStyle_paddingTop",7f,38,31,33),
	HX_("__paddingRight",6b,6f,68,3b),
	HX_("get_paddingRight",d4,d8,46,1f),
	HX_("set_paddingRight",48,c6,88,75),
	HX_("clearStyle_paddingRight",46,ac,84,21),
	HX_("__paddingBottom",7c,a0,4b,d7),
	HX_("get_paddingBottom",f3,72,09,56),
	HX_("set_paddingBottom",ff,4a,77,79),
	HX_("clearStyle_paddingBottom",41,a3,e4,49),
	HX_("__paddingLeft",58,8b,5e,ce),
	HX_("get_paddingLeft",0f,02,c8,46),
	HX_("set_paddingLeft",1b,7f,93,42),
	HX_("clearStyle_paddingLeft",dd,e2,8e,92),
	HX_("__verticalAlign",4f,57,2e,6c),
	HX_("get_verticalAlign",c6,29,ec,ea),
	HX_("set_verticalAlign",d2,01,5a,0e),
	HX_("clearStyle_verticalAlign",14,5a,c7,de),
	HX_("__autoSizeWidth",f6,7c,fd,31),
	HX_("get_autoSizeWidth",6d,4f,bb,b0),
	HX_("set_autoSizeWidth",79,27,29,d4),
	HX_("clearStyle_autoSizeWidth",bb,7f,96,a4),
	HX_("__customErrorCalloutVariant",4c,f9,c2,bd),
	HX_("get_customErrorCalloutVariant",43,22,6e,37),
	HX_("set_customErrorCalloutVariant",4f,dc,45,f9),
	HX_("clearStyle_customErrorCalloutVariant",91,8f,f7,5f),
	HX_("get_styleContext",47,7d,20,4b),
	::String(null()) };

static void TextInput_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextInput_obj::INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY,"INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY");
	HX_MARK_MEMBER_NAME(TextInput_obj::VARIANT_SEARCH,"VARIANT_SEARCH");
	HX_MARK_MEMBER_NAME(TextInput_obj::CHILD_VARIANT_ERROR_CALLOUT,"CHILD_VARIANT_ERROR_CALLOUT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextInput_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextInput_obj::INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY,"INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY");
	HX_VISIT_MEMBER_NAME(TextInput_obj::VARIANT_SEARCH,"VARIANT_SEARCH");
	HX_VISIT_MEMBER_NAME(TextInput_obj::CHILD_VARIANT_ERROR_CALLOUT,"CHILD_VARIANT_ERROR_CALLOUT");
};

#endif

::hx::Class TextInput_obj::__mClass;

static ::String TextInput_obj_sStaticFields[] = {
	HX_("INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY",52,80,9e,2a),
	HX_("VARIANT_SEARCH",42,cf,cc,4b),
	HX_("CHILD_VARIANT_ERROR_CALLOUT",dc,da,fd,c3),
	::String(null())
};

void TextInput_obj::__register()
{
	TextInput_obj _hx_dummy;
	TextInput_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.TextInput",c3,d8,97,9d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextInput_obj::__GetStatic;
	__mClass->mSetStaticField = &TextInput_obj::__SetStatic;
	__mClass->mMarkFunc = TextInput_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextInput_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextInput_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextInput_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextInput_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextInput_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextInput_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextInput_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_62_boot)
HXDLIN(  62)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("setTextFormatForState",6e,7e,1f,fc), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("style",31,a5,1d,84),null())))
            				->setFixed(1,HX_("setSkinForState",a7,e8,72,5e), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("style",31,a5,1d,84),null())))))
            			->setFixed(1,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("defaultXmlProperty",0b,06,d9,8a),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("text",ad,cc,f9,4c))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_63_boot)
HXDLIN(  63)		INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY = ::feathers::core::InvalidationFlag_obj::CUSTOM(HX_("errorCalloutFactory",e2,a9,b3,d9));
            	}
{
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_82_boot)
HXDLIN(  82)		VARIANT_SEARCH = HX_("search",68,9f,f7,62);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5d64ccb50b85967a_97_boot)
HXDLIN(  97)		CHILD_VARIANT_ERROR_CALLOUT = HX_("textInput_errorCallout",6a,54,1a,b3);
            	}
}

} // end namespace feathers
} // end namespace controls
