// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_BaseScrollContainer
#include <feathers/controls/supportClasses/BaseScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_IViewPort
#include <feathers/controls/supportClasses/IViewPort.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_TextFieldViewPort
#include <feathers/controls/supportClasses/TextFieldViewPort.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusManagerAware
#include <feathers/core/IFocusManagerAware.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStageFocusDelegate
#include <feathers/core/IStageFocusDelegate.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_InvalidationFlag
#include <feathers/core/InvalidationFlag.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_events_FeathersEvent
#include <feathers/events/FeathersEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d7274d7260c28208_36_new,"feathers.controls.supportClasses.TextFieldViewPort","new",0x8d105e68,"feathers.controls.supportClasses.TextFieldViewPort.new","feathers/controls/supportClasses/TextFieldViewPort.hx",36,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_58_get_textField,"feathers.controls.supportClasses.TextFieldViewPort","get_textField",0x111260ac,"feathers.controls.supportClasses.TextFieldViewPort.get_textField","feathers/controls/supportClasses/TextFieldViewPort.hx",58,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_73_get_textFieldType,"feathers.controls.supportClasses.TextFieldViewPort","get_textFieldType",0xba904586,"feathers.controls.supportClasses.TextFieldViewPort.get_textFieldType","feathers/controls/supportClasses/TextFieldViewPort.hx",73,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_76_set_textFieldType,"feathers.controls.supportClasses.TextFieldViewPort","set_textFieldType",0xddfe1d92,"feathers.controls.supportClasses.TextFieldViewPort.set_textFieldType","feathers/controls/supportClasses/TextFieldViewPort.hx",76,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_96_get_text,"feathers.controls.supportClasses.TextFieldViewPort","get_text",0x76901d2e,"feathers.controls.supportClasses.TextFieldViewPort.get_text","feathers/controls/supportClasses/TextFieldViewPort.hx",96,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_99_set_text,"feathers.controls.supportClasses.TextFieldViewPort","set_text",0x24ed76a2,"feathers.controls.supportClasses.TextFieldViewPort.set_text","feathers/controls/supportClasses/TextFieldViewPort.hx",99,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_114_get_baseline,"feathers.controls.supportClasses.TextFieldViewPort","get_baseline",0x12d70186,"feathers.controls.supportClasses.TextFieldViewPort.get_baseline","feathers/controls/supportClasses/TextFieldViewPort.hx",114,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_141_get_wordWrap,"feathers.controls.supportClasses.TextFieldViewPort","get_wordWrap",0x028a39b5,"feathers.controls.supportClasses.TextFieldViewPort.get_wordWrap","feathers/controls/supportClasses/TextFieldViewPort.hx",141,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_144_set_wordWrap,"feathers.controls.supportClasses.TextFieldViewPort","set_wordWrap",0x17835d29,"feathers.controls.supportClasses.TextFieldViewPort.set_wordWrap","feathers/controls/supportClasses/TextFieldViewPort.hx",144,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_163_get_multiline,"feathers.controls.supportClasses.TextFieldViewPort","get_multiline",0x15a30ecc,"feathers.controls.supportClasses.TextFieldViewPort.get_multiline","feathers/controls/supportClasses/TextFieldViewPort.hx",163,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_166_set_multiline,"feathers.controls.supportClasses.TextFieldViewPort","set_multiline",0x5aa8f0d8,"feathers.controls.supportClasses.TextFieldViewPort.set_multiline","feathers/controls/supportClasses/TextFieldViewPort.hx",166,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_186_get_restrict,"feathers.controls.supportClasses.TextFieldViewPort","get_restrict",0xf34df03d,"feathers.controls.supportClasses.TextFieldViewPort.get_restrict","feathers/controls/supportClasses/TextFieldViewPort.hx",186,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_189_set_restrict,"feathers.controls.supportClasses.TextFieldViewPort","set_restrict",0x084713b1,"feathers.controls.supportClasses.TextFieldViewPort.set_restrict","feathers/controls/supportClasses/TextFieldViewPort.hx",189,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_208_get_displayAsPassword,"feathers.controls.supportClasses.TextFieldViewPort","get_displayAsPassword",0x3ea57dee,"feathers.controls.supportClasses.TextFieldViewPort.get_displayAsPassword","feathers/controls/supportClasses/TextFieldViewPort.hx",208,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_211_set_displayAsPassword,"feathers.controls.supportClasses.TextFieldViewPort","set_displayAsPassword",0x92ae4bfa,"feathers.controls.supportClasses.TextFieldViewPort.set_displayAsPassword","feathers/controls/supportClasses/TextFieldViewPort.hx",211,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_230_get_maxChars,"feathers.controls.supportClasses.TextFieldViewPort","get_maxChars",0xf180149a,"feathers.controls.supportClasses.TextFieldViewPort.get_maxChars","feathers/controls/supportClasses/TextFieldViewPort.hx",230,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_233_set_maxChars,"feathers.controls.supportClasses.TextFieldViewPort","set_maxChars",0x0679380e,"feathers.controls.supportClasses.TextFieldViewPort.set_maxChars","feathers/controls/supportClasses/TextFieldViewPort.hx",233,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_252_get_selectable,"feathers.controls.supportClasses.TextFieldViewPort","get_selectable",0xebadddd7,"feathers.controls.supportClasses.TextFieldViewPort.get_selectable","feathers/controls/supportClasses/TextFieldViewPort.hx",252,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_255_set_selectable,"feathers.controls.supportClasses.TextFieldViewPort","set_selectable",0x0bcdc64b,"feathers.controls.supportClasses.TextFieldViewPort.set_selectable","feathers/controls/supportClasses/TextFieldViewPort.hx",255,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_274_get_smoothScrolling,"feathers.controls.supportClasses.TextFieldViewPort","get_smoothScrolling",0x9a244a06,"feathers.controls.supportClasses.TextFieldViewPort.get_smoothScrolling","feathers/controls/supportClasses/TextFieldViewPort.hx",274,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_277_set_smoothScrolling,"feathers.controls.supportClasses.TextFieldViewPort","set_smoothScrolling",0xd6c13d12,"feathers.controls.supportClasses.TextFieldViewPort.set_smoothScrolling","feathers/controls/supportClasses/TextFieldViewPort.hx",277,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_304_get_textFormat,"feathers.controls.supportClasses.TextFieldViewPort","get_textFormat",0x5c023705,"feathers.controls.supportClasses.TextFieldViewPort.get_textFormat","feathers/controls/supportClasses/TextFieldViewPort.hx",304,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_307_set_textFormat,"feathers.controls.supportClasses.TextFieldViewPort","set_textFormat",0x7c221f79,"feathers.controls.supportClasses.TextFieldViewPort.set_textFormat","feathers/controls/supportClasses/TextFieldViewPort.hx",307,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_326_get_embedFonts,"feathers.controls.supportClasses.TextFieldViewPort","get_embedFonts",0xb664ee6c,"feathers.controls.supportClasses.TextFieldViewPort.get_embedFonts","feathers/controls/supportClasses/TextFieldViewPort.hx",326,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_329_set_embedFonts,"feathers.controls.supportClasses.TextFieldViewPort","set_embedFonts",0xd684d6e0,"feathers.controls.supportClasses.TextFieldViewPort.set_embedFonts","feathers/controls/supportClasses/TextFieldViewPort.hx",329,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_349_get_paddingTop,"feathers.controls.supportClasses.TextFieldViewPort","get_paddingTop",0x61892485,"feathers.controls.supportClasses.TextFieldViewPort.get_paddingTop","feathers/controls/supportClasses/TextFieldViewPort.hx",349,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_352_set_paddingTop,"feathers.controls.supportClasses.TextFieldViewPort","set_paddingTop",0x81a90cf9,"feathers.controls.supportClasses.TextFieldViewPort.set_paddingTop","feathers/controls/supportClasses/TextFieldViewPort.hx",352,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_372_get_paddingRight,"feathers.controls.supportClasses.TextFieldViewPort","get_paddingRight",0x86b425cc,"feathers.controls.supportClasses.TextFieldViewPort.get_paddingRight","feathers/controls/supportClasses/TextFieldViewPort.hx",372,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_375_set_paddingRight,"feathers.controls.supportClasses.TextFieldViewPort","set_paddingRight",0xdcf61340,"feathers.controls.supportClasses.TextFieldViewPort.set_paddingRight","feathers/controls/supportClasses/TextFieldViewPort.hx",375,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_395_get_paddingBottom,"feathers.controls.supportClasses.TextFieldViewPort","get_paddingBottom",0x6e3f7efb,"feathers.controls.supportClasses.TextFieldViewPort.get_paddingBottom","feathers/controls/supportClasses/TextFieldViewPort.hx",395,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_398_set_paddingBottom,"feathers.controls.supportClasses.TextFieldViewPort","set_paddingBottom",0x91ad5707,"feathers.controls.supportClasses.TextFieldViewPort.set_paddingBottom","feathers/controls/supportClasses/TextFieldViewPort.hx",398,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_418_get_paddingLeft,"feathers.controls.supportClasses.TextFieldViewPort","get_paddingLeft",0xf1257c17,"feathers.controls.supportClasses.TextFieldViewPort.get_paddingLeft","feathers/controls/supportClasses/TextFieldViewPort.hx",418,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_421_set_paddingLeft,"feathers.controls.supportClasses.TextFieldViewPort","set_paddingLeft",0xecf0f923,"feathers.controls.supportClasses.TextFieldViewPort.set_paddingLeft","feathers/controls/supportClasses/TextFieldViewPort.hx",421,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_434_get_stageFocusTarget,"feathers.controls.supportClasses.TextFieldViewPort","get_stageFocusTarget",0xff44912c,"feathers.controls.supportClasses.TextFieldViewPort.get_stageFocusTarget","feathers/controls/supportClasses/TextFieldViewPort.hx",434,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_445_get_minVisibleWidth,"feathers.controls.supportClasses.TextFieldViewPort","get_minVisibleWidth",0xeecc2e05,"feathers.controls.supportClasses.TextFieldViewPort.get_minVisibleWidth","feathers/controls/supportClasses/TextFieldViewPort.hx",445,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_452_set_minVisibleWidth,"feathers.controls.supportClasses.TextFieldViewPort","set_minVisibleWidth",0x2b692111,"feathers.controls.supportClasses.TextFieldViewPort.set_minVisibleWidth","feathers/controls/supportClasses/TextFieldViewPort.hx",452,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_479_get_maxVisibleWidth,"feathers.controls.supportClasses.TextFieldViewPort","get_maxVisibleWidth",0x92e67a17,"feathers.controls.supportClasses.TextFieldViewPort.get_maxVisibleWidth","feathers/controls/supportClasses/TextFieldViewPort.hx",479,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_482_set_maxVisibleWidth,"feathers.controls.supportClasses.TextFieldViewPort","set_maxVisibleWidth",0xcf836d23,"feathers.controls.supportClasses.TextFieldViewPort.set_maxVisibleWidth","feathers/controls/supportClasses/TextFieldViewPort.hx",482,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_506_get_visibleWidth,"feathers.controls.supportClasses.TextFieldViewPort","get_visibleWidth",0xabf409b5,"feathers.controls.supportClasses.TextFieldViewPort.get_visibleWidth","feathers/controls/supportClasses/TextFieldViewPort.hx",506,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_513_set_visibleWidth,"feathers.controls.supportClasses.TextFieldViewPort","set_visibleWidth",0x0235f729,"feathers.controls.supportClasses.TextFieldViewPort.set_visibleWidth","feathers/controls/supportClasses/TextFieldViewPort.hx",513,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_532_get_minVisibleHeight,"feathers.controls.supportClasses.TextFieldViewPort","get_minVisibleHeight",0xba2b8f08,"feathers.controls.supportClasses.TextFieldViewPort.get_minVisibleHeight","feathers/controls/supportClasses/TextFieldViewPort.hx",532,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_539_set_minVisibleHeight,"feathers.controls.supportClasses.TextFieldViewPort","set_minVisibleHeight",0x86e3467c,"feathers.controls.supportClasses.TextFieldViewPort.set_minVisibleHeight","feathers/controls/supportClasses/TextFieldViewPort.hx",539,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_566_get_maxVisibleHeight,"feathers.controls.supportClasses.TextFieldViewPort","get_maxVisibleHeight",0xad13d2b6,"feathers.controls.supportClasses.TextFieldViewPort.get_maxVisibleHeight","feathers/controls/supportClasses/TextFieldViewPort.hx",566,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_569_set_maxVisibleHeight,"feathers.controls.supportClasses.TextFieldViewPort","set_maxVisibleHeight",0x79cb8a2a,"feathers.controls.supportClasses.TextFieldViewPort.set_maxVisibleHeight","feathers/controls/supportClasses/TextFieldViewPort.hx",569,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_593_get_visibleHeight,"feathers.controls.supportClasses.TextFieldViewPort","get_visibleHeight",0x7fe3ed58,"feathers.controls.supportClasses.TextFieldViewPort.get_visibleHeight","feathers/controls/supportClasses/TextFieldViewPort.hx",593,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_600_set_visibleHeight,"feathers.controls.supportClasses.TextFieldViewPort","set_visibleHeight",0xa351c564,"feathers.controls.supportClasses.TextFieldViewPort.set_visibleHeight","feathers/controls/supportClasses/TextFieldViewPort.hx",600,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_619_get_scrollX,"feathers.controls.supportClasses.TextFieldViewPort","get_scrollX",0xdf5869ca,"feathers.controls.supportClasses.TextFieldViewPort.get_scrollX","feathers/controls/supportClasses/TextFieldViewPort.hx",619,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_622_set_scrollX,"feathers.controls.supportClasses.TextFieldViewPort","set_scrollX",0xe9c570d6,"feathers.controls.supportClasses.TextFieldViewPort.set_scrollX","feathers/controls/supportClasses/TextFieldViewPort.hx",622,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_639_get_scrollY,"feathers.controls.supportClasses.TextFieldViewPort","get_scrollY",0xdf5869cb,"feathers.controls.supportClasses.TextFieldViewPort.get_scrollY","feathers/controls/supportClasses/TextFieldViewPort.hx",639,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_642_set_scrollY,"feathers.controls.supportClasses.TextFieldViewPort","set_scrollY",0xe9c570d7,"feathers.controls.supportClasses.TextFieldViewPort.set_scrollY","feathers/controls/supportClasses/TextFieldViewPort.hx",642,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_658_get_selectionAnchorIndex,"feathers.controls.supportClasses.TextFieldViewPort","get_selectionAnchorIndex",0xc55215f2,"feathers.controls.supportClasses.TextFieldViewPort.get_selectionAnchorIndex","feathers/controls/supportClasses/TextFieldViewPort.hx",658,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_676_get_selectionActiveIndex,"feathers.controls.supportClasses.TextFieldViewPort","get_selectionActiveIndex",0xadcbe901,"feathers.controls.supportClasses.TextFieldViewPort.get_selectionActiveIndex","feathers/controls/supportClasses/TextFieldViewPort.hx",676,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_698_setPadding,"feathers.controls.supportClasses.TextFieldViewPort","setPadding",0xab014147,"feathers.controls.supportClasses.TextFieldViewPort.setPadding","feathers/controls/supportClasses/TextFieldViewPort.hx",698,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_708_selectRange,"feathers.controls.supportClasses.TextFieldViewPort","selectRange",0x66107f29,"feathers.controls.supportClasses.TextFieldViewPort.selectRange","feathers/controls/supportClasses/TextFieldViewPort.hx",708,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_716_initialize,"feathers.controls.supportClasses.TextFieldViewPort","initialize",0x745ff448,"feathers.controls.supportClasses.TextFieldViewPort.initialize","feathers/controls/supportClasses/TextFieldViewPort.hx",716,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_733_update,"feathers.controls.supportClasses.TextFieldViewPort","update",0x795f6d01,"feathers.controls.supportClasses.TextFieldViewPort.update","feathers/controls/supportClasses/TextFieldViewPort.hx",733,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_763_measureSelf,"feathers.controls.supportClasses.TextFieldViewPort","measureSelf",0x785d9012,"feathers.controls.supportClasses.TextFieldViewPort.measureSelf","feathers/controls/supportClasses/TextFieldViewPort.hx",763,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_810_measure,"feathers.controls.supportClasses.TextFieldViewPort","measure",0x593a2d66,"feathers.controls.supportClasses.TextFieldViewPort.measure","feathers/controls/supportClasses/TextFieldViewPort.hx",810,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_845_refreshTextStyles,"feathers.controls.supportClasses.TextFieldViewPort","refreshTextStyles",0xb7fa5072,"feathers.controls.supportClasses.TextFieldViewPort.refreshTextStyles","feathers/controls/supportClasses/TextFieldViewPort.hx",845,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_857_refreshText,"feathers.controls.supportClasses.TextFieldViewPort","refreshText",0x6a1b3230,"feathers.controls.supportClasses.TextFieldViewPort.refreshText","feathers/controls/supportClasses/TextFieldViewPort.hx",857,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_908_refreshSelection,"feathers.controls.supportClasses.TextFieldViewPort","refreshSelection",0xa58bb7e9,"feathers.controls.supportClasses.TextFieldViewPort.refreshSelection","feathers/controls/supportClasses/TextFieldViewPort.hx",908,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_920_layoutTextField,"feathers.controls.supportClasses.TextFieldViewPort","layoutTextField",0x04e6aacb,"feathers.controls.supportClasses.TextFieldViewPort.layoutTextField","feathers/controls/supportClasses/TextFieldViewPort.hx",920,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_951_textField_changeHandler,"feathers.controls.supportClasses.TextFieldViewPort","textField_changeHandler",0xe1261810,"feathers.controls.supportClasses.TextFieldViewPort.textField_changeHandler","feathers/controls/supportClasses/TextFieldViewPort.hx",951,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_1025_textField_focusInHandler,"feathers.controls.supportClasses.TextFieldViewPort","textField_focusInHandler",0x43224ed7,"feathers.controls.supportClasses.TextFieldViewPort.textField_focusInHandler","feathers/controls/supportClasses/TextFieldViewPort.hx",1025,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_1029_textField_focusOutHandler,"feathers.controls.supportClasses.TextFieldViewPort","textField_focusOutHandler",0x10680c2a,"feathers.controls.supportClasses.TextFieldViewPort.textField_focusOutHandler","feathers/controls/supportClasses/TextFieldViewPort.hx",1029,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_1032_textField_scrollHandler,"feathers.controls.supportClasses.TextFieldViewPort","textField_scrollHandler",0xf2988f13,"feathers.controls.supportClasses.TextFieldViewPort.textField_scrollHandler","feathers/controls/supportClasses/TextFieldViewPort.hx",1032,0xfb8700a9)
HX_LOCAL_STACK_FRAME(_hx_pos_d7274d7260c28208_1043_textFieldViewPort_focusInHandler,"feathers.controls.supportClasses.TextFieldViewPort","textFieldViewPort_focusInHandler",0x03f387f1,"feathers.controls.supportClasses.TextFieldViewPort.textFieldViewPort_focusInHandler","feathers/controls/supportClasses/TextFieldViewPort.hx",1043,0xfb8700a9)
namespace feathers{
namespace controls{
namespace supportClasses{

void TextFieldViewPort_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_36_new)
HXLINE( 686)		this->_ignoreTextFieldScroll = false;
HXLINE( 684)		this->_textFieldHasFocus = false;
HXLINE( 669)		this->_pendingSelectionActiveIndex = -1;
HXLINE( 651)		this->_pendingSelectionAnchorIndex = -1;
HXLINE( 631)		this->_scrollY = ((Float)0.0);
HXLINE( 611)		this->_scrollX = ((Float)0.0);
HXLINE( 586)		this->_explicitVisibleHeight = null();
HXLINE( 585)		this->_actualVisibleHeight = ((Float)0.0);
HXLINE( 558)		this->_maxVisibleHeight = ::hx::DivByZero(((Float)1.0));
HXLINE( 524)		this->_actualMinVisibleHeight = ((Float)0.0);
HXLINE( 499)		this->_explicitVisibleWidth = null();
HXLINE( 498)		this->_actualVisibleWidth = ((Float)0.0);
HXLINE( 471)		this->_maxVisibleWidth = ::hx::DivByZero(((Float)1.0));
HXLINE( 438)		this->_explicitMinVisibleWidth = null();
HXLINE( 437)		this->_actualMinVisibleWidth = ((Float)0.0);
HXLINE( 407)		this->_paddingLeft = ((Float)0.0);
HXLINE( 384)		this->_paddingBottom = ((Float)0.0);
HXLINE( 361)		this->_paddingRight = ((Float)0.0);
HXLINE( 338)		this->_paddingTop = ((Float)0.0);
HXLINE( 316)		this->_embedFonts = false;
HXLINE( 290)		this->_savedLineMetrics = null();
HXLINE( 289)		this->_previousWidth = null();
HXLINE( 288)		this->_previousTextFormat = null();
HXLINE( 287)		this->_previousText = null();
HXLINE( 286)		this->_updatedTextStyles = false;
HXLINE( 264)		this->_smoothScrolling = false;
HXLINE( 242)		this->_selectable = true;
HXLINE( 220)		this->_maxChars = 0;
HXLINE( 198)		this->_displayAsPassword = false;
HXLINE( 153)		this->_multiline = false;
HXLINE( 130)		this->_wordWrap = false;
HXLINE(  61)		this->_textFieldType = 0;
HXLINE(  43)		super::__construct();
HXLINE(  45)		this->addEventListener(HX_("focusIn",dd,45,83,41),this->textFieldViewPort_focusInHandler_dyn(),null(),null(),null());
            	}

Dynamic TextFieldViewPort_obj::__CreateEmpty() { return new TextFieldViewPort_obj; }

void *TextFieldViewPort_obj::_hx_vtable = 0;

Dynamic TextFieldViewPort_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextFieldViewPort_obj > _hx_result = new TextFieldViewPort_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextFieldViewPort_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4033f4be) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4033f4be;
		}
	} else {
		if (inClassId<=(int)0x65e82fb6) {
			if (inClassId<=(int)0x58123034) {
				return inClassId==(int)0x4af7dd8e || inClassId==(int)0x58123034;
			} else {
				return inClassId==(int)0x65e82fb6;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

static ::feathers::core::IStageFocusDelegate_obj _hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IStageFocusDelegate= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::TextFieldViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_focusEnabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_focusEnabled,
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_focusOwner,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_focusOwner,
	( void (::hx::Object::*)(bool))&::feathers::controls::supportClasses::TextFieldViewPort_obj::showFocus,
	(  ::openfl::display::InteractiveObject (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_stageFocusTarget,
};

static ::feathers::controls::supportClasses::IViewPort_obj _hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_controls_supportClasses_IViewPort= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::TextFieldViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_visible,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_explicitWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_explicitHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_explicitMinWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_explicitMinHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_explicitMaxWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_explicitMaxHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_minWidth,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_minWidth,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_minHeight,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_minHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_maxWidth,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_maxWidth,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_maxHeight,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_maxHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::resetWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::resetHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::resetMinWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::resetMinHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::resetMaxWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::resetMaxHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_visibleWidth,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_visibleWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_visibleHeight,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_visibleHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_minVisibleWidth,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_minVisibleWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_minVisibleHeight,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_minVisibleHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_maxVisibleWidth,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_maxVisibleWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_maxVisibleHeight,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_maxVisibleHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scrollX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scrollX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scrollY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scrollY,
};

static ::openfl::events::IEventDispatcher_obj _hx_feathers_controls_supportClasses_TextFieldViewPort__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::TextFieldViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::willTrigger,
};

static ::feathers::core::ITextControl_obj _hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_ITextControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::TextFieldViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_enabled,
	( ::String (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_toolTip,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_toolTip,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::initializeNow,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::dispose,
	( ::String (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_text,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_text,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_baseline,
};

static ::feathers::core::IMeasureObject_obj _hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IMeasureObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::TextFieldViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_visible,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_explicitWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_explicitHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_explicitMinWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_explicitMinHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_explicitMaxWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_explicitMaxHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_minWidth,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_minWidth,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_minHeight,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_minHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_maxWidth,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_maxWidth,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_maxHeight,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_maxHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::resetWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::resetHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::resetMinWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::resetMinHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::resetMaxWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::resetMaxHeight,
};

static ::feathers::core::IValidating_obj _hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IValidating= {
	( int (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_depth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::validateNow,
};

static ::feathers::core::IFocusObject_obj _hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IFocusObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::TextFieldViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_focusEnabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_focusEnabled,
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_focusOwner,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_focusOwner,
	( void (::hx::Object::*)(bool))&::feathers::controls::supportClasses::TextFieldViewPort_obj::showFocus,
};

static ::feathers::core::IFocusManagerAware_obj _hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IFocusManagerAware= {
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_focusManager,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_focusManager,
};

static ::feathers::core::IUIControl_obj _hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IUIControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::TextFieldViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_enabled,
	( ::String (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_toolTip,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_toolTip,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::initializeNow,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::dispose,
};

static ::feathers::core::IDisplayObject_obj _hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IDisplayObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::TextFieldViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::TextFieldViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::TextFieldViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::TextFieldViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::TextFieldViewPort_obj::set_visible,
};

void *TextFieldViewPort_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x4afbe419: return &_hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IStageFocusDelegate;
		case (int)0xd5cd7712: return &_hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_controls_supportClasses_IViewPort;
		case (int)0x87530281: return &_hx_feathers_controls_supportClasses_TextFieldViewPort__hx_openfl_events_IEventDispatcher;
		case (int)0xfccd2876: return &_hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_ITextControl;
		case (int)0xcfc32883: return &_hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IMeasureObject;
		case (int)0x64d4b3cd: return &_hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IValidating;
		case (int)0x701686fd: return &_hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IFocusObject;
		case (int)0x7031642f: return &_hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IFocusManagerAware;
		case (int)0x2696a04f: return &_hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IUIControl;
		case (int)0x3a979a67: return &_hx_feathers_controls_supportClasses_TextFieldViewPort__hx_feathers_core_IDisplayObject;
	}
	return super::_hx_getInterface(inHash);
}

 ::openfl::text::TextField TextFieldViewPort_obj::get_textField(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_58_get_textField)
HXDLIN(  58)		return this->_textField;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_textField,return )

 ::Dynamic TextFieldViewPort_obj::get_textFieldType(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_73_get_textFieldType)
HXDLIN(  73)		return this->_textFieldType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_textFieldType,return )

 ::Dynamic TextFieldViewPort_obj::set_textFieldType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_76_set_textFieldType)
HXLINE(  77)		if (::hx::IsEq( this->_textFieldType,value )) {
HXLINE(  78)			return this->_textFieldType;
            		}
HXLINE(  80)		this->_textFieldType = value;
HXLINE(  81)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE(  82)		return this->_textFieldType;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_textFieldType,return )

::String TextFieldViewPort_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_96_get_text)
HXDLIN(  96)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_text,return )

::String TextFieldViewPort_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_99_set_text)
HXLINE( 100)		if ((this->_text == value)) {
HXLINE( 101)			return this->_text;
            		}
HXLINE( 103)		this->_text = value;
HXLINE( 104)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 105)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 106)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_text,return )

Float TextFieldViewPort_obj::get_baseline(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_114_get_baseline)
HXLINE( 115)		if (::hx::IsNull( this->_textField )) {
HXLINE( 116)			return ((Float)0.0);
            		}
HXLINE( 120)		bool hasText;
HXDLIN( 120)		if (::hx::IsNotNull( this->_text )) {
HXLINE( 120)			hasText = (this->_text.length > 0);
            		}
            		else {
HXLINE( 120)			hasText = false;
            		}
HXLINE( 121)		if (!(hasText)) {
HXLINE( 122)			this->get_textField()->set_text(HX_W(u"\u200b",ed6d,00ab));
HXLINE( 123)			Float result = this->get_textField()->get_y();
HXDLIN( 123)			Float result1 = (result + this->get_textField()->getLineMetrics(0)->ascent);
HXLINE( 124)			this->get_textField()->set_text(HX_("",00,00,00,00));
HXLINE( 125)			return result1;
            		}
HXLINE( 127)		Float _hx_tmp = this->_textField->get_y();
HXDLIN( 127)		return (_hx_tmp + this->_textField->getLineMetrics(0)->ascent);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_baseline,return )

bool TextFieldViewPort_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_141_get_wordWrap)
HXDLIN( 141)		return this->_wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_wordWrap,return )

bool TextFieldViewPort_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_144_set_wordWrap)
HXLINE( 145)		if ((this->_wordWrap == value)) {
HXLINE( 146)			return this->_wordWrap;
            		}
HXLINE( 148)		this->_wordWrap = value;
HXLINE( 149)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 150)		return this->_wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_wordWrap,return )

bool TextFieldViewPort_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_163_get_multiline)
HXDLIN( 163)		return this->_multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_multiline,return )

bool TextFieldViewPort_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_166_set_multiline)
HXLINE( 167)		if ((this->_multiline == value)) {
HXLINE( 168)			return this->_multiline;
            		}
HXLINE( 170)		this->_multiline = value;
HXLINE( 171)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 172)		return this->_multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_multiline,return )

::String TextFieldViewPort_obj::get_restrict(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_186_get_restrict)
HXDLIN( 186)		return this->_hx___restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_restrict,return )

::String TextFieldViewPort_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_189_set_restrict)
HXLINE( 190)		if ((this->_hx___restrict == value)) {
HXLINE( 191)			return this->_hx___restrict;
            		}
HXLINE( 193)		this->_hx___restrict = value;
HXLINE( 194)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 195)		return this->_hx___restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_restrict,return )

bool TextFieldViewPort_obj::get_displayAsPassword(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_208_get_displayAsPassword)
HXDLIN( 208)		return this->_displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_displayAsPassword,return )

bool TextFieldViewPort_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_211_set_displayAsPassword)
HXLINE( 212)		if ((this->_displayAsPassword == value)) {
HXLINE( 213)			return this->_displayAsPassword;
            		}
HXLINE( 215)		this->_displayAsPassword = value;
HXLINE( 216)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 217)		return this->_displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_displayAsPassword,return )

int TextFieldViewPort_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_230_get_maxChars)
HXDLIN( 230)		return this->_maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_maxChars,return )

int TextFieldViewPort_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_233_set_maxChars)
HXLINE( 234)		if ((this->_maxChars == value)) {
HXLINE( 235)			return this->_maxChars;
            		}
HXLINE( 237)		this->_maxChars = value;
HXLINE( 238)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 239)		return this->_maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_maxChars,return )

bool TextFieldViewPort_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_252_get_selectable)
HXDLIN( 252)		return this->_selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_selectable,return )

bool TextFieldViewPort_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_255_set_selectable)
HXLINE( 256)		if ((this->_selectable == value)) {
HXLINE( 257)			return this->_selectable;
            		}
HXLINE( 259)		this->_selectable = value;
HXLINE( 260)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 261)		return this->_selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_selectable,return )

bool TextFieldViewPort_obj::get_smoothScrolling(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_274_get_smoothScrolling)
HXDLIN( 274)		return this->_smoothScrolling;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_smoothScrolling,return )

bool TextFieldViewPort_obj::set_smoothScrolling(bool value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_277_set_smoothScrolling)
HXLINE( 278)		if ((this->_smoothScrolling == value)) {
HXLINE( 279)			return this->_smoothScrolling;
            		}
HXLINE( 281)		this->_smoothScrolling = value;
HXLINE( 282)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 283)		return this->_smoothScrolling;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_smoothScrolling,return )

 ::openfl::text::TextFormat TextFieldViewPort_obj::get_textFormat(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_304_get_textFormat)
HXDLIN( 304)		return this->_textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_textFormat,return )

 ::openfl::text::TextFormat TextFieldViewPort_obj::set_textFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_307_set_textFormat)
HXLINE( 308)		if (::hx::IsInstanceEq( this->_textFormat,value )) {
HXLINE( 309)			return this->_textFormat;
            		}
HXLINE( 311)		this->_textFormat = value;
HXLINE( 312)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 313)		return this->_textFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_textFormat,return )

bool TextFieldViewPort_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_326_get_embedFonts)
HXDLIN( 326)		return this->_embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_embedFonts,return )

bool TextFieldViewPort_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_329_set_embedFonts)
HXLINE( 330)		if ((this->_embedFonts == value)) {
HXLINE( 331)			return this->_embedFonts;
            		}
HXLINE( 333)		this->_embedFonts = value;
HXLINE( 334)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 335)		return this->_embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_embedFonts,return )

Float TextFieldViewPort_obj::get_paddingTop(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_349_get_paddingTop)
HXDLIN( 349)		return this->_paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_paddingTop,return )

Float TextFieldViewPort_obj::set_paddingTop(Float value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_352_set_paddingTop)
HXLINE( 353)		if ((this->_paddingTop == value)) {
HXLINE( 354)			return this->_paddingTop;
            		}
HXLINE( 356)		this->_paddingTop = value;
HXLINE( 357)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 358)		return this->_paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_paddingTop,return )

Float TextFieldViewPort_obj::get_paddingRight(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_372_get_paddingRight)
HXDLIN( 372)		return this->_paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_paddingRight,return )

Float TextFieldViewPort_obj::set_paddingRight(Float value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_375_set_paddingRight)
HXLINE( 376)		if ((this->_paddingRight == value)) {
HXLINE( 377)			return this->_paddingRight;
            		}
HXLINE( 379)		this->_paddingRight = value;
HXLINE( 380)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 381)		return this->_paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_paddingRight,return )

Float TextFieldViewPort_obj::get_paddingBottom(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_395_get_paddingBottom)
HXDLIN( 395)		return this->_paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_paddingBottom,return )

Float TextFieldViewPort_obj::set_paddingBottom(Float value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_398_set_paddingBottom)
HXLINE( 399)		if ((this->_paddingBottom == value)) {
HXLINE( 400)			return this->_paddingBottom;
            		}
HXLINE( 402)		this->_paddingBottom = value;
HXLINE( 403)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 404)		return this->_paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_paddingBottom,return )

Float TextFieldViewPort_obj::get_paddingLeft(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_418_get_paddingLeft)
HXDLIN( 418)		return this->_paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_paddingLeft,return )

Float TextFieldViewPort_obj::set_paddingLeft(Float value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_421_set_paddingLeft)
HXLINE( 422)		if ((this->_paddingLeft == value)) {
HXLINE( 423)			return this->_paddingLeft;
            		}
HXLINE( 425)		this->_paddingLeft = value;
HXLINE( 426)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 427)		return this->_paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_paddingLeft,return )

 ::openfl::display::InteractiveObject TextFieldViewPort_obj::get_stageFocusTarget(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_434_get_stageFocusTarget)
HXDLIN( 434)		return this->_textField;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_stageFocusTarget,return )

 ::Dynamic TextFieldViewPort_obj::get_minVisibleWidth(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_445_get_minVisibleWidth)
HXLINE( 446)		if (::hx::IsNull( this->_explicitMinVisibleWidth )) {
HXLINE( 447)			return this->_actualMinVisibleWidth;
            		}
HXLINE( 449)		return this->_explicitMinVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_minVisibleWidth,return )

 ::Dynamic TextFieldViewPort_obj::set_minVisibleWidth( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_452_set_minVisibleWidth)
HXLINE( 453)		if (::hx::IsEq( this->_explicitMinVisibleWidth,value )) {
HXLINE( 454)			return this->_explicitMinVisibleWidth;
            		}
HXLINE( 456)		 ::Dynamic oldValue = this->_explicitMinVisibleWidth;
HXLINE( 457)		this->_explicitMinVisibleWidth = value;
HXLINE( 458)		if (::hx::IsNull( value )) {
HXLINE( 459)			this->_actualMinVisibleWidth = ((Float)0.0);
HXLINE( 460)			this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            		}
            		else {
HXLINE( 462)			this->_actualMinVisibleWidth = ( (Float)(value) );
HXLINE( 463)			bool _hx_tmp;
HXDLIN( 463)			if (::hx::IsNull( this->_explicitVisibleWidth )) {
HXLINE( 463)				if (!(::hx::IsLess( this->_actualVisibleWidth,value ))) {
HXLINE( 463)					_hx_tmp = ::hx::IsEq( this->_actualVisibleWidth,oldValue );
            				}
            				else {
HXLINE( 463)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 463)				_hx_tmp = false;
            			}
HXDLIN( 463)			if (_hx_tmp) {
HXLINE( 465)				this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            			}
            		}
HXLINE( 468)		return this->_explicitMinVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_minVisibleWidth,return )

 ::Dynamic TextFieldViewPort_obj::get_maxVisibleWidth(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_479_get_maxVisibleWidth)
HXDLIN( 479)		return this->_maxVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_maxVisibleWidth,return )

 ::Dynamic TextFieldViewPort_obj::set_maxVisibleWidth( ::Dynamic value){
            	HX_GC_STACKFRAME(&_hx_pos_d7274d7260c28208_482_set_maxVisibleWidth)
HXLINE( 483)		if (::hx::IsEq( this->_maxVisibleWidth,value )) {
HXLINE( 484)			return this->_maxVisibleWidth;
            		}
HXLINE( 486)		if (::hx::IsNull( value )) {
HXLINE( 487)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("maxVisibleWidth cannot be null",0f,a6,fe,b9)));
            		}
HXLINE( 489)		 ::Dynamic oldValue = this->_maxVisibleWidth;
HXLINE( 490)		this->_maxVisibleWidth = value;
HXLINE( 491)		bool _hx_tmp;
HXDLIN( 491)		if (::hx::IsNull( this->_explicitVisibleWidth )) {
HXLINE( 491)			if (!(::hx::IsGreater( this->_actualVisibleWidth,value ))) {
HXLINE( 491)				_hx_tmp = ::hx::IsEq( this->_actualVisibleWidth,oldValue );
            			}
            			else {
HXLINE( 491)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 491)			_hx_tmp = false;
            		}
HXDLIN( 491)		if (_hx_tmp) {
HXLINE( 493)			this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            		}
HXLINE( 495)		return this->_maxVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_maxVisibleWidth,return )

 ::Dynamic TextFieldViewPort_obj::get_visibleWidth(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_506_get_visibleWidth)
HXLINE( 507)		if (::hx::IsNull( this->_explicitVisibleWidth )) {
HXLINE( 508)			return this->_actualVisibleWidth;
            		}
HXLINE( 510)		return this->_explicitVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_visibleWidth,return )

 ::Dynamic TextFieldViewPort_obj::set_visibleWidth( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_513_set_visibleWidth)
HXLINE( 514)		if (::hx::IsEq( this->_explicitVisibleWidth,value )) {
HXLINE( 515)			return this->_explicitVisibleWidth;
            		}
HXLINE( 517)		this->_explicitVisibleWidth = value;
HXLINE( 518)		if (::hx::IsNotEq( this->_actualVisibleWidth,value )) {
HXLINE( 519)			this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            		}
HXLINE( 521)		return this->_explicitVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_visibleWidth,return )

 ::Dynamic TextFieldViewPort_obj::get_minVisibleHeight(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_532_get_minVisibleHeight)
HXLINE( 533)		if (::hx::IsNull( this->_explicitMinVisibleHeight )) {
HXLINE( 534)			return this->_actualMinVisibleHeight;
            		}
HXLINE( 536)		return this->_explicitMinVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_minVisibleHeight,return )

 ::Dynamic TextFieldViewPort_obj::set_minVisibleHeight( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_539_set_minVisibleHeight)
HXLINE( 540)		if (::hx::IsEq( this->_explicitMinVisibleHeight,value )) {
HXLINE( 541)			return this->_explicitMinVisibleHeight;
            		}
HXLINE( 543)		 ::Dynamic oldValue = this->_explicitMinVisibleHeight;
HXLINE( 544)		this->_explicitMinVisibleHeight = value;
HXLINE( 545)		if (::hx::IsNull( value )) {
HXLINE( 546)			this->_actualMinVisibleHeight = ((Float)0.0);
HXLINE( 547)			this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            		}
            		else {
HXLINE( 549)			this->_actualMinVisibleHeight = ( (Float)(value) );
HXLINE( 550)			bool _hx_tmp;
HXDLIN( 550)			if (::hx::IsNull( this->_explicitVisibleHeight )) {
HXLINE( 550)				if (!(::hx::IsLess( this->_actualVisibleHeight,value ))) {
HXLINE( 550)					_hx_tmp = ::hx::IsEq( this->_actualVisibleHeight,oldValue );
            				}
            				else {
HXLINE( 550)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 550)				_hx_tmp = false;
            			}
HXDLIN( 550)			if (_hx_tmp) {
HXLINE( 552)				this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            			}
            		}
HXLINE( 555)		return this->_explicitMinVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_minVisibleHeight,return )

 ::Dynamic TextFieldViewPort_obj::get_maxVisibleHeight(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_566_get_maxVisibleHeight)
HXDLIN( 566)		return this->_maxVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_maxVisibleHeight,return )

 ::Dynamic TextFieldViewPort_obj::set_maxVisibleHeight( ::Dynamic value){
            	HX_GC_STACKFRAME(&_hx_pos_d7274d7260c28208_569_set_maxVisibleHeight)
HXLINE( 570)		if (::hx::IsEq( this->_maxVisibleHeight,value )) {
HXLINE( 571)			return this->_maxVisibleHeight;
            		}
HXLINE( 573)		if (::hx::IsNull( value )) {
HXLINE( 574)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("maxVisibleHeight cannot be null",f2,2a,d1,66)));
            		}
HXLINE( 576)		 ::Dynamic oldValue = this->_maxVisibleHeight;
HXLINE( 577)		this->_maxVisibleHeight = value;
HXLINE( 578)		bool _hx_tmp;
HXDLIN( 578)		if (::hx::IsNull( this->_explicitVisibleHeight )) {
HXLINE( 578)			if (!(::hx::IsGreater( this->_actualVisibleHeight,value ))) {
HXLINE( 578)				_hx_tmp = ::hx::IsEq( this->_actualVisibleHeight,oldValue );
            			}
            			else {
HXLINE( 578)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 578)			_hx_tmp = false;
            		}
HXDLIN( 578)		if (_hx_tmp) {
HXLINE( 580)			this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            		}
HXLINE( 582)		return this->_maxVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_maxVisibleHeight,return )

 ::Dynamic TextFieldViewPort_obj::get_visibleHeight(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_593_get_visibleHeight)
HXLINE( 594)		if (::hx::IsNull( this->_explicitVisibleHeight )) {
HXLINE( 595)			return this->_actualVisibleHeight;
            		}
HXLINE( 597)		return this->_explicitVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_visibleHeight,return )

 ::Dynamic TextFieldViewPort_obj::set_visibleHeight( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_600_set_visibleHeight)
HXLINE( 601)		if (::hx::IsEq( this->_explicitVisibleHeight,value )) {
HXLINE( 602)			return this->_explicitVisibleHeight;
            		}
HXLINE( 604)		this->_explicitVisibleHeight = value;
HXLINE( 605)		if (::hx::IsNotEq( this->_actualVisibleHeight,value )) {
HXLINE( 606)			this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            		}
HXLINE( 608)		return this->_explicitVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_visibleHeight,return )

Float TextFieldViewPort_obj::get_scrollX(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_619_get_scrollX)
HXDLIN( 619)		return this->_scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_scrollX,return )

Float TextFieldViewPort_obj::set_scrollX(Float value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_622_set_scrollX)
HXLINE( 623)		if ((this->_scrollX == value)) {
HXLINE( 624)			return this->_scrollX;
            		}
HXLINE( 626)		this->_scrollX = value;
HXLINE( 627)		this->setInvalid(::feathers::core::InvalidationFlag_obj::SCROLL_dyn());
HXLINE( 628)		return this->_scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_scrollX,return )

Float TextFieldViewPort_obj::get_scrollY(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_639_get_scrollY)
HXDLIN( 639)		return this->_scrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_scrollY,return )

Float TextFieldViewPort_obj::set_scrollY(Float value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_642_set_scrollY)
HXLINE( 643)		if ((this->_scrollY == value)) {
HXLINE( 644)			return this->_scrollY;
            		}
HXLINE( 646)		this->_scrollY = value;
HXLINE( 647)		this->setInvalid(::feathers::core::InvalidationFlag_obj::SCROLL_dyn());
HXLINE( 648)		return this->_scrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,set_scrollY,return )

int TextFieldViewPort_obj::get_selectionAnchorIndex(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_658_get_selectionAnchorIndex)
HXLINE( 659)		bool _hx_tmp;
HXDLIN( 659)		if (::hx::IsNotNull( this->_textField )) {
HXLINE( 659)			_hx_tmp = (this->_pendingSelectionAnchorIndex == -1);
            		}
            		else {
HXLINE( 659)			_hx_tmp = false;
            		}
HXDLIN( 659)		if (_hx_tmp) {
HXLINE( 661)			int _hx_tmp1 = this->_textField->get_caretIndex();
HXDLIN( 661)			if ((_hx_tmp1 == this->_textField->get_selectionBeginIndex())) {
HXLINE( 662)				return this->_textField->get_selectionEndIndex();
            			}
HXLINE( 664)			return this->_textField->get_selectionBeginIndex();
            		}
HXLINE( 666)		return this->_pendingSelectionAnchorIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_selectionAnchorIndex,return )

int TextFieldViewPort_obj::get_selectionActiveIndex(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_676_get_selectionActiveIndex)
HXLINE( 677)		bool _hx_tmp;
HXDLIN( 677)		if (::hx::IsNotNull( this->_textField )) {
HXLINE( 677)			_hx_tmp = (this->_pendingSelectionActiveIndex == -1);
            		}
            		else {
HXLINE( 677)			_hx_tmp = false;
            		}
HXDLIN( 677)		if (_hx_tmp) {
HXLINE( 679)			return this->_textField->get_caretIndex();
            		}
HXLINE( 681)		return this->_pendingSelectionActiveIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,get_selectionActiveIndex,return )

void TextFieldViewPort_obj::setPadding(Float value){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_698_setPadding)
HXLINE( 699)		this->set_paddingTop(value);
HXLINE( 700)		this->set_paddingRight(value);
HXLINE( 701)		this->set_paddingBottom(value);
HXLINE( 702)		this->set_paddingLeft(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,setPadding,(void))

void TextFieldViewPort_obj::selectRange(int anchorIndex,int activeIndex){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_708_selectRange)
HXLINE( 711)		this->_pendingSelectionAnchorIndex = anchorIndex;
HXLINE( 712)		this->_pendingSelectionActiveIndex = activeIndex;
HXLINE( 713)		this->setInvalid(::feathers::core::InvalidationFlag_obj::SELECTION_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextFieldViewPort_obj,selectRange,(void))

void TextFieldViewPort_obj::initialize(){
            	HX_GC_STACKFRAME(&_hx_pos_d7274d7260c28208_716_initialize)
HXLINE( 717)		this->super::initialize();
HXLINE( 719)		if (::hx::IsNull( this->_textField )) {
HXLINE( 720)			this->_textField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 721)			this->addChild(this->_textField);
            		}
HXLINE( 724)		this->_textField->set_selectable(true);
HXLINE( 725)		this->_textField->set_tabEnabled(false);
HXLINE( 726)		this->_textField->set_mouseWheelEnabled(false);
HXLINE( 727)		this->_textField->addEventListener(HX_("change",70,91,72,b7),this->textField_changeHandler_dyn(),null(),null(),null());
HXLINE( 728)		this->_textField->addEventListener(HX_("scroll",0d,d8,64,47),this->textField_scrollHandler_dyn(),null(),null(),null());
HXLINE( 729)		this->_textField->addEventListener(HX_("focusIn",dd,45,83,41),this->textField_focusInHandler_dyn(),null(),null(),null());
HXLINE( 730)		this->_textField->addEventListener(HX_("focusOut",96,6f,5e,11),this->textField_focusOutHandler_dyn(),null(),null(),null());
            	}


void TextFieldViewPort_obj::update(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_733_update)
HXLINE( 734)		bool dataInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 735)		bool selectionInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::SELECTION_dyn());
HXLINE( 736)		bool sizeInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
HXLINE( 737)		bool stylesInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 739)		this->_updatedTextStyles = false;
HXLINE( 741)		bool oldIgnoreTextFieldScroll = this->_ignoreTextFieldScroll;
HXLINE( 742)		this->_ignoreTextFieldScroll = true;
HXLINE( 744)		if (stylesInvalid) {
HXLINE( 745)			this->refreshTextStyles();
            		}
HXLINE( 748)		bool _hx_tmp;
HXDLIN( 748)		bool _hx_tmp1;
HXDLIN( 748)		if (!(dataInvalid)) {
HXLINE( 748)			_hx_tmp1 = sizeInvalid;
            		}
            		else {
HXLINE( 748)			_hx_tmp1 = true;
            		}
HXDLIN( 748)		if (!(_hx_tmp1)) {
HXLINE( 748)			_hx_tmp = stylesInvalid;
            		}
            		else {
HXLINE( 748)			_hx_tmp = true;
            		}
HXDLIN( 748)		if (_hx_tmp) {
HXLINE( 749)			this->refreshText();
            		}
HXLINE( 752)		this->measure();
HXLINE( 754)		if (selectionInvalid) {
HXLINE( 755)			this->refreshSelection();
            		}
HXLINE( 758)		this->layoutTextField();
HXLINE( 760)		this->_ignoreTextFieldScroll = oldIgnoreTextFieldScroll;
            	}


bool TextFieldViewPort_obj::measureSelf(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_763_measureSelf)
HXLINE( 764)		bool needsWidth = ::hx::IsNull( this->_explicitVisibleWidth );
HXLINE( 765)		bool needsHeight = ::hx::IsNull( this->get_explicitHeight() );
HXLINE( 766)		bool needsMinWidth = ::hx::IsNull( this->_explicitMinVisibleWidth );
HXLINE( 767)		bool needsMinHeight = ::hx::IsNull( this->get_explicitMinHeight() );
HXLINE( 768)		bool needsMaxWidth = ::hx::IsNull( this->get_explicitMaxWidth() );
HXLINE( 769)		bool needsMaxHeight = ::hx::IsNull( this->get_explicitMaxHeight() );
HXLINE( 770)		bool _hx_tmp;
HXDLIN( 770)		bool _hx_tmp1;
HXDLIN( 770)		bool _hx_tmp2;
HXDLIN( 770)		bool _hx_tmp3;
HXDLIN( 770)		bool _hx_tmp4;
HXDLIN( 770)		if (!(needsWidth)) {
HXLINE( 770)			_hx_tmp4 = !(needsHeight);
            		}
            		else {
HXLINE( 770)			_hx_tmp4 = false;
            		}
HXDLIN( 770)		if (_hx_tmp4) {
HXLINE( 770)			_hx_tmp3 = !(needsMinWidth);
            		}
            		else {
HXLINE( 770)			_hx_tmp3 = false;
            		}
HXDLIN( 770)		if (_hx_tmp3) {
HXLINE( 770)			_hx_tmp2 = !(needsMinHeight);
            		}
            		else {
HXLINE( 770)			_hx_tmp2 = false;
            		}
HXDLIN( 770)		if (_hx_tmp2) {
HXLINE( 770)			_hx_tmp1 = !(needsMaxWidth);
            		}
            		else {
HXLINE( 770)			_hx_tmp1 = false;
            		}
HXDLIN( 770)		if (_hx_tmp1) {
HXLINE( 770)			_hx_tmp = !(needsMaxHeight);
            		}
            		else {
HXLINE( 770)			_hx_tmp = false;
            		}
HXDLIN( 770)		if (_hx_tmp) {
HXLINE( 771)			return false;
            		}
HXLINE( 774)		 ::Dynamic newWidth = this->_explicitVisibleWidth;
HXLINE( 775)		if (needsWidth) {
HXLINE( 779)			newWidth = (this->_paddingLeft + this->_paddingRight);
            		}
HXLINE( 782)		 ::Dynamic newHeight = this->get_explicitHeight();
HXLINE( 783)		if (needsHeight) {
HXLINE( 784)			newHeight = ((this->_textMeasuredHeight + this->_paddingTop) + this->_paddingBottom);
            		}
HXLINE( 787)		 ::Dynamic newMinWidth = this->_explicitMinVisibleWidth;
HXLINE( 788)		if (needsMinWidth) {
HXLINE( 790)			newMinWidth = (this->_paddingLeft + this->_paddingRight);
            		}
HXLINE( 793)		 ::Dynamic newMinHeight = this->get_explicitMinHeight();
HXLINE( 794)		if (needsMinHeight) {
HXLINE( 795)			newMinHeight = ((this->_textMeasuredHeight + this->_paddingTop) + this->_paddingBottom);
            		}
HXLINE( 797)		 ::Dynamic newMaxWidth = this->get_explicitMaxWidth();
HXLINE( 798)		if (needsMaxWidth) {
HXLINE( 799)			newMaxWidth = ::hx::DivByZero(((Float)1.0));
            		}
HXLINE( 802)		 ::Dynamic newMaxHeight = this->get_explicitMaxHeight();
HXLINE( 803)		if (needsMaxHeight) {
HXLINE( 804)			newMaxHeight = ::hx::DivByZero(((Float)1.0));
            		}
HXLINE( 807)		return this->saveMeasurements(( (Float)(newWidth) ),( (Float)(newHeight) ),newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,measureSelf,return )

bool TextFieldViewPort_obj::measure(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_810_measure)
HXLINE( 811)		bool result = this->measureSelf();
HXLINE( 813)		bool needsVisibleWidth = ::hx::IsNull( this->_explicitVisibleWidth );
HXLINE( 814)		bool needsVisibleHeight = ::hx::IsNull( this->_explicitVisibleHeight );
HXLINE( 815)		bool needsVisibleMinWidth = ::hx::IsNull( this->_explicitMinVisibleWidth );
HXLINE( 816)		bool needsVisibleMinHeight = ::hx::IsNull( this->_explicitMinVisibleHeight );
HXLINE( 818)		if (needsVisibleWidth) {
HXLINE( 819)			this->_actualVisibleWidth = this->actualWidth;
            		}
            		else {
HXLINE( 821)			this->_actualVisibleWidth = ( (Float)(this->_explicitVisibleWidth) );
            		}
HXLINE( 824)		if (needsVisibleHeight) {
HXLINE( 825)			this->_actualVisibleHeight = this->actualHeight;
            		}
            		else {
HXLINE( 827)			this->_actualVisibleHeight = ( (Float)(this->_explicitVisibleHeight) );
            		}
HXLINE( 830)		if (needsVisibleMinWidth) {
HXLINE( 831)			this->_actualMinVisibleWidth = this->actualMinWidth;
            		}
            		else {
HXLINE( 833)			this->_actualMinVisibleWidth = ( (Float)(this->_explicitMinVisibleWidth) );
            		}
HXLINE( 836)		if (needsVisibleMinHeight) {
HXLINE( 837)			this->_actualMinVisibleHeight = this->actualMinHeight;
            		}
            		else {
HXLINE( 839)			this->_actualMinVisibleHeight = ( (Float)(this->_explicitMinVisibleHeight) );
            		}
HXLINE( 842)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,measure,return )

void TextFieldViewPort_obj::refreshTextStyles(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_845_refreshTextStyles)
HXLINE( 846)		bool _hx_tmp = this->_textField->get_embedFonts();
HXDLIN( 846)		if ((_hx_tmp != this->_embedFonts)) {
HXLINE( 847)			this->_textField->set_embedFonts(this->_embedFonts);
HXLINE( 848)			this->_updatedTextStyles = true;
            		}
HXLINE( 850)		if (::hx::IsInstanceNotEq( this->_textFormat,this->_previousTextFormat )) {
HXLINE( 851)			this->_textField->set_defaultTextFormat(this->_textFormat);
HXLINE( 852)			this->_updatedTextStyles = true;
HXLINE( 853)			this->_previousTextFormat = this->_textFormat;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,refreshTextStyles,(void))

void TextFieldViewPort_obj::refreshText(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_857_refreshText)
HXLINE( 858)		 ::Dynamic textFieldType;
HXDLIN( 858)		if (this->_enabled) {
HXLINE( 858)			textFieldType = this->_textFieldType;
            		}
            		else {
HXLINE( 858)			textFieldType = 0;
            		}
HXLINE( 859)		if (::hx::IsNotEq( this->_textField->get_type(),textFieldType )) {
HXLINE( 860)			this->_textField->set_type(textFieldType);
            		}
HXLINE( 862)		bool calculatedWordWrap;
HXDLIN( 862)		if (::hx::IsNotNull( this->_explicitVisibleWidth )) {
HXLINE( 862)			calculatedWordWrap = this->_wordWrap;
            		}
            		else {
HXLINE( 862)			calculatedWordWrap = false;
            		}
HXLINE( 863)		if ((this->_textField->get_wordWrap() != calculatedWordWrap)) {
HXLINE( 864)			this->_textField->set_wordWrap(calculatedWordWrap);
HXLINE( 865)			this->_updatedTextStyles = true;
            		}
HXLINE( 867)		bool _hx_tmp = this->_textField->get_multiline();
HXDLIN( 867)		if ((_hx_tmp != this->_multiline)) {
HXLINE( 868)			this->_textField->set_multiline(this->_multiline);
HXLINE( 869)			this->_updatedTextStyles = true;
            		}
HXLINE( 871)		this->_textField->set_restrict(this->_hx___restrict);
HXLINE( 872)		this->_textField->set_displayAsPassword(this->_displayAsPassword);
HXLINE( 873)		this->_textField->set_maxChars(this->_maxChars);
HXLINE( 874)		this->_textField->set_selectable(this->_selectable);
HXLINE( 875)		 ::Dynamic calculatedWidth = this->_explicitVisibleWidth;
HXLINE( 876)		if (::hx::IsNotNull( calculatedWidth )) {
HXLINE( 877)			calculatedWidth = (calculatedWidth - (this->_paddingLeft + this->_paddingRight));
            		}
HXLINE( 879)		bool _hx_tmp1;
HXDLIN( 879)		bool _hx_tmp2;
HXDLIN( 879)		if ((this->_text == this->_previousText)) {
HXLINE( 879)			_hx_tmp2 = !(this->_updatedTextStyles);
            		}
            		else {
HXLINE( 879)			_hx_tmp2 = false;
            		}
HXDLIN( 879)		if (_hx_tmp2) {
HXLINE( 879)			_hx_tmp1 = ::hx::IsEq( calculatedWidth,this->_previousWidth );
            		}
            		else {
HXLINE( 879)			_hx_tmp1 = false;
            		}
HXDLIN( 879)		if (_hx_tmp1) {
HXLINE( 881)			return;
            		}
HXLINE( 883)		if (::hx::IsNotNull( calculatedWidth )) {
HXLINE( 884)			this->_textField->set_width(( (Float)(calculatedWidth) ));
            		}
HXLINE( 888)		this->_textField->set_autoSize(1);
HXLINE( 891)		bool hasText;
HXDLIN( 891)		if (::hx::IsNotNull( this->_text )) {
HXLINE( 891)			hasText = (this->_text.length > 0);
            		}
            		else {
HXLINE( 891)			hasText = false;
            		}
HXLINE( 892)		if (hasText) {
HXLINE( 893)			this->_textField->set_text(this->_text);
            		}
            		else {
HXLINE( 895)			this->_textField->set_text(HX_W(u"\u200b",ed6d,00ab));
            		}
HXLINE( 897)		this->_savedLineMetrics = this->_textField->getLineMetrics(0);
HXLINE( 898)		this->_textMeasuredWidth = this->_textField->get_width();
HXLINE( 899)		Float _hx_tmp3 = (this->_savedLineMetrics->height + this->_savedLineMetrics->leading);
HXDLIN( 899)		this->_textMeasuredHeight = (4 + (_hx_tmp3 * ( (Float)(this->_textField->get_numLines()) )));
HXLINE( 900)		this->_textField->set_autoSize(2);
HXLINE( 901)		if (!(hasText)) {
HXLINE( 902)			this->_textField->set_text(HX_("",00,00,00,00));
            		}
HXLINE( 904)		this->_previousText = this->_text;
HXLINE( 905)		this->_previousWidth = calculatedWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,refreshText,(void))

void TextFieldViewPort_obj::refreshSelection(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_908_refreshSelection)
HXLINE( 909)		bool _hx_tmp;
HXDLIN( 909)		if ((this->_pendingSelectionActiveIndex == -1)) {
HXLINE( 909)			_hx_tmp = (this->_pendingSelectionAnchorIndex == -1);
            		}
            		else {
HXLINE( 909)			_hx_tmp = false;
            		}
HXDLIN( 909)		if (_hx_tmp) {
HXLINE( 910)			return;
            		}
HXLINE( 912)		int anchorIndex = this->_pendingSelectionAnchorIndex;
HXLINE( 913)		int activeIndex = this->_pendingSelectionActiveIndex;
HXLINE( 914)		this->_pendingSelectionAnchorIndex = -1;
HXLINE( 915)		this->_pendingSelectionActiveIndex = -1;
HXLINE( 916)		this->_textField->setSelection(anchorIndex,activeIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,refreshSelection,(void))

void TextFieldViewPort_obj::layoutTextField(){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_920_layoutTextField)
HXDLIN( 920)		if (this->_smoothScrolling) {
HXLINE( 921)			this->_textField->set_x(this->_paddingLeft);
HXLINE( 922)			this->_textField->set_y(this->_paddingTop);
HXLINE( 923)			Float calculatedWidth = ::Math_obj::max(this->actualWidth,this->_actualVisibleWidth);
HXLINE( 924)			Float calculatedHeight = ::Math_obj::max(this->actualHeight,this->_actualVisibleHeight);
HXLINE( 925)			this->_textField->set_width(((calculatedWidth - this->_paddingLeft) - this->_paddingRight));
HXLINE( 926)			this->_textField->set_height(((calculatedHeight - this->_paddingTop) - this->_paddingBottom));
HXLINE( 927)			this->_textField->set_scrollV(1);
            		}
            		else {
HXLINE( 929)			this->_textField->set_x((this->_paddingLeft + this->_scrollX));
HXLINE( 930)			this->_textField->set_y((this->_paddingTop + this->_scrollY));
HXLINE( 931)			this->_textField->set_width(((this->_actualVisibleWidth - this->_paddingLeft) - this->_paddingRight));
HXLINE( 932)			this->_textField->set_height(((this->_actualVisibleHeight - this->_paddingTop) - this->_paddingBottom));
HXLINE( 935)			Float textFieldHeight = this->_textField->get_textHeight();
HXLINE( 936)			Float maxScrollX = ::Math_obj::max(((Float)0.0),(this->actualWidth - this->_actualVisibleWidth));
HXLINE( 937)			Float maxScrollY = ::Math_obj::max(((Float)0.0),(this->actualHeight - this->_actualVisibleHeight));
HXLINE( 938)			bool _hx_tmp;
HXDLIN( 938)			if ((this->_textField->get_maxScrollV() != 1)) {
HXLINE( 938)				_hx_tmp = (maxScrollY == ((Float)0.0));
            			}
            			else {
HXLINE( 938)				_hx_tmp = true;
            			}
HXDLIN( 938)			if (_hx_tmp) {
HXLINE( 939)				this->_textField->set_scrollV(1);
            			}
            			else {
HXLINE( 941)				this->_textField->set_scrollV((1 + ::Math_obj::ceil((this->_scrollY / (this->_savedLineMetrics->height + this->_savedLineMetrics->leading)))));
            			}
HXLINE( 943)			bool _hx_tmp1;
HXDLIN( 943)			if ((this->_textField->get_maxScrollH() != 0)) {
HXLINE( 943)				_hx_tmp1 = (maxScrollX == ((Float)0.0));
            			}
            			else {
HXLINE( 943)				_hx_tmp1 = true;
            			}
HXDLIN( 943)			if (_hx_tmp1) {
HXLINE( 944)				this->_textField->set_scrollH(0);
            			}
            			else {
HXLINE( 946)				 ::openfl::text::TextField _hx_tmp2 = this->_textField;
HXDLIN( 946)				int _hx_tmp3 = this->_textField->get_maxScrollH();
HXDLIN( 946)				_hx_tmp2->set_scrollH(::Math_obj::round((( (Float)(_hx_tmp3) ) * (this->_scrollX / maxScrollX))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextFieldViewPort_obj,layoutTextField,(void))

void TextFieldViewPort_obj::textField_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_951_textField_changeHandler)
HXLINE( 954)		event->stopPropagation();
HXLINE( 958)		this->set_text(this->_textField->get_text());
HXLINE( 960)		if (this->_textFieldHasFocus) {
HXLINE( 966)			 ::feathers::controls::supportClasses::BaseScrollContainer container = ::hx::TCast<  ::feathers::controls::supportClasses::BaseScrollContainer >::cast(this->parent);
HXLINE( 967)			container->validateNow();
HXLINE( 969)			if ((container->get_maxScrollY() > ((Float)0.0))) {
HXLINE( 970)				int lineIndex = -1;
HXLINE( 971)				int caretIndex = this->_textField->get_caretIndex();
HXLINE( 972)				if ((caretIndex == this->_textField->get_length())) {
HXLINE( 973)					if ((caretIndex == 0)) {
HXLINE( 975)						return;
            					}
HXLINE( 979)					caretIndex = (caretIndex - 1);
HXLINE( 980)					lineIndex = this->_textField->getLineIndexOfChar(caretIndex);
HXLINE( 981)					::String charAtIndex = this->_textField->get_text().charAt(caretIndex);
HXLINE( 982)					bool _hx_tmp;
HXDLIN( 982)					if ((charAtIndex != HX_("\n",0a,00,00,00))) {
HXLINE( 982)						_hx_tmp = (charAtIndex == HX_("\r",0d,00,00,00));
            					}
            					else {
HXLINE( 982)						_hx_tmp = true;
            					}
HXDLIN( 982)					if (_hx_tmp) {
HXLINE( 984)						lineIndex = (lineIndex + 1);
            					}
            				}
            				else {
HXLINE( 987)					lineIndex = this->_textField->getLineIndexOfChar(caretIndex);
            				}
HXLINE( 989)				if (this->_smoothScrolling) {
HXLINE( 990)					Float lineHeight = (this->_savedLineMetrics->height + this->_savedLineMetrics->leading);
HXLINE( 991)					Float minScrollYForLine = container->get_maxScrollY();
HXDLIN( 991)					Float minScrollYForLine1 = (minScrollYForLine - (( (Float)(((this->_textField->get_numLines() - lineIndex) - 1)) ) * lineHeight));
HXLINE( 992)					int maxScrollYForLine = this->_textField->get_numLines();
HXDLIN( 992)					Float maxScrollYForLine1 = (minScrollYForLine1 + (( (Float)((maxScrollYForLine - ::Math_obj::floor((( (Float)(this->get_visibleHeight()) ) / lineHeight)))) ) * lineHeight));
HXLINE( 994)					Float targetScrollY = this->_scrollY;
HXLINE( 995)					if (((minScrollYForLine1 - targetScrollY) > ((Float)0.0))) {
HXLINE( 996)						targetScrollY = minScrollYForLine1;
            					}
            					else {
HXLINE( 997)						if (((targetScrollY - maxScrollYForLine1) > ((Float)0.0))) {
HXLINE( 998)							targetScrollY = maxScrollYForLine1;
            						}
            					}
HXLINE(1001)					container->set_scrollY(targetScrollY);
            				}
            				else {
HXLINE(1002)					if ((this->_textField->get_maxScrollV() > 1)) {
HXLINE(1003)						int minScrollVForLine = this->_textField->get_maxScrollV();
HXDLIN(1003)						int minScrollVForLine1 = (minScrollVForLine - ((this->_textField->get_numLines() - lineIndex) - 1));
HXLINE(1004)						int maxScrollVForLine = this->_textField->get_numLines();
HXDLIN(1004)						int maxScrollVForLine1 = (minScrollVForLine1 + (maxScrollVForLine - this->_textField->get_maxScrollV()));
HXLINE(1005)						if ((maxScrollVForLine1 > this->_textField->get_maxScrollV())) {
HXLINE(1006)							maxScrollVForLine1 = this->_textField->get_maxScrollV();
            						}
HXLINE(1009)						int targetScrollV = this->_textField->get_scrollV();
HXLINE(1010)						if (((minScrollVForLine1 - targetScrollV) > 0)) {
HXLINE(1011)							targetScrollV = minScrollVForLine1;
            						}
            						else {
HXLINE(1012)							if (((targetScrollV - maxScrollVForLine1) > 0)) {
HXLINE(1013)								targetScrollV = maxScrollVForLine1;
            							}
            						}
HXLINE(1016)						if ((targetScrollV != this->_textField->get_scrollV())) {
HXLINE(1017)							container->set_scrollY((( (Float)((targetScrollV - 1)) ) * (this->_savedLineMetrics->height + this->_savedLineMetrics->leading)));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,textField_changeHandler,(void))

void TextFieldViewPort_obj::textField_focusInHandler( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_1025_textField_focusInHandler)
HXDLIN(1025)		this->_textFieldHasFocus = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,textField_focusInHandler,(void))

void TextFieldViewPort_obj::textField_focusOutHandler( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_1029_textField_focusOutHandler)
HXDLIN(1029)		this->_textFieldHasFocus = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,textField_focusOutHandler,(void))

void TextFieldViewPort_obj::textField_scrollHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_1032_textField_scrollHandler)
HXLINE(1033)		bool _hx_tmp;
HXDLIN(1033)		if (!(this->_ignoreTextFieldScroll)) {
HXLINE(1033)			_hx_tmp = this->_smoothScrolling;
            		}
            		else {
HXLINE(1033)			_hx_tmp = true;
            		}
HXDLIN(1033)		if (_hx_tmp) {
HXLINE(1034)			return;
            		}
HXLINE(1036)		 ::feathers::controls::supportClasses::BaseScrollContainer container = ::hx::TCast<  ::feathers::controls::supportClasses::BaseScrollContainer >::cast(this->parent);
HXLINE(1037)		bool _hx_tmp1;
HXDLIN(1037)		if ((container->get_maxScrollY() > ((Float)0.0))) {
HXLINE(1037)			_hx_tmp1 = (this->_textField->get_maxScrollV() > 1);
            		}
            		else {
HXLINE(1037)			_hx_tmp1 = false;
            		}
HXDLIN(1037)		if (_hx_tmp1) {
HXLINE(1038)			int _hx_tmp2 = (this->_textField->get_scrollV() - 1);
HXDLIN(1038)			container->set_scrollY((( (Float)(_hx_tmp2) ) * (this->_savedLineMetrics->height + this->_savedLineMetrics->leading)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,textField_scrollHandler,(void))

void TextFieldViewPort_obj::textFieldViewPort_focusInHandler( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d7274d7260c28208_1043_textFieldViewPort_focusInHandler)
HXDLIN(1043)		bool _hx_tmp;
HXDLIN(1043)		if (::hx::IsNotNull( this->stage )) {
HXDLIN(1043)			 ::openfl::display::InteractiveObject _hx_tmp1 = this->stage->get_focus();
HXDLIN(1043)			_hx_tmp = ::hx::IsInstanceNotEq( _hx_tmp1,this->_textField );
            		}
            		else {
HXDLIN(1043)			_hx_tmp = false;
            		}
HXDLIN(1043)		if (_hx_tmp) {
HXLINE(1044)			event->stopImmediatePropagation();
HXLINE(1045)			this->stage->set_focus(this->_textField);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextFieldViewPort_obj,textFieldViewPort_focusInHandler,(void))


::hx::ObjectPtr< TextFieldViewPort_obj > TextFieldViewPort_obj::__new() {
	::hx::ObjectPtr< TextFieldViewPort_obj > __this = new TextFieldViewPort_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TextFieldViewPort_obj > TextFieldViewPort_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TextFieldViewPort_obj *__this = (TextFieldViewPort_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextFieldViewPort_obj), true, "feathers.controls.supportClasses.TextFieldViewPort"));
	*(void **)__this = TextFieldViewPort_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextFieldViewPort_obj::TextFieldViewPort_obj()
{
}

void TextFieldViewPort_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextFieldViewPort);
	HX_MARK_MEMBER_NAME(_textField,"_textField");
	HX_MARK_MEMBER_NAME(_textFieldType,"_textFieldType");
	HX_MARK_MEMBER_NAME(_text,"_text");
	HX_MARK_MEMBER_NAME(_wordWrap,"_wordWrap");
	HX_MARK_MEMBER_NAME(_multiline,"_multiline");
	HX_MARK_MEMBER_NAME(_hx___restrict,"__restrict");
	HX_MARK_MEMBER_NAME(_displayAsPassword,"_displayAsPassword");
	HX_MARK_MEMBER_NAME(_maxChars,"_maxChars");
	HX_MARK_MEMBER_NAME(_selectable,"_selectable");
	HX_MARK_MEMBER_NAME(_smoothScrolling,"_smoothScrolling");
	HX_MARK_MEMBER_NAME(_updatedTextStyles,"_updatedTextStyles");
	HX_MARK_MEMBER_NAME(_previousText,"_previousText");
	HX_MARK_MEMBER_NAME(_previousTextFormat,"_previousTextFormat");
	HX_MARK_MEMBER_NAME(_previousWidth,"_previousWidth");
	HX_MARK_MEMBER_NAME(_savedLineMetrics,"_savedLineMetrics");
	HX_MARK_MEMBER_NAME(_textMeasuredWidth,"_textMeasuredWidth");
	HX_MARK_MEMBER_NAME(_textMeasuredHeight,"_textMeasuredHeight");
	HX_MARK_MEMBER_NAME(_textFormat,"_textFormat");
	HX_MARK_MEMBER_NAME(_embedFonts,"_embedFonts");
	HX_MARK_MEMBER_NAME(_paddingTop,"_paddingTop");
	HX_MARK_MEMBER_NAME(_paddingRight,"_paddingRight");
	HX_MARK_MEMBER_NAME(_paddingBottom,"_paddingBottom");
	HX_MARK_MEMBER_NAME(_paddingLeft,"_paddingLeft");
	HX_MARK_MEMBER_NAME(_actualMinVisibleWidth,"_actualMinVisibleWidth");
	HX_MARK_MEMBER_NAME(_explicitMinVisibleWidth,"_explicitMinVisibleWidth");
	HX_MARK_MEMBER_NAME(_maxVisibleWidth,"_maxVisibleWidth");
	HX_MARK_MEMBER_NAME(_actualVisibleWidth,"_actualVisibleWidth");
	HX_MARK_MEMBER_NAME(_explicitVisibleWidth,"_explicitVisibleWidth");
	HX_MARK_MEMBER_NAME(_actualMinVisibleHeight,"_actualMinVisibleHeight");
	HX_MARK_MEMBER_NAME(_explicitMinVisibleHeight,"_explicitMinVisibleHeight");
	HX_MARK_MEMBER_NAME(_maxVisibleHeight,"_maxVisibleHeight");
	HX_MARK_MEMBER_NAME(_actualVisibleHeight,"_actualVisibleHeight");
	HX_MARK_MEMBER_NAME(_explicitVisibleHeight,"_explicitVisibleHeight");
	HX_MARK_MEMBER_NAME(_scrollX,"_scrollX");
	HX_MARK_MEMBER_NAME(_scrollY,"_scrollY");
	HX_MARK_MEMBER_NAME(_pendingSelectionAnchorIndex,"_pendingSelectionAnchorIndex");
	HX_MARK_MEMBER_NAME(_pendingSelectionActiveIndex,"_pendingSelectionActiveIndex");
	HX_MARK_MEMBER_NAME(_textFieldHasFocus,"_textFieldHasFocus");
	HX_MARK_MEMBER_NAME(_ignoreTextFieldScroll,"_ignoreTextFieldScroll");
	 ::feathers::core::FeathersControl_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextFieldViewPort_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_textField,"_textField");
	HX_VISIT_MEMBER_NAME(_textFieldType,"_textFieldType");
	HX_VISIT_MEMBER_NAME(_text,"_text");
	HX_VISIT_MEMBER_NAME(_wordWrap,"_wordWrap");
	HX_VISIT_MEMBER_NAME(_multiline,"_multiline");
	HX_VISIT_MEMBER_NAME(_hx___restrict,"__restrict");
	HX_VISIT_MEMBER_NAME(_displayAsPassword,"_displayAsPassword");
	HX_VISIT_MEMBER_NAME(_maxChars,"_maxChars");
	HX_VISIT_MEMBER_NAME(_selectable,"_selectable");
	HX_VISIT_MEMBER_NAME(_smoothScrolling,"_smoothScrolling");
	HX_VISIT_MEMBER_NAME(_updatedTextStyles,"_updatedTextStyles");
	HX_VISIT_MEMBER_NAME(_previousText,"_previousText");
	HX_VISIT_MEMBER_NAME(_previousTextFormat,"_previousTextFormat");
	HX_VISIT_MEMBER_NAME(_previousWidth,"_previousWidth");
	HX_VISIT_MEMBER_NAME(_savedLineMetrics,"_savedLineMetrics");
	HX_VISIT_MEMBER_NAME(_textMeasuredWidth,"_textMeasuredWidth");
	HX_VISIT_MEMBER_NAME(_textMeasuredHeight,"_textMeasuredHeight");
	HX_VISIT_MEMBER_NAME(_textFormat,"_textFormat");
	HX_VISIT_MEMBER_NAME(_embedFonts,"_embedFonts");
	HX_VISIT_MEMBER_NAME(_paddingTop,"_paddingTop");
	HX_VISIT_MEMBER_NAME(_paddingRight,"_paddingRight");
	HX_VISIT_MEMBER_NAME(_paddingBottom,"_paddingBottom");
	HX_VISIT_MEMBER_NAME(_paddingLeft,"_paddingLeft");
	HX_VISIT_MEMBER_NAME(_actualMinVisibleWidth,"_actualMinVisibleWidth");
	HX_VISIT_MEMBER_NAME(_explicitMinVisibleWidth,"_explicitMinVisibleWidth");
	HX_VISIT_MEMBER_NAME(_maxVisibleWidth,"_maxVisibleWidth");
	HX_VISIT_MEMBER_NAME(_actualVisibleWidth,"_actualVisibleWidth");
	HX_VISIT_MEMBER_NAME(_explicitVisibleWidth,"_explicitVisibleWidth");
	HX_VISIT_MEMBER_NAME(_actualMinVisibleHeight,"_actualMinVisibleHeight");
	HX_VISIT_MEMBER_NAME(_explicitMinVisibleHeight,"_explicitMinVisibleHeight");
	HX_VISIT_MEMBER_NAME(_maxVisibleHeight,"_maxVisibleHeight");
	HX_VISIT_MEMBER_NAME(_actualVisibleHeight,"_actualVisibleHeight");
	HX_VISIT_MEMBER_NAME(_explicitVisibleHeight,"_explicitVisibleHeight");
	HX_VISIT_MEMBER_NAME(_scrollX,"_scrollX");
	HX_VISIT_MEMBER_NAME(_scrollY,"_scrollY");
	HX_VISIT_MEMBER_NAME(_pendingSelectionAnchorIndex,"_pendingSelectionAnchorIndex");
	HX_VISIT_MEMBER_NAME(_pendingSelectionActiveIndex,"_pendingSelectionActiveIndex");
	HX_VISIT_MEMBER_NAME(_textFieldHasFocus,"_textFieldHasFocus");
	HX_VISIT_MEMBER_NAME(_ignoreTextFieldScroll,"_ignoreTextFieldScroll");
	 ::feathers::core::FeathersControl_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TextFieldViewPort_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_text() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { return ::hx::Val( _text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollX() ); }
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollY() ); }
		if (HX_FIELD_EQ(inName,"measure") ) { return ::hx::Val( measure_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_text") ) { return ::hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"baseline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_baseline() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_restrict() ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxChars() ); }
		if (HX_FIELD_EQ(inName,"_scrollX") ) { return ::hx::Val( _scrollX ); }
		if (HX_FIELD_EQ(inName,"_scrollY") ) { return ::hx::Val( _scrollY ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textField") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textField() ); }
		if (HX_FIELD_EQ(inName,"_wordWrap") ) { return ::hx::Val( _wordWrap ); }
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_multiline() ); }
		if (HX_FIELD_EQ(inName,"_maxChars") ) { return ::hx::Val( _maxChars ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_textField") ) { return ::hx::Val( _textField ); }
		if (HX_FIELD_EQ(inName,"_multiline") ) { return ::hx::Val( _multiline ); }
		if (HX_FIELD_EQ(inName,"__restrict") ) { return ::hx::Val( _hx___restrict ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectable() ); }
		if (HX_FIELD_EQ(inName,"textFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textFormat() ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_embedFonts() ); }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingTop() ); }
		if (HX_FIELD_EQ(inName,"setPadding") ) { return ::hx::Val( setPadding_dyn() ); }
		if (HX_FIELD_EQ(inName,"initialize") ) { return ::hx::Val( initialize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_selectable") ) { return ::hx::Val( _selectable ); }
		if (HX_FIELD_EQ(inName,"_textFormat") ) { return ::hx::Val( _textFormat ); }
		if (HX_FIELD_EQ(inName,"_embedFonts") ) { return ::hx::Val( _embedFonts ); }
		if (HX_FIELD_EQ(inName,"_paddingTop") ) { return ::hx::Val( _paddingTop ); }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingLeft() ); }
		if (HX_FIELD_EQ(inName,"get_scrollX") ) { return ::hx::Val( get_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollX") ) { return ::hx::Val( set_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollY") ) { return ::hx::Val( get_scrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollY") ) { return ::hx::Val( set_scrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectRange") ) { return ::hx::Val( selectRange_dyn() ); }
		if (HX_FIELD_EQ(inName,"measureSelf") ) { return ::hx::Val( measureSelf_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshText") ) { return ::hx::Val( refreshText_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_baseline") ) { return ::hx::Val( get_baseline_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return ::hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return ::hx::Val( set_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return ::hx::Val( get_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return ::hx::Val( set_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return ::hx::Val( get_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return ::hx::Val( set_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingRight() ); }
		if (HX_FIELD_EQ(inName,"_paddingLeft") ) { return ::hx::Val( _paddingLeft ); }
		if (HX_FIELD_EQ(inName,"visibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_visibleWidth() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_textField") ) { return ::hx::Val( get_textField_dyn() ); }
		if (HX_FIELD_EQ(inName,"textFieldType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_textFieldType() ); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return ::hx::Val( get_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return ::hx::Val( set_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"_previousText") ) { return ::hx::Val( _previousText ); }
		if (HX_FIELD_EQ(inName,"_paddingRight") ) { return ::hx::Val( _paddingRight ); }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingBottom() ); }
		if (HX_FIELD_EQ(inName,"visibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_visibleHeight() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_textFieldType") ) { return ::hx::Val( _textFieldType ); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return ::hx::Val( get_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return ::hx::Val( set_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"_previousWidth") ) { return ::hx::Val( _previousWidth ); }
		if (HX_FIELD_EQ(inName,"get_textFormat") ) { return ::hx::Val( get_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textFormat") ) { return ::hx::Val( set_textFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return ::hx::Val( get_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return ::hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_paddingTop") ) { return ::hx::Val( get_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingTop") ) { return ::hx::Val( set_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"_paddingBottom") ) { return ::hx::Val( _paddingBottom ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"smoothScrolling") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_smoothScrolling() ); }
		if (HX_FIELD_EQ(inName,"get_paddingLeft") ) { return ::hx::Val( get_paddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingLeft") ) { return ::hx::Val( set_paddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"minVisibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_minVisibleWidth() ); }
		if (HX_FIELD_EQ(inName,"maxVisibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxVisibleWidth() ); }
		if (HX_FIELD_EQ(inName,"layoutTextField") ) { return ::hx::Val( layoutTextField_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_smoothScrolling") ) { return ::hx::Val( _smoothScrolling ); }
		if (HX_FIELD_EQ(inName,"get_paddingRight") ) { return ::hx::Val( get_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingRight") ) { return ::hx::Val( set_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"stageFocusTarget") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_stageFocusTarget() ); }
		if (HX_FIELD_EQ(inName,"_maxVisibleWidth") ) { return ::hx::Val( _maxVisibleWidth ); }
		if (HX_FIELD_EQ(inName,"get_visibleWidth") ) { return ::hx::Val( get_visibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visibleWidth") ) { return ::hx::Val( set_visibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"minVisibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_minVisibleHeight() ); }
		if (HX_FIELD_EQ(inName,"maxVisibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxVisibleHeight() ); }
		if (HX_FIELD_EQ(inName,"refreshSelection") ) { return ::hx::Val( refreshSelection_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_textFieldType") ) { return ::hx::Val( get_textFieldType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textFieldType") ) { return ::hx::Val( set_textFieldType_dyn() ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_displayAsPassword() ); }
		if (HX_FIELD_EQ(inName,"_savedLineMetrics") ) { return ::hx::Val( _savedLineMetrics ); }
		if (HX_FIELD_EQ(inName,"get_paddingBottom") ) { return ::hx::Val( get_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingBottom") ) { return ::hx::Val( set_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"_maxVisibleHeight") ) { return ::hx::Val( _maxVisibleHeight ); }
		if (HX_FIELD_EQ(inName,"get_visibleHeight") ) { return ::hx::Val( get_visibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visibleHeight") ) { return ::hx::Val( set_visibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshTextStyles") ) { return ::hx::Val( refreshTextStyles_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_displayAsPassword") ) { return ::hx::Val( _displayAsPassword ); }
		if (HX_FIELD_EQ(inName,"_updatedTextStyles") ) { return ::hx::Val( _updatedTextStyles ); }
		if (HX_FIELD_EQ(inName,"_textMeasuredWidth") ) { return ::hx::Val( _textMeasuredWidth ); }
		if (HX_FIELD_EQ(inName,"_textFieldHasFocus") ) { return ::hx::Val( _textFieldHasFocus ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_smoothScrolling") ) { return ::hx::Val( get_smoothScrolling_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_smoothScrolling") ) { return ::hx::Val( set_smoothScrolling_dyn() ); }
		if (HX_FIELD_EQ(inName,"_previousTextFormat") ) { return ::hx::Val( _previousTextFormat ); }
		if (HX_FIELD_EQ(inName,"_textMeasuredHeight") ) { return ::hx::Val( _textMeasuredHeight ); }
		if (HX_FIELD_EQ(inName,"get_minVisibleWidth") ) { return ::hx::Val( get_minVisibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_minVisibleWidth") ) { return ::hx::Val( set_minVisibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxVisibleWidth") ) { return ::hx::Val( get_maxVisibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxVisibleWidth") ) { return ::hx::Val( set_maxVisibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"_actualVisibleWidth") ) { return ::hx::Val( _actualVisibleWidth ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_stageFocusTarget") ) { return ::hx::Val( get_stageFocusTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_minVisibleHeight") ) { return ::hx::Val( get_minVisibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_minVisibleHeight") ) { return ::hx::Val( set_minVisibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxVisibleHeight") ) { return ::hx::Val( get_maxVisibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxVisibleHeight") ) { return ::hx::Val( set_maxVisibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_actualVisibleHeight") ) { return ::hx::Val( _actualVisibleHeight ); }
		if (HX_FIELD_EQ(inName,"selectionAnchorIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionAnchorIndex() ); }
		if (HX_FIELD_EQ(inName,"selectionActiveIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectionActiveIndex() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return ::hx::Val( get_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return ::hx::Val( set_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"_explicitVisibleWidth") ) { return ::hx::Val( _explicitVisibleWidth ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_actualMinVisibleWidth") ) { return ::hx::Val( _actualMinVisibleWidth ); }
		if (HX_FIELD_EQ(inName,"_explicitVisibleHeight") ) { return ::hx::Val( _explicitVisibleHeight ); }
		if (HX_FIELD_EQ(inName,"_ignoreTextFieldScroll") ) { return ::hx::Val( _ignoreTextFieldScroll ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_actualMinVisibleHeight") ) { return ::hx::Val( _actualMinVisibleHeight ); }
		if (HX_FIELD_EQ(inName,"textField_changeHandler") ) { return ::hx::Val( textField_changeHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"textField_scrollHandler") ) { return ::hx::Val( textField_scrollHandler_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"_explicitMinVisibleWidth") ) { return ::hx::Val( _explicitMinVisibleWidth ); }
		if (HX_FIELD_EQ(inName,"get_selectionAnchorIndex") ) { return ::hx::Val( get_selectionAnchorIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionActiveIndex") ) { return ::hx::Val( get_selectionActiveIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"textField_focusInHandler") ) { return ::hx::Val( textField_focusInHandler_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_explicitMinVisibleHeight") ) { return ::hx::Val( _explicitMinVisibleHeight ); }
		if (HX_FIELD_EQ(inName,"textField_focusOutHandler") ) { return ::hx::Val( textField_focusOutHandler_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"_pendingSelectionAnchorIndex") ) { return ::hx::Val( _pendingSelectionAnchorIndex ); }
		if (HX_FIELD_EQ(inName,"_pendingSelectionActiveIndex") ) { return ::hx::Val( _pendingSelectionActiveIndex ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"textFieldViewPort_focusInHandler") ) { return ::hx::Val( textFieldViewPort_focusInHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TextFieldViewPort_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { _text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollY(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_restrict(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxChars(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"_scrollX") ) { _scrollX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollY") ) { _scrollY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_wordWrap") ) { _wordWrap=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_multiline(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"_maxChars") ) { _maxChars=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_textField") ) { _textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_multiline") ) { _multiline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__restrict") ) { _hx___restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"textFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textFormat(inValue.Cast<  ::openfl::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_embedFonts(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingTop(inValue.Cast< Float >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_selectable") ) { _selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textFormat") ) { _textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_embedFonts") ) { _embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_paddingTop") ) { _paddingTop=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingLeft(inValue.Cast< Float >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingRight(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_paddingLeft") ) { _paddingLeft=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_visibleWidth(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"textFieldType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_textFieldType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"_previousText") ) { _previousText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_paddingRight") ) { _paddingRight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingBottom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"visibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_visibleHeight(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_textFieldType") ) { _textFieldType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_previousWidth") ) { _previousWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_paddingBottom") ) { _paddingBottom=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"smoothScrolling") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_smoothScrolling(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"minVisibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_minVisibleWidth(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"maxVisibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxVisibleWidth(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_smoothScrolling") ) { _smoothScrolling=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_maxVisibleWidth") ) { _maxVisibleWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minVisibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_minVisibleHeight(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"maxVisibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxVisibleHeight(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_displayAsPassword(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"_savedLineMetrics") ) { _savedLineMetrics=inValue.Cast<  ::openfl::text::TextLineMetrics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_maxVisibleHeight") ) { _maxVisibleHeight=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_displayAsPassword") ) { _displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_updatedTextStyles") ) { _updatedTextStyles=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textMeasuredWidth") ) { _textMeasuredWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textFieldHasFocus") ) { _textFieldHasFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_previousTextFormat") ) { _previousTextFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textMeasuredHeight") ) { _textMeasuredHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_actualVisibleWidth") ) { _actualVisibleWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_actualVisibleHeight") ) { _actualVisibleHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_explicitVisibleWidth") ) { _explicitVisibleWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_actualMinVisibleWidth") ) { _actualMinVisibleWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_explicitVisibleHeight") ) { _explicitVisibleHeight=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ignoreTextFieldScroll") ) { _ignoreTextFieldScroll=inValue.Cast< bool >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_actualMinVisibleHeight") ) { _actualMinVisibleHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"_explicitMinVisibleWidth") ) { _explicitMinVisibleWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_explicitMinVisibleHeight") ) { _explicitMinVisibleHeight=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"_pendingSelectionAnchorIndex") ) { _pendingSelectionAnchorIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pendingSelectionActiveIndex") ) { _pendingSelectionActiveIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextFieldViewPort_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_textField",8e,a0,23,f5));
	outFields->push(HX_("textField",cd,24,81,99));
	outFields->push(HX_("_textFieldType",68,1e,3c,da));
	outFields->push(HX_("textFieldType",27,2e,ea,9b));
	outFields->push(HX_("_text",8c,e8,0a,00));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("baseline",85,dc,27,11));
	outFields->push(HX_("_wordWrap",13,0c,71,48));
	outFields->push(HX_("wordWrap",b4,14,db,00));
	outFields->push(HX_("_multiline",ae,4e,b4,f9));
	outFields->push(HX_("multiline",ed,d2,11,9e));
	outFields->push(HX_("__restrict",5c,3e,d7,94));
	outFields->push(HX_("restrict",3c,cb,9e,f1));
	outFields->push(HX_("_displayAsPassword",d0,6f,ac,bd));
	outFields->push(HX_("displayAsPassword",0f,cb,96,ea));
	outFields->push(HX_("_maxChars",f8,e6,66,37));
	outFields->push(HX_("maxChars",99,ef,d0,ef));
	outFields->push(HX_("_selectable",b5,83,b4,96));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("_smoothScrolling",68,9f,21,df));
	outFields->push(HX_("smoothScrolling",e7,5c,42,f4));
	outFields->push(HX_("_updatedTextStyles",8b,09,a3,ed));
	outFields->push(HX_("_previousText",63,2f,0a,d6));
	outFields->push(HX_("_previousTextFormat",fa,5e,47,b1));
	outFields->push(HX_("_previousWidth",90,b2,a8,2f));
	outFields->push(HX_("_savedLineMetrics",c7,a3,6c,c5));
	outFields->push(HX_("_textMeasuredWidth",b4,10,38,8f));
	outFields->push(HX_("_textMeasuredHeight",79,05,26,78));
	outFields->push(HX_("_textFormat",e3,dc,08,07));
	outFields->push(HX_("textFormat",c4,0f,7f,34));
	outFields->push(HX_("_embedFonts",4a,94,6b,61));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("_paddingTop",63,ca,8f,0c));
	outFields->push(HX_("paddingTop",44,fd,05,3a));
	outFields->push(HX_("_paddingRight",2a,7f,16,fd));
	outFields->push(HX_("paddingRight",4b,ec,a7,1a));
	outFields->push(HX_("_paddingBottom",dd,57,eb,8d));
	outFields->push(HX_("paddingBottom",9c,67,99,4f));
	outFields->push(HX_("_paddingLeft",79,f8,ef,eb));
	outFields->push(HX_("paddingLeft",78,4a,e6,85));
	outFields->push(HX_("stageFocusTarget",2b,03,77,7f));
	outFields->push(HX_("_actualMinVisibleWidth",39,a7,ae,c5));
	outFields->push(HX_("_explicitMinVisibleWidth",d3,43,12,41));
	outFields->push(HX_("minVisibleWidth",e6,40,ea,48));
	outFields->push(HX_("_maxVisibleWidth",79,cf,e3,d7));
	outFields->push(HX_("maxVisibleWidth",f8,8c,04,ed));
	outFields->push(HX_("_actualVisibleWidth",01,88,b0,0d));
	outFields->push(HX_("_explicitVisibleWidth",27,67,60,49));
	outFields->push(HX_("visibleWidth",34,d0,e7,3f));
	outFields->push(HX_("_actualMinVisibleHeight",54,23,73,e9));
	outFields->push(HX_("_explicitMinVisibleHeight",7a,8d,38,65));
	outFields->push(HX_("minVisibleHeight",07,01,5e,3a));
	outFields->push(HX_("_maxVisibleHeight",14,33,c1,c5));
	outFields->push(HX_("maxVisibleHeight",b5,44,46,2d));
	outFields->push(HX_("_actualVisibleHeight",8c,f1,15,a3));
	outFields->push(HX_("_explicitVisibleHeight",a6,53,49,a1));
	outFields->push(HX_("visibleHeight",f9,d5,3d,61));
	outFields->push(HX_("_scrollX",2c,8d,90,6a));
	outFields->push(HX_("scrollX",ab,33,d8,30));
	outFields->push(HX_("_scrollY",2d,8d,90,6a));
	outFields->push(HX_("scrollY",ac,33,d8,30));
	outFields->push(HX_("_pendingSelectionAnchorIndex",69,4d,6c,68));
	outFields->push(HX_("selectionAnchorIndex",71,f3,3e,61));
	outFields->push(HX_("_pendingSelectionActiveIndex",78,20,e6,50));
	outFields->push(HX_("selectionActiveIndex",80,c6,b8,49));
	outFields->push(HX_("_textFieldHasFocus",cc,44,3f,9e));
	outFields->push(HX_("_ignoreTextFieldScroll",09,75,89,54));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextFieldViewPort_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(TextFieldViewPort_obj,_textField),HX_("_textField",8e,a0,23,f5)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFieldViewPort_obj,_textFieldType),HX_("_textFieldType",68,1e,3c,da)},
	{::hx::fsString,(int)offsetof(TextFieldViewPort_obj,_text),HX_("_text",8c,e8,0a,00)},
	{::hx::fsBool,(int)offsetof(TextFieldViewPort_obj,_wordWrap),HX_("_wordWrap",13,0c,71,48)},
	{::hx::fsBool,(int)offsetof(TextFieldViewPort_obj,_multiline),HX_("_multiline",ae,4e,b4,f9)},
	{::hx::fsString,(int)offsetof(TextFieldViewPort_obj,_hx___restrict),HX_("__restrict",5c,3e,d7,94)},
	{::hx::fsBool,(int)offsetof(TextFieldViewPort_obj,_displayAsPassword),HX_("_displayAsPassword",d0,6f,ac,bd)},
	{::hx::fsInt,(int)offsetof(TextFieldViewPort_obj,_maxChars),HX_("_maxChars",f8,e6,66,37)},
	{::hx::fsBool,(int)offsetof(TextFieldViewPort_obj,_selectable),HX_("_selectable",b5,83,b4,96)},
	{::hx::fsBool,(int)offsetof(TextFieldViewPort_obj,_smoothScrolling),HX_("_smoothScrolling",68,9f,21,df)},
	{::hx::fsBool,(int)offsetof(TextFieldViewPort_obj,_updatedTextStyles),HX_("_updatedTextStyles",8b,09,a3,ed)},
	{::hx::fsString,(int)offsetof(TextFieldViewPort_obj,_previousText),HX_("_previousText",63,2f,0a,d6)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextFieldViewPort_obj,_previousTextFormat),HX_("_previousTextFormat",fa,5e,47,b1)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFieldViewPort_obj,_previousWidth),HX_("_previousWidth",90,b2,a8,2f)},
	{::hx::fsObject /*  ::openfl::text::TextLineMetrics */ ,(int)offsetof(TextFieldViewPort_obj,_savedLineMetrics),HX_("_savedLineMetrics",c7,a3,6c,c5)},
	{::hx::fsFloat,(int)offsetof(TextFieldViewPort_obj,_textMeasuredWidth),HX_("_textMeasuredWidth",b4,10,38,8f)},
	{::hx::fsFloat,(int)offsetof(TextFieldViewPort_obj,_textMeasuredHeight),HX_("_textMeasuredHeight",79,05,26,78)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextFieldViewPort_obj,_textFormat),HX_("_textFormat",e3,dc,08,07)},
	{::hx::fsBool,(int)offsetof(TextFieldViewPort_obj,_embedFonts),HX_("_embedFonts",4a,94,6b,61)},
	{::hx::fsFloat,(int)offsetof(TextFieldViewPort_obj,_paddingTop),HX_("_paddingTop",63,ca,8f,0c)},
	{::hx::fsFloat,(int)offsetof(TextFieldViewPort_obj,_paddingRight),HX_("_paddingRight",2a,7f,16,fd)},
	{::hx::fsFloat,(int)offsetof(TextFieldViewPort_obj,_paddingBottom),HX_("_paddingBottom",dd,57,eb,8d)},
	{::hx::fsFloat,(int)offsetof(TextFieldViewPort_obj,_paddingLeft),HX_("_paddingLeft",79,f8,ef,eb)},
	{::hx::fsFloat,(int)offsetof(TextFieldViewPort_obj,_actualMinVisibleWidth),HX_("_actualMinVisibleWidth",39,a7,ae,c5)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFieldViewPort_obj,_explicitMinVisibleWidth),HX_("_explicitMinVisibleWidth",d3,43,12,41)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFieldViewPort_obj,_maxVisibleWidth),HX_("_maxVisibleWidth",79,cf,e3,d7)},
	{::hx::fsFloat,(int)offsetof(TextFieldViewPort_obj,_actualVisibleWidth),HX_("_actualVisibleWidth",01,88,b0,0d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFieldViewPort_obj,_explicitVisibleWidth),HX_("_explicitVisibleWidth",27,67,60,49)},
	{::hx::fsFloat,(int)offsetof(TextFieldViewPort_obj,_actualMinVisibleHeight),HX_("_actualMinVisibleHeight",54,23,73,e9)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFieldViewPort_obj,_explicitMinVisibleHeight),HX_("_explicitMinVisibleHeight",7a,8d,38,65)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFieldViewPort_obj,_maxVisibleHeight),HX_("_maxVisibleHeight",14,33,c1,c5)},
	{::hx::fsFloat,(int)offsetof(TextFieldViewPort_obj,_actualVisibleHeight),HX_("_actualVisibleHeight",8c,f1,15,a3)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextFieldViewPort_obj,_explicitVisibleHeight),HX_("_explicitVisibleHeight",a6,53,49,a1)},
	{::hx::fsFloat,(int)offsetof(TextFieldViewPort_obj,_scrollX),HX_("_scrollX",2c,8d,90,6a)},
	{::hx::fsFloat,(int)offsetof(TextFieldViewPort_obj,_scrollY),HX_("_scrollY",2d,8d,90,6a)},
	{::hx::fsInt,(int)offsetof(TextFieldViewPort_obj,_pendingSelectionAnchorIndex),HX_("_pendingSelectionAnchorIndex",69,4d,6c,68)},
	{::hx::fsInt,(int)offsetof(TextFieldViewPort_obj,_pendingSelectionActiveIndex),HX_("_pendingSelectionActiveIndex",78,20,e6,50)},
	{::hx::fsBool,(int)offsetof(TextFieldViewPort_obj,_textFieldHasFocus),HX_("_textFieldHasFocus",cc,44,3f,9e)},
	{::hx::fsBool,(int)offsetof(TextFieldViewPort_obj,_ignoreTextFieldScroll),HX_("_ignoreTextFieldScroll",09,75,89,54)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TextFieldViewPort_obj_sStaticStorageInfo = 0;
#endif

static ::String TextFieldViewPort_obj_sMemberFields[] = {
	HX_("_textField",8e,a0,23,f5),
	HX_("get_textField",a4,f8,e4,5a),
	HX_("_textFieldType",68,1e,3c,da),
	HX_("get_textFieldType",7e,39,5a,a2),
	HX_("set_textFieldType",8a,11,c8,c5),
	HX_("_text",8c,e8,0a,00),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("get_baseline",8e,90,41,c6),
	HX_("_wordWrap",13,0c,71,48),
	HX_("get_wordWrap",bd,c8,f4,b5),
	HX_("set_wordWrap",31,ec,ed,ca),
	HX_("_multiline",ae,4e,b4,f9),
	HX_("get_multiline",c4,a6,75,5f),
	HX_("set_multiline",d0,88,7b,a4),
	HX_("__restrict",5c,3e,d7,94),
	HX_("get_restrict",45,7f,b8,a6),
	HX_("set_restrict",b9,a2,b1,bb),
	HX_("_displayAsPassword",d0,6f,ac,bd),
	HX_("get_displayAsPassword",e6,cd,44,69),
	HX_("set_displayAsPassword",f2,9b,4d,bd),
	HX_("_maxChars",f8,e6,66,37),
	HX_("get_maxChars",a2,a3,ea,a4),
	HX_("set_maxChars",16,c7,e3,b9),
	HX_("_selectable",b5,83,b4,96),
	HX_("get_selectable",df,3e,20,3a),
	HX_("set_selectable",53,27,40,5a),
	HX_("_smoothScrolling",68,9f,21,df),
	HX_("get_smoothScrolling",fe,2b,4d,7f),
	HX_("set_smoothScrolling",0a,1f,ea,bb),
	HX_("_updatedTextStyles",8b,09,a3,ed),
	HX_("_previousText",63,2f,0a,d6),
	HX_("_previousTextFormat",fa,5e,47,b1),
	HX_("_previousWidth",90,b2,a8,2f),
	HX_("_savedLineMetrics",c7,a3,6c,c5),
	HX_("_textMeasuredWidth",b4,10,38,8f),
	HX_("_textMeasuredHeight",79,05,26,78),
	HX_("_textFormat",e3,dc,08,07),
	HX_("get_textFormat",0d,98,74,aa),
	HX_("set_textFormat",81,80,94,ca),
	HX_("_embedFonts",4a,94,6b,61),
	HX_("get_embedFonts",74,4f,d7,04),
	HX_("set_embedFonts",e8,37,f7,24),
	HX_("_paddingTop",63,ca,8f,0c),
	HX_("get_paddingTop",8d,85,fb,af),
	HX_("set_paddingTop",01,6e,1b,d0),
	HX_("_paddingRight",2a,7f,16,fd),
	HX_("get_paddingRight",d4,d8,46,1f),
	HX_("set_paddingRight",48,c6,88,75),
	HX_("_paddingBottom",dd,57,eb,8d),
	HX_("get_paddingBottom",f3,72,09,56),
	HX_("set_paddingBottom",ff,4a,77,79),
	HX_("_paddingLeft",79,f8,ef,eb),
	HX_("get_paddingLeft",0f,02,c8,46),
	HX_("set_paddingLeft",1b,7f,93,42),
	HX_("get_stageFocusTarget",34,68,e1,9d),
	HX_("_actualMinVisibleWidth",39,a7,ae,c5),
	HX_("_explicitMinVisibleWidth",d3,43,12,41),
	HX_("get_minVisibleWidth",fd,0f,f5,d3),
	HX_("set_minVisibleWidth",09,03,92,10),
	HX_("_maxVisibleWidth",79,cf,e3,d7),
	HX_("get_maxVisibleWidth",0f,5c,0f,78),
	HX_("set_maxVisibleWidth",1b,4f,ac,b4),
	HX_("_actualVisibleWidth",01,88,b0,0d),
	HX_("_explicitVisibleWidth",27,67,60,49),
	HX_("get_visibleWidth",bd,bc,86,44),
	HX_("set_visibleWidth",31,aa,c8,9a),
	HX_("_actualMinVisibleHeight",54,23,73,e9),
	HX_("_explicitMinVisibleHeight",7a,8d,38,65),
	HX_("get_minVisibleHeight",10,66,c8,58),
	HX_("set_minVisibleHeight",84,1d,80,25),
	HX_("_maxVisibleHeight",14,33,c1,c5),
	HX_("get_maxVisibleHeight",be,a9,b0,4b),
	HX_("set_maxVisibleHeight",32,61,68,18),
	HX_("_actualVisibleHeight",8c,f1,15,a3),
	HX_("_explicitVisibleHeight",a6,53,49,a1),
	HX_("get_visibleHeight",50,e1,ad,67),
	HX_("set_visibleHeight",5c,b9,1b,8b),
	HX_("_scrollX",2c,8d,90,6a),
	HX_("get_scrollX",c2,93,d2,b6),
	HX_("set_scrollX",ce,9a,3f,c1),
	HX_("_scrollY",2d,8d,90,6a),
	HX_("get_scrollY",c3,93,d2,b6),
	HX_("set_scrollY",cf,9a,3f,c1),
	HX_("_pendingSelectionAnchorIndex",69,4d,6c,68),
	HX_("get_selectionAnchorIndex",fa,10,db,a3),
	HX_("_pendingSelectionActiveIndex",78,20,e6,50),
	HX_("get_selectionActiveIndex",09,e4,54,8c),
	HX_("_textFieldHasFocus",cc,44,3f,9e),
	HX_("_ignoreTextFieldScroll",09,75,89,54),
	HX_("setPadding",4f,7e,5c,23),
	HX_("selectRange",21,a9,8a,3d),
	HX_("initialize",50,31,bb,ec),
	HX_("update",09,86,05,87),
	HX_("measureSelf",0a,ba,d7,4f),
	HX_("measure",5e,fb,e9,3c),
	HX_("refreshTextStyles",6a,44,c4,9f),
	HX_("refreshText",28,5c,95,41),
	HX_("refreshSelection",f1,6a,1e,3e),
	HX_("layoutTextField",c3,30,89,5a),
	HX_("textField_changeHandler",08,56,33,6e),
	HX_("textField_focusInHandler",df,49,ab,21),
	HX_("textField_focusOutHandler",22,b8,ba,e9),
	HX_("textField_scrollHandler",0b,cd,a5,7f),
	HX_("textFieldViewPort_focusInHandler",f9,ca,fa,f3),
	::String(null()) };

::hx::Class TextFieldViewPort_obj::__mClass;

void TextFieldViewPort_obj::__register()
{
	TextFieldViewPort_obj _hx_dummy;
	TextFieldViewPort_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.supportClasses.TextFieldViewPort",76,4a,9f,9a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextFieldViewPort_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextFieldViewPort_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextFieldViewPort_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextFieldViewPort_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace controls
} // end namespace supportClasses
