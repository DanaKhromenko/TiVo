// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStateObserver
#include <feathers/core/IStateObserver.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_InvalidationFlag
#include <feathers/core/InvalidationFlag.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_graphics_FillStyle
#include <feathers/graphics/FillStyle.h>
#endif
#ifndef INCLUDED_feathers_graphics_LineStyle
#include <feathers/graphics/LineStyle.h>
#endif
#ifndef INCLUDED_feathers_layout_Direction
#include <feathers/layout/Direction.h>
#endif
#ifndef INCLUDED_feathers_skins_BaseGraphicsPathSkin
#include <feathers/skins/BaseGraphicsPathSkin.h>
#endif
#ifndef INCLUDED_feathers_skins_IProgrammaticSkin
#include <feathers/skins/IProgrammaticSkin.h>
#endif
#ifndef INCLUDED_feathers_skins_PillSkin
#include <feathers/skins/PillSkin.h>
#endif
#ifndef INCLUDED_feathers_skins_ProgrammaticSkin
#include <feathers/skins/ProgrammaticSkin.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c2d7ea58268f5f1f_28_new,"feathers.skins.PillSkin","new",0x1d7d50be,"feathers.skins.PillSkin.new","feathers/skins/PillSkin.hx",28,0x2f88ecf0)
HX_LOCAL_STACK_FRAME(_hx_pos_c2d7ea58268f5f1f_44_get_capDirection,"feathers.skins.PillSkin","get_capDirection",0x5b1fc538,"feathers.skins.PillSkin.get_capDirection","feathers/skins/PillSkin.hx",44,0x2f88ecf0)
HX_LOCAL_STACK_FRAME(_hx_pos_c2d7ea58268f5f1f_47_set_capDirection,"feathers.skins.PillSkin","set_capDirection",0xb161b2ac,"feathers.skins.PillSkin.set_capDirection","feathers/skins/PillSkin.hx",47,0x2f88ecf0)
HX_LOCAL_STACK_FRAME(_hx_pos_c2d7ea58268f5f1f_56_drawPath,"feathers.skins.PillSkin","drawPath",0x30adfaab,"feathers.skins.PillSkin.drawPath","feathers/skins/PillSkin.hx",56,0x2f88ecf0)
namespace feathers{
namespace skins{

void PillSkin_obj::__construct( ::feathers::graphics::FillStyle fill, ::feathers::graphics::LineStyle border, ::feathers::layout::Direction __o_capDirection){
            		 ::feathers::layout::Direction capDirection = __o_capDirection;
            		if (::hx::IsNull(__o_capDirection)) capDirection = ::feathers::layout::Direction_obj::HORIZONTAL_dyn();
            	HX_STACKFRAME(&_hx_pos_c2d7ea58268f5f1f_28_new)
HXLINE(  29)		super::__construct(fill,border);
HXLINE(  30)		this->_capDirection = capDirection;
            	}

Dynamic PillSkin_obj::__CreateEmpty() { return new PillSkin_obj; }

void *PillSkin_obj::_hx_vtable = 0;

Dynamic PillSkin_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PillSkin_obj > _hx_result = new PillSkin_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool PillSkin_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x093ab78b) {
			if (inClassId<=(int)0x07456291) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x07456291;
				}
			} else {
				return inClassId==(int)0x093ab78b;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			if (inClassId<=(int)0x34f5d338) {
				return inClassId==(int)0x33776324 || inClassId==(int)0x34f5d338;
			} else {
				return inClassId==(int)0x4af7dd8e;
			}
		} else {
			return inClassId==(int)0x58123034 || inClassId==(int)0x6b353933;
		}
	}
}

 ::feathers::layout::Direction PillSkin_obj::get_capDirection(){
            	HX_STACKFRAME(&_hx_pos_c2d7ea58268f5f1f_44_get_capDirection)
HXDLIN(  44)		return this->_capDirection;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PillSkin_obj,get_capDirection,return )

 ::feathers::layout::Direction PillSkin_obj::set_capDirection( ::feathers::layout::Direction value){
            	HX_STACKFRAME(&_hx_pos_c2d7ea58268f5f1f_47_set_capDirection)
HXLINE(  48)		if (::hx::IsPointerEq( this->_capDirection,value )) {
HXLINE(  49)			return this->_capDirection;
            		}
HXLINE(  51)		this->_capDirection = value;
HXLINE(  52)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE(  53)		return this->_capDirection;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PillSkin_obj,set_capDirection,return )

void PillSkin_obj::drawPath(){
            	HX_STACKFRAME(&_hx_pos_c2d7ea58268f5f1f_56_drawPath)
HXLINE(  57)		 ::feathers::graphics::LineStyle currentBorder = this->getCurrentBorder();
HXLINE(  58)		Float thickness = this->getLineThickness(currentBorder);
HXLINE(  59)		Float thicknessOffset = (thickness / ((Float)2.0));
HXLINE(  61)		Float drawWidth = ::Math_obj::max(((Float)0.0),(this->actualWidth - thickness));
HXLINE(  62)		Float drawHeight = ::Math_obj::max(((Float)0.0),(this->actualHeight - thickness));
HXLINE(  64)		Float ellipseSize;
HXDLIN(  64)		if (::hx::IsPointerEq( this->get_capDirection(),::feathers::layout::Direction_obj::VERTICAL_dyn() )) {
HXLINE(  64)			ellipseSize = this->actualWidth;
            		}
            		else {
HXLINE(  64)			ellipseSize = this->actualHeight;
            		}
HXLINE(  65)		this->get_graphics()->drawRoundRect(thicknessOffset,thicknessOffset,drawWidth,drawHeight,ellipseSize,null());
            	}



::hx::ObjectPtr< PillSkin_obj > PillSkin_obj::__new( ::feathers::graphics::FillStyle fill, ::feathers::graphics::LineStyle border, ::feathers::layout::Direction __o_capDirection) {
	::hx::ObjectPtr< PillSkin_obj > __this = new PillSkin_obj();
	__this->__construct(fill,border,__o_capDirection);
	return __this;
}

::hx::ObjectPtr< PillSkin_obj > PillSkin_obj::__alloc(::hx::Ctx *_hx_ctx, ::feathers::graphics::FillStyle fill, ::feathers::graphics::LineStyle border, ::feathers::layout::Direction __o_capDirection) {
	PillSkin_obj *__this = (PillSkin_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PillSkin_obj), true, "feathers.skins.PillSkin"));
	*(void **)__this = PillSkin_obj::_hx_vtable;
	__this->__construct(fill,border,__o_capDirection);
	return __this;
}

PillSkin_obj::PillSkin_obj()
{
}

void PillSkin_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PillSkin);
	HX_MARK_MEMBER_NAME(_capDirection,"_capDirection");
	 ::feathers::skins::BaseGraphicsPathSkin_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PillSkin_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_capDirection,"_capDirection");
	 ::feathers::skins::BaseGraphicsPathSkin_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PillSkin_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"drawPath") ) { return ::hx::Val( drawPath_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"capDirection") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_capDirection() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_capDirection") ) { return ::hx::Val( _capDirection ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_capDirection") ) { return ::hx::Val( get_capDirection_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_capDirection") ) { return ::hx::Val( set_capDirection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PillSkin_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"capDirection") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_capDirection(inValue.Cast<  ::feathers::layout::Direction >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_capDirection") ) { _capDirection=inValue.Cast<  ::feathers::layout::Direction >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PillSkin_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_capDirection",ac,4e,64,f6));
	outFields->push(HX_("capDirection",cd,bb,f5,13));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PillSkin_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::feathers::layout::Direction */ ,(int)offsetof(PillSkin_obj,_capDirection),HX_("_capDirection",ac,4e,64,f6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PillSkin_obj_sStaticStorageInfo = 0;
#endif

static ::String PillSkin_obj_sMemberFields[] = {
	HX_("_capDirection",ac,4e,64,f6),
	HX_("get_capDirection",56,a8,94,18),
	HX_("set_capDirection",ca,95,d6,6e),
	HX_("drawPath",c9,8f,bb,5e),
	::String(null()) };

::hx::Class PillSkin_obj::__mClass;

void PillSkin_obj::__register()
{
	PillSkin_obj _hx_dummy;
	PillSkin_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.skins.PillSkin",cc,d9,22,dc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PillSkin_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PillSkin_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PillSkin_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PillSkin_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace skins
